///
/// Auto-generated by Stone, do not modify.
///

#import "DBXASYNCPollError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXASYNCPollError 

- (instancetype)initWithInvalidAsyncJobId {
    self = [super init];
    if (self != nil) {
        _tag = DBXASYNCPollErrorInvalidAsyncJobId;
    }
    return self;
}

- (instancetype)initWithInternalError {
    self = [super init];
    if (self != nil) {
        _tag = DBXASYNCPollErrorInternalError;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXASYNCPollErrorOther;
    }
    return self;
}

- (BOOL)isInvalidAsyncJobId {
    return _tag == DBXASYNCPollErrorInvalidAsyncJobId;
}

- (BOOL)isInternalError {
    return _tag == DBXASYNCPollErrorInternalError;
}

- (BOOL)isOther {
    return _tag == DBXASYNCPollErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXASYNCPollErrorInvalidAsyncJobId:
           return @"DBXASYNCPollErrorInvalidAsyncJobId";
        case DBXASYNCPollErrorInternalError:
           return @"DBXASYNCPollErrorInternalError";
        case DBXASYNCPollErrorOther:
           return @"DBXASYNCPollErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXASYNCPollErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXASYNCPollErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXASYNCPollErrorSerializer serialize:self] description];
}

@end


@implementation DBXASYNCPollErrorSerializer 

+ (NSDictionary *)serialize:(DBXASYNCPollError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInvalidAsyncJobId]) {
        jsonDict[@".tag"] = @"invalid_async_job_id";
    }
    else if ([valueObj isInternalError]) {
        jsonDict[@".tag"] = @"internal_error";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXASYNCPollError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"invalid_async_job_id"]) {
        return [[DBXASYNCPollError alloc] initWithInvalidAsyncJobId];
    }
    else if ([tag isEqualToString:@"internal_error"]) {
        return [[DBXASYNCPollError alloc] initWithInternalError];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXASYNCPollError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
