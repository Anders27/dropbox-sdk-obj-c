///
/// Auto-generated by Stone, do not modify.
///

#import "DBXASYNCPollResultBase.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXASYNCPollResultBase 

- (instancetype)initWithInProgress {
    self = [super init];
    if (self) {
        _tag = DBXASYNCPollResultBaseInProgress;
    }
    return self;
}

- (BOOL)isInProgress {
    return _tag == DBXASYNCPollResultBaseInProgress;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXASYNCPollResultBaseInProgress:
           return @"DBXASYNCPollResultBaseInProgress";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXASYNCPollResultBaseSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXASYNCPollResultBaseSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXASYNCPollResultBaseSerializer serialize:self] description];
}

@end


@implementation DBXASYNCPollResultBaseSerializer 

+ (NSDictionary *)serialize:(DBXASYNCPollResultBase *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInProgress]) {
        jsonDict[@".tag"] = @"in_progress";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXASYNCPollResultBase *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"in_progress"]) {
        return [[DBXASYNCPollResultBase alloc] initWithInProgress];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
