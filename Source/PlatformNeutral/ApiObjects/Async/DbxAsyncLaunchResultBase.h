///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>
#import "DbxStoneSerializers.h"

@class DbxAsyncLaunchResultBase;

/// 
/// The DbxAsyncLaunchResultBase union.
/// 
/// Result returned by methods that launch an asynchronous job. A method who may
/// either launch an asynchronous job, or complete the request synchronously,
/// can use this union by extending it, and adding a 'complete' field with the
/// type of the synchronous response. See LaunchEmptyResult for an example.
/// 
@interface DbxAsyncLaunchResultBase : NSObject <DbxSerializable> 

typedef NS_ENUM(NSInteger, AsyncLaunchResultBaseTag) {
    /// This response indicates that the processing is asynchronous. The string
    /// is an id that can be used to obtain the status of the asynchronous job.
    AsyncLaunchResultBaseAsyncJobId,
};

- (nonnull instancetype)initWithAsyncJobId:(NSString * _Nonnull)asyncJobId;

- (BOOL)isAsyncJobId;

- (NSString * _Nonnull)getTagName;

+ (NSDictionary * _Nonnull)serialize:(id _Nonnull)obj;

+ (id _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

- (NSString * _Nonnull)description;

/// Current state of the DbxAsyncLaunchResultBase union type.
@property (nonatomic) AsyncLaunchResultBaseTag tag;
@property (nonatomic, copy) NSString * _Nonnull asyncJobId;

@end


@interface DbxAsyncLaunchResultBaseSerializer : NSObject 

+ (NSDictionary * _Nonnull)serialize:(DbxAsyncLaunchResultBase * _Nonnull)obj;

+ (DbxAsyncLaunchResultBase * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
