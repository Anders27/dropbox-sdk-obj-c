///
/// Auto-generated by Stone, do not modify.
///

#import "DbxAsyncLaunchResultBase.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxAsyncLaunchResultBase 

- (instancetype)initWithAsyncJobId:(NSString *)asyncJobId {
    self = [super init];
    if (self != nil) {
        _tag = (AsyncLaunchResultBaseTag)AsyncLaunchResultBaseAsyncJobId;
        _asyncJobId = asyncJobId;
    }
    return self;
}

- (BOOL)isAsyncJobId {
    return _tag == (AsyncLaunchResultBaseTag)AsyncLaunchResultBaseAsyncJobId;
}

- (NSString *)getTagName {
    if (_tag == (AsyncLaunchResultBaseTag)AsyncLaunchResultBaseAsyncJobId) {
        return @"(AsyncLaunchResultBaseTag)AsyncLaunchResultBaseAsyncJobId";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)asyncJobId {
    if (_tag != (AsyncLaunchResultBaseTag)AsyncLaunchResultBaseAsyncJobId) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (AsyncLaunchResultBaseTag)AsyncLaunchResultBaseAsyncJobId, but was %@.", [self getTagName]];
    }
    return _asyncJobId;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxAsyncLaunchResultBaseSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxAsyncLaunchResultBaseSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxAsyncLaunchResultBaseSerializer serialize:self] description];
}

@end


@implementation DbxAsyncLaunchResultBaseSerializer 

+ (NSDictionary *)serialize:(DbxAsyncLaunchResultBase *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAsyncJobId]) {
        jsonDict[@"async_job_id"] = [DbxStringSerializer serialize:valueObj.asyncJobId];
        jsonDict[@".tag"] = @"async_job_id";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxAsyncLaunchResultBase *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"async_job_id"]) {
        NSString *asyncJobId = [DbxStringSerializer deserialize:valueDict[@"async_job_id"]];
        return [[DbxAsyncLaunchResultBase alloc] initWithAsyncJobId:asyncJobId];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
