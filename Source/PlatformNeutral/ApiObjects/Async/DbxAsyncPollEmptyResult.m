///
/// Auto-generated by Stone, do not modify.
///

#import "DbxAsyncPollEmptyResult.h"
#import "DbxAsyncPollResultBase.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxAsyncPollEmptyResult 

- (instancetype)initWithInProgress {
    self = [super init];
    if (self != nil) {
        _tag = AsyncPollEmptyResultInProgress;
    }
    return self;
}

- (instancetype)initWithComplete {
    self = [super init];
    if (self != nil) {
        _tag = AsyncPollEmptyResultComplete;
    }
    return self;
}

- (BOOL)isInProgress {
    return _tag == AsyncPollEmptyResultInProgress;
}

- (BOOL)isComplete {
    return _tag == AsyncPollEmptyResultComplete;
}

- (NSString *)getTagName {
    switch (_tag) {
        case AsyncPollEmptyResultInProgress:
           return @"AsyncPollEmptyResultInProgress";
        case AsyncPollEmptyResultComplete:
           return @"AsyncPollEmptyResultComplete";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxAsyncPollEmptyResultSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxAsyncPollEmptyResultSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxAsyncPollEmptyResultSerializer serialize:self] description];
}

@end


@implementation DbxAsyncPollEmptyResultSerializer 

+ (NSDictionary *)serialize:(DbxAsyncPollEmptyResult *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInProgress]) {
        jsonDict[@".tag"] = @"in_progress";
    }
    else if ([valueObj isComplete]) {
        jsonDict[@".tag"] = @"complete";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxAsyncPollEmptyResult *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"in_progress"]) {
        return [[DbxAsyncPollEmptyResult alloc] initWithInProgress];
    }
    if ([tag isEqualToString:@"complete"]) {
        return [[DbxAsyncPollEmptyResult alloc] initWithComplete];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
