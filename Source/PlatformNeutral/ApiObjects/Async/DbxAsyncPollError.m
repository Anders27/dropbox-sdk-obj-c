///
/// Auto-generated by Stone, do not modify.
///

#import "DbxAsyncPollError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxAsyncPollError 

- (instancetype)initWithInvalidAsyncJobId {
    self = [super init];
    if (self != nil) {
        _tag = AsyncPollErrorInvalidAsyncJobId;
    }
    return self;
}

- (instancetype)initWithInternalError {
    self = [super init];
    if (self != nil) {
        _tag = AsyncPollErrorInternalError;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = AsyncPollErrorOther;
    }
    return self;
}

- (BOOL)isInvalidAsyncJobId {
    return _tag == AsyncPollErrorInvalidAsyncJobId;
}

- (BOOL)isInternalError {
    return _tag == AsyncPollErrorInternalError;
}

- (BOOL)isOther {
    return _tag == AsyncPollErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case AsyncPollErrorInvalidAsyncJobId:
           return @"AsyncPollErrorInvalidAsyncJobId";
        case AsyncPollErrorInternalError:
           return @"AsyncPollErrorInternalError";
        case AsyncPollErrorOther:
           return @"AsyncPollErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxAsyncPollErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxAsyncPollErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxAsyncPollErrorSerializer serialize:self] description];
}

@end


@implementation DbxAsyncPollErrorSerializer 

+ (NSDictionary *)serialize:(DbxAsyncPollError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInvalidAsyncJobId]) {
        jsonDict[@".tag"] = @"invalid_async_job_id";
    }
    else if ([valueObj isInternalError]) {
        jsonDict[@".tag"] = @"internal_error";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxAsyncPollError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"invalid_async_job_id"]) {
        return [[DbxAsyncPollError alloc] initWithInvalidAsyncJobId];
    }
    if ([tag isEqualToString:@"internal_error"]) {
        return [[DbxAsyncPollError alloc] initWithInternalError];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxAsyncPollError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
