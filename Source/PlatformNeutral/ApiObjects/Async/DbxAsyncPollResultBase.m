///
/// Auto-generated by Stone, do not modify.
///

#import "DbxAsyncPollResultBase.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxAsyncPollResultBase 

- (instancetype)initWithInProgress {
    self = [super init];
    if (self != nil) {
        _tag = AsyncPollResultBaseInProgress;
    }
    return self;
}

- (BOOL)isInProgress {
    return _tag == AsyncPollResultBaseInProgress;
}

- (NSString *)getTagName {
    switch (_tag) {
        case AsyncPollResultBaseInProgress:
           return @"AsyncPollResultBaseInProgress";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxAsyncPollResultBaseSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxAsyncPollResultBaseSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxAsyncPollResultBaseSerializer serialize:self] description];
}

@end


@implementation DbxAsyncPollResultBaseSerializer 

+ (NSDictionary *)serialize:(DbxAsyncPollResultBase *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInProgress]) {
        jsonDict[@".tag"] = @"in_progress";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxAsyncPollResultBase *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"in_progress"]) {
        return [[DbxAsyncPollResultBase alloc] initWithInProgress];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
