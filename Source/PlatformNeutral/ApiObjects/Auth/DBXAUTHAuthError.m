///
/// Auto-generated by Stone, do not modify.
///

#import "DBXAUTHAuthError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXAUTHAuthError 

- (instancetype)initWithInvalidAccessToken {
    self = [super init];
    if (self != nil) {
        _tag = DBXAUTHAuthErrorInvalidAccessToken;
    }
    return self;
}

- (instancetype)initWithInvalidSelectUser {
    self = [super init];
    if (self != nil) {
        _tag = DBXAUTHAuthErrorInvalidSelectUser;
    }
    return self;
}

- (instancetype)initWithInvalidSelectAdmin {
    self = [super init];
    if (self != nil) {
        _tag = DBXAUTHAuthErrorInvalidSelectAdmin;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXAUTHAuthErrorOther;
    }
    return self;
}

- (BOOL)isInvalidAccessToken {
    return _tag == DBXAUTHAuthErrorInvalidAccessToken;
}

- (BOOL)isInvalidSelectUser {
    return _tag == DBXAUTHAuthErrorInvalidSelectUser;
}

- (BOOL)isInvalidSelectAdmin {
    return _tag == DBXAUTHAuthErrorInvalidSelectAdmin;
}

- (BOOL)isOther {
    return _tag == DBXAUTHAuthErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXAUTHAuthErrorInvalidAccessToken:
           return @"DBXAUTHAuthErrorInvalidAccessToken";
        case DBXAUTHAuthErrorInvalidSelectUser:
           return @"DBXAUTHAuthErrorInvalidSelectUser";
        case DBXAUTHAuthErrorInvalidSelectAdmin:
           return @"DBXAUTHAuthErrorInvalidSelectAdmin";
        case DBXAUTHAuthErrorOther:
           return @"DBXAUTHAuthErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXAUTHAuthErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXAUTHAuthErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXAUTHAuthErrorSerializer serialize:self] description];
}

@end


@implementation DBXAUTHAuthErrorSerializer 

+ (NSDictionary *)serialize:(DBXAUTHAuthError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInvalidAccessToken]) {
        jsonDict[@".tag"] = @"invalid_access_token";
    }
    else if ([valueObj isInvalidSelectUser]) {
        jsonDict[@".tag"] = @"invalid_select_user";
    }
    else if ([valueObj isInvalidSelectAdmin]) {
        jsonDict[@".tag"] = @"invalid_select_admin";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXAUTHAuthError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"invalid_access_token"]) {
        return [[DBXAUTHAuthError alloc] initWithInvalidAccessToken];
    }
    else if ([tag isEqualToString:@"invalid_select_user"]) {
        return [[DBXAUTHAuthError alloc] initWithInvalidSelectUser];
    }
    else if ([tag isEqualToString:@"invalid_select_admin"]) {
        return [[DBXAUTHAuthError alloc] initWithInvalidSelectAdmin];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXAUTHAuthError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
