///
/// Auto-generated by Stone, do not modify.
///

#import "DbxAuthAuthError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxAuthAuthError 

- (instancetype)initWithInvalidAccessToken {
    self = [super init];
    if (self != nil) {
        _tag = AuthAuthErrorInvalidAccessToken;
    }
    return self;
}

- (instancetype)initWithInvalidSelectUser {
    self = [super init];
    if (self != nil) {
        _tag = AuthAuthErrorInvalidSelectUser;
    }
    return self;
}

- (instancetype)initWithInvalidSelectAdmin {
    self = [super init];
    if (self != nil) {
        _tag = AuthAuthErrorInvalidSelectAdmin;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = AuthAuthErrorOther;
    }
    return self;
}

- (BOOL)isInvalidAccessToken {
    return _tag == AuthAuthErrorInvalidAccessToken;
}

- (BOOL)isInvalidSelectUser {
    return _tag == AuthAuthErrorInvalidSelectUser;
}

- (BOOL)isInvalidSelectAdmin {
    return _tag == AuthAuthErrorInvalidSelectAdmin;
}

- (BOOL)isOther {
    return _tag == AuthAuthErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case AuthAuthErrorInvalidAccessToken:
           return @"AuthAuthErrorInvalidAccessToken";
        case AuthAuthErrorInvalidSelectUser:
           return @"AuthAuthErrorInvalidSelectUser";
        case AuthAuthErrorInvalidSelectAdmin:
           return @"AuthAuthErrorInvalidSelectAdmin";
        case AuthAuthErrorOther:
           return @"AuthAuthErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxAuthAuthErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxAuthAuthErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxAuthAuthErrorSerializer serialize:self] description];
}

@end


@implementation DbxAuthAuthErrorSerializer 

+ (NSDictionary *)serialize:(DbxAuthAuthError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInvalidAccessToken]) {
        jsonDict[@".tag"] = @"invalid_access_token";
    }
    else if ([valueObj isInvalidSelectUser]) {
        jsonDict[@".tag"] = @"invalid_select_user";
    }
    else if ([valueObj isInvalidSelectAdmin]) {
        jsonDict[@".tag"] = @"invalid_select_admin";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxAuthAuthError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"invalid_access_token"]) {
        return [[DbxAuthAuthError alloc] initWithInvalidAccessToken];
    }
    if ([tag isEqualToString:@"invalid_select_user"]) {
        return [[DbxAuthAuthError alloc] initWithInvalidSelectUser];
    }
    if ([tag isEqualToString:@"invalid_select_admin"]) {
        return [[DbxAuthAuthError alloc] initWithInvalidSelectAdmin];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxAuthAuthError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
