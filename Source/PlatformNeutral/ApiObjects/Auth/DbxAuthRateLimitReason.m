///
/// Auto-generated by Stone, do not modify.
///

#import "DBXAUTHRateLimitReason.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXAUTHRateLimitReason 

- (instancetype)initWithTooManyRequests {
    self = [super init];
    if (self != nil) {
        _tag = DBXAUTHRateLimitReasonTooManyRequests;
    }
    return self;
}

- (instancetype)initWithTooManyWriteOperations {
    self = [super init];
    if (self != nil) {
        _tag = DBXAUTHRateLimitReasonTooManyWriteOperations;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXAUTHRateLimitReasonOther;
    }
    return self;
}

- (BOOL)isTooManyRequests {
    return _tag == DBXAUTHRateLimitReasonTooManyRequests;
}

- (BOOL)isTooManyWriteOperations {
    return _tag == DBXAUTHRateLimitReasonTooManyWriteOperations;
}

- (BOOL)isOther {
    return _tag == DBXAUTHRateLimitReasonOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXAUTHRateLimitReasonTooManyRequests:
           return @"DBXAUTHRateLimitReasonTooManyRequests";
        case DBXAUTHRateLimitReasonTooManyWriteOperations:
           return @"DBXAUTHRateLimitReasonTooManyWriteOperations";
        case DBXAUTHRateLimitReasonOther:
           return @"DBXAUTHRateLimitReasonOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXAUTHRateLimitReasonSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXAUTHRateLimitReasonSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXAUTHRateLimitReasonSerializer serialize:self] description];
}

@end


@implementation DBXAUTHRateLimitReasonSerializer 

+ (NSDictionary *)serialize:(DBXAUTHRateLimitReason *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTooManyRequests]) {
        jsonDict[@".tag"] = @"too_many_requests";
    }
    else if ([valueObj isTooManyWriteOperations]) {
        jsonDict[@".tag"] = @"too_many_write_operations";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXAUTHRateLimitReason *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"too_many_requests"]) {
        return [[DBXAUTHRateLimitReason alloc] initWithTooManyRequests];
    }
    else if ([tag isEqualToString:@"too_many_write_operations"]) {
        return [[DBXAUTHRateLimitReason alloc] initWithTooManyWriteOperations];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXAUTHRateLimitReason alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
