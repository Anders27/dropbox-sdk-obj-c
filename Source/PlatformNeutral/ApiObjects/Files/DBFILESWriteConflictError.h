///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>
#import "DBSerializableProtocol.h"

@class DBFILESWriteConflictError;

#pragma mark - API Object

/// 
/// The WriteConflictError union.
/// 
/// This class implements the DBSerializable protocol (serialize and deserialize
/// instance methods), which is required for all Obj-C SDK API route objects.
/// 
@interface DBFILESWriteConflictError : NSObject <DBSerializable> 

#pragma mark - Instance fields

/// The DBFILESWriteConflictErrorTag enum type represents the possible tag
/// states with which the DBFILESWriteConflictError union can exist.
typedef NS_ENUM(NSInteger, DBFILESWriteConflictErrorTag) {
    /// There's a file in the way.
    DBFILESWriteConflictErrorFile,

    /// There's a folder in the way.
    DBFILESWriteConflictErrorFolder,

    /// There's a file at an ancestor path, so we couldn't create the required
    /// parent folders.
    DBFILESWriteConflictErrorFileAncestor,

    /// (no description).
    DBFILESWriteConflictErrorOther,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBFILESWriteConflictErrorTag tag;

#pragma mark - Constructors

/// 
/// Initializes union class with tag state of File.
/// 
/// About the File tag state: There's a file in the way.
/// 
/// @return An initialized DBFILESWriteConflictError instance.
/// 
- (nonnull instancetype)initWithFile;

/// 
/// Initializes union class with tag state of Folder.
/// 
/// About the Folder tag state: There's a folder in the way.
/// 
/// @return An initialized DBFILESWriteConflictError instance.
/// 
- (nonnull instancetype)initWithFolder;

/// 
/// Initializes union class with tag state of FileAncestor.
/// 
/// About the FileAncestor tag state: There's a file at an ancestor path, so we
/// couldn't create the required parent folders.
/// 
/// @return An initialized DBFILESWriteConflictError instance.
/// 
- (nonnull instancetype)initWithFileAncestor;

/// 
/// Initializes union class with tag state of Other.
/// 
/// @return An initialized DBFILESWriteConflictError instance.
/// 
- (nonnull instancetype)initWithOther;

#pragma mark - Tag state methods

/// 
/// Retrieves whether the union's current tag state has value File.
/// 
/// @return Whether the union's current tag state has value File.
/// 
- (BOOL)isFile;

/// 
/// Retrieves whether the union's current tag state has value Folder.
/// 
/// @return Whether the union's current tag state has value Folder.
/// 
- (BOOL)isFolder;

/// 
/// Retrieves whether the union's current tag state has value FileAncestor.
/// 
/// @return Whether the union's current tag state has value FileAncestor.
/// 
- (BOOL)isFileAncestor;

/// 
/// Retrieves whether the union's current tag state has value Other.
/// 
/// @return Whether the union's current tag state has value Other.
/// 
- (BOOL)isOther;

/// 
/// Retrieves string value of union's current tag state.
/// 
/// @return A human-readable string representing the union's current tag state.
/// 
- (NSString * _Nonnull)tagName;

@end


#pragma mark - Serializer Object

/// 
/// The serialization class for the DBFILESWriteConflictError union.
/// 
@interface DBFILESWriteConflictErrorSerializer : NSObject 

/// 
/// Serializes DBFILESWriteConflictError instances.
/// 
/// @param instance An instance of the DBFILESWriteConflictError API object.
/// 
/// @return A json-compatible dictionary representation of the
/// DBFILESWriteConflictError API object.
/// 
+ (NSDictionary * _Nonnull)serialize:(DBFILESWriteConflictError * _Nonnull)instance;

/// 
/// Deserializes DBFILESWriteConflictError instances.
/// 
/// @param dict A json-compatible dictionary representation of the
/// DBFILESWriteConflictError API object.
/// 
/// @return An instantiation of the DBFILESWriteConflictError object.
/// 
+ (DBFILESWriteConflictError * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
