///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESAddPropertiesError.h"
#import "DBXFILESInvalidPropertyGroupError.h"
#import "DBXFILESLookupError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESAddPropertiesError 

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESAddPropertiesErrorTemplateNotFound;
        _templateNotFound = templateNotFound;
    }
    return self;
}

- (instancetype)initWithRestrictedContent {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESAddPropertiesErrorRestrictedContent;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESAddPropertiesErrorOther;
    }
    return self;
}

- (instancetype)initWithPath:(DBXFILESLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESAddPropertiesErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithPropertyFieldTooLarge {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESAddPropertiesErrorPropertyFieldTooLarge;
    }
    return self;
}

- (instancetype)initWithDoesNotFitTemplate {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESAddPropertiesErrorDoesNotFitTemplate;
    }
    return self;
}

- (instancetype)initWithPropertyGroupAlreadyExists {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESAddPropertiesErrorPropertyGroupAlreadyExists;
    }
    return self;
}

- (BOOL)isTemplateNotFound {
    return _tag == DBXFILESAddPropertiesErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
    return _tag == DBXFILESAddPropertiesErrorRestrictedContent;
}

- (BOOL)isOther {
    return _tag == DBXFILESAddPropertiesErrorOther;
}

- (BOOL)isPath {
    return _tag == DBXFILESAddPropertiesErrorPath;
}

- (BOOL)isPropertyFieldTooLarge {
    return _tag == DBXFILESAddPropertiesErrorPropertyFieldTooLarge;
}

- (BOOL)isDoesNotFitTemplate {
    return _tag == DBXFILESAddPropertiesErrorDoesNotFitTemplate;
}

- (BOOL)isPropertyGroupAlreadyExists {
    return _tag == DBXFILESAddPropertiesErrorPropertyGroupAlreadyExists;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESAddPropertiesErrorTemplateNotFound:
           return @"DBXFILESAddPropertiesErrorTemplateNotFound";
        case DBXFILESAddPropertiesErrorRestrictedContent:
           return @"DBXFILESAddPropertiesErrorRestrictedContent";
        case DBXFILESAddPropertiesErrorOther:
           return @"DBXFILESAddPropertiesErrorOther";
        case DBXFILESAddPropertiesErrorPath:
           return @"DBXFILESAddPropertiesErrorPath";
        case DBXFILESAddPropertiesErrorPropertyFieldTooLarge:
           return @"DBXFILESAddPropertiesErrorPropertyFieldTooLarge";
        case DBXFILESAddPropertiesErrorDoesNotFitTemplate:
           return @"DBXFILESAddPropertiesErrorDoesNotFitTemplate";
        case DBXFILESAddPropertiesErrorPropertyGroupAlreadyExists:
           return @"DBXFILESAddPropertiesErrorPropertyGroupAlreadyExists";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSString *)templateNotFound {
    if (_tag != DBXFILESAddPropertiesErrorTemplateNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESAddPropertiesErrorTemplateNotFound`, but was %@.", [self getTagName]];
    }
    return _templateNotFound;
}

- (DBXFILESLookupError *)path {
    if (_tag != DBXFILESAddPropertiesErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESAddPropertiesErrorPath`, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXFILESAddPropertiesErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESAddPropertiesErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESAddPropertiesErrorSerializer serialize:self] description];
}

@end


@implementation DBXFILESAddPropertiesErrorSerializer 

+ (NSDictionary *)serialize:(DBXFILESAddPropertiesError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTemplateNotFound]) {
        jsonDict[@"template_not_found"] = valueObj.templateNotFound;
        jsonDict[@".tag"] = @"template_not_found";
    }
    else if ([valueObj isRestrictedContent]) {
        jsonDict[@".tag"] = @"restricted_content";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isPath]) {
        jsonDict = [[DBXFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isPropertyFieldTooLarge]) {
        jsonDict[@".tag"] = @"property_field_too_large";
    }
    else if ([valueObj isDoesNotFitTemplate]) {
        jsonDict[@".tag"] = @"does_not_fit_template";
    }
    else if ([valueObj isPropertyGroupAlreadyExists]) {
        jsonDict[@".tag"] = @"property_group_already_exists";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESAddPropertiesError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"template_not_found"]) {
        NSString *templateNotFound = valueDict[@"template_not_found"];
        return [[DBXFILESAddPropertiesError alloc] initWithTemplateNotFound:templateNotFound];
    }
    else if ([tag isEqualToString:@"restricted_content"]) {
        return [[DBXFILESAddPropertiesError alloc] initWithRestrictedContent];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXFILESAddPropertiesError alloc] initWithOther];
    }
    else if ([tag isEqualToString:@"path"]) {
        DBXFILESLookupError *path = [DBXFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DBXFILESAddPropertiesError alloc] initWithPath:path];
    }
    else if ([tag isEqualToString:@"property_field_too_large"]) {
        return [[DBXFILESAddPropertiesError alloc] initWithPropertyFieldTooLarge];
    }
    else if ([tag isEqualToString:@"does_not_fit_template"]) {
        return [[DBXFILESAddPropertiesError alloc] initWithDoesNotFitTemplate];
    }
    else if ([tag isEqualToString:@"property_group_already_exists"]) {
        return [[DBXFILESAddPropertiesError alloc] initWithPropertyGroupAlreadyExists];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
