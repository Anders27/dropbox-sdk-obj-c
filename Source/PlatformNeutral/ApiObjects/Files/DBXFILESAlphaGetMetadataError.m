///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESAlphaGetMetadataError.h"
#import "DBXFILESGetMetadataError.h"
#import "DBXFILESLookUpPropertiesError.h"
#import "DBXFILESLookupError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESAlphaGetMetadataError 

- (instancetype)initWithPath:(DBXFILESLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESAlphaGetMetadataErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithPropertiesError:(DBXFILESLookUpPropertiesError *)propertiesError {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESAlphaGetMetadataErrorPropertiesError;
        _propertiesError = propertiesError;
    }
    return self;
}

- (BOOL)isPath {
    return _tag == DBXFILESAlphaGetMetadataErrorPath;
}

- (BOOL)isPropertiesError {
    return _tag == DBXFILESAlphaGetMetadataErrorPropertiesError;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESAlphaGetMetadataErrorPath:
           return @"DBXFILESAlphaGetMetadataErrorPath";
        case DBXFILESAlphaGetMetadataErrorPropertiesError:
           return @"DBXFILESAlphaGetMetadataErrorPropertiesError";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXFILESLookupError *)path {
    if (_tag != DBXFILESAlphaGetMetadataErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESAlphaGetMetadataErrorPath`, but was %@.", [self getTagName]];
    }
    return _path;
}

- (DBXFILESLookUpPropertiesError *)propertiesError {
    if (_tag != DBXFILESAlphaGetMetadataErrorPropertiesError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESAlphaGetMetadataErrorPropertiesError`, but was %@.", [self getTagName]];
    }
    return _propertiesError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXFILESAlphaGetMetadataErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESAlphaGetMetadataErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESAlphaGetMetadataErrorSerializer serialize:self] description];
}

@end


@implementation DBXFILESAlphaGetMetadataErrorSerializer 

+ (NSDictionary *)serialize:(DBXFILESAlphaGetMetadataError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPath]) {
        jsonDict = [[DBXFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isPropertiesError]) {
        jsonDict = [[DBXFILESLookUpPropertiesErrorSerializer serialize:valueObj.propertiesError] mutableCopy];
        jsonDict[@".tag"] = @"properties_error";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESAlphaGetMetadataError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"path"]) {
        DBXFILESLookupError *path = [DBXFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DBXFILESAlphaGetMetadataError alloc] initWithPath:path];
    }
    else if ([tag isEqualToString:@"properties_error"]) {
        DBXFILESLookUpPropertiesError *propertiesError = [DBXFILESLookUpPropertiesErrorSerializer deserialize:valueDict[@"properties_error"]];
        return [[DBXFILESAlphaGetMetadataError alloc] initWithPropertiesError:propertiesError];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
