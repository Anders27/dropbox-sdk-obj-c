///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESLookUpPropertiesError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESLookUpPropertiesError 

- (instancetype)initWithPropertyGroupNotFound {
    self = [super init];
    if (self) {
        _tag = DBXFILESLookUpPropertiesErrorPropertyGroupNotFound;
    }
    return self;
}

- (BOOL)isPropertyGroupNotFound {
    return _tag == DBXFILESLookUpPropertiesErrorPropertyGroupNotFound;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESLookUpPropertiesErrorPropertyGroupNotFound:
           return @"DBXFILESLookUpPropertiesErrorPropertyGroupNotFound";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXFILESLookUpPropertiesErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESLookUpPropertiesErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESLookUpPropertiesErrorSerializer serialize:self] description];
}

@end


@implementation DBXFILESLookUpPropertiesErrorSerializer 

+ (NSDictionary *)serialize:(DBXFILESLookUpPropertiesError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPropertyGroupNotFound]) {
        jsonDict[@".tag"] = @"property_group_not_found";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESLookUpPropertiesError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"property_group_not_found"]) {
        return [[DBXFILESLookUpPropertiesError alloc] initWithPropertyGroupNotFound];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
