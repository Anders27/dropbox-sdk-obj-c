///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>
#import "DBXSerializableProtocol.h"

@class DBXFILESLookupError;

/// 
/// The LookupError union.
/// 
/// This class implements the `DBXSerializable` protocol (`serialize` and
/// `deserialize` instance methods), which is required for all Obj-C SDK API
/// route objects.
/// 
@interface DBXFILESLookupError : NSObject <DBXSerializable> 

/// The `DBXFILESLookupErrorTag` enum type represents the possible tag states
/// with which the `DBXFILESLookupError` union can exist.
typedef NS_ENUM(NSInteger, DBXFILESLookupErrorTag) {
    /// (no description).
    DBXFILESLookupErrorMalformedPath,

    /// There is nothing at the given path.
    DBXFILESLookupErrorNotFound,

    /// We were expecting a file, but the given path refers to something that
    /// isn't a file.
    DBXFILESLookupErrorNotFile,

    /// We were expecting a folder, but the given path refers to something that
    /// isn't a folder.
    DBXFILESLookupErrorNotFolder,

    /// The file cannot be transferred because the content is restricted.  For
    /// example, sometimes there are legal restrictions due to copyright claims.
    DBXFILESLookupErrorRestrictedContent,

    /// (no description).
    DBXFILESLookupErrorOther,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBXFILESLookupErrorTag tag;

/// (no description).
@property (nonatomic, readonly, copy) NSString * _Nullable malformedPath;

/// 
/// Initializes union class with tag state of `MalformedPath`.
/// 
/// - parameter malformedPath: (no description).
/// 
/// - returns: An initialized `DBXFILESLookupError` instance.
/// 
- (nonnull instancetype)initWithMalformedPath:(NSString * _Nullable)malformedPath;

/// 
/// Initializes union class with tag state of `NotFound`.
/// 
/// About the `NotFound` tag state: There is nothing at the given path.
/// 
/// - returns: An initialized `DBXFILESLookupError` instance.
/// 
- (nonnull instancetype)initWithNotFound;

/// 
/// Initializes union class with tag state of `NotFile`.
/// 
/// About the `NotFile` tag state: We were expecting a file, but the given path
/// refers to something that isn't a file.
/// 
/// - returns: An initialized `DBXFILESLookupError` instance.
/// 
- (nonnull instancetype)initWithNotFile;

/// 
/// Initializes union class with tag state of `NotFolder`.
/// 
/// About the `NotFolder` tag state: We were expecting a folder, but the given
/// path refers to something that isn't a folder.
/// 
/// - returns: An initialized `DBXFILESLookupError` instance.
/// 
- (nonnull instancetype)initWithNotFolder;

/// 
/// Initializes union class with tag state of `RestrictedContent`.
/// 
/// About the `RestrictedContent` tag state: The file cannot be transferred
/// because the content is restricted.  For example, sometimes there are legal
/// restrictions due to copyright claims.
/// 
/// - returns: An initialized `DBXFILESLookupError` instance.
/// 
- (nonnull instancetype)initWithRestrictedContent;

/// 
/// Initializes union class with tag state of `Other`.
/// 
/// - returns: An initialized `DBXFILESLookupError` instance.
/// 
- (nonnull instancetype)initWithOther;

/// 
/// Retrieves whether the union's current tag state has value `MalformedPath`.
/// 
/// - returns: Whether the union's current tag state has value `MalformedPath`.
/// 
- (BOOL)isMalformedPath;

/// 
/// Retrieves whether the union's current tag state has value `NotFound`.
/// 
/// - returns: Whether the union's current tag state has value `NotFound`.
/// 
- (BOOL)isNotFound;

/// 
/// Retrieves whether the union's current tag state has value `NotFile`.
/// 
/// - returns: Whether the union's current tag state has value `NotFile`.
/// 
- (BOOL)isNotFile;

/// 
/// Retrieves whether the union's current tag state has value `NotFolder`.
/// 
/// - returns: Whether the union's current tag state has value `NotFolder`.
/// 
- (BOOL)isNotFolder;

/// 
/// Retrieves whether the union's current tag state has value
/// `RestrictedContent`.
/// 
/// - returns: Whether the union's current tag state has value
/// `RestrictedContent`.
/// 
- (BOOL)isRestrictedContent;

/// 
/// Retrieves whether the union's current tag state has value `Other`.
/// 
/// - returns: Whether the union's current tag state has value `Other`.
/// 
- (BOOL)isOther;

/// 
/// Retrieves string value of union's current tag state.
/// 
/// - returns: A human-readable string representing the union's current tag
/// state.
/// 
- (NSString * _Nonnull)getTagName;

@end


/// 
/// The serialization class for the `DBXFILESLookupError` union.
/// 
@interface DBXFILESLookupErrorSerializer : NSObject 

/// 
/// Serializes `DBXFILESLookupError` instances.
/// 
///  - parameter instance: An instance of the `DBXFILESLookupError` API object.
/// 
///  - returns: A json-compatible dictionary representation of the
/// `DBXFILESLookupError` API object.
/// 
+ (NSDictionary * _Nonnull)serialize:(DBXFILESLookupError * _Nonnull)instance;

/// 
/// Deserializes `DBXFILESLookupError` instances.
/// 
///  - parameter dict: A json-compatible dictionary representation of the
/// `DBXFILESLookupError` API object.
/// 
///  - returns: An instantiation of the `DBXFILESLookupError` object.
/// 
+ (DBXFILESLookupError * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
