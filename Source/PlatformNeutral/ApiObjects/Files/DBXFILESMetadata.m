///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESDeletedMetadata.h"
#import "DBXFILESFileMetadata.h"
#import "DBXFILESFolderMetadata.h"
#import "DBXFILESMetadata.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESMetadata 

- (instancetype)initWithName:(NSString *)name pathLower:(NSString *)pathLower pathDisplay:(NSString *)pathDisplay parentSharedFolderId:(NSString *)parentSharedFolderId {
    [DBXStoneValidators nullableValidator:[DBXStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](parentSharedFolderId);

    self = [super init];
    if (self != nil) {
        _name = name;
        _pathLower = pathLower;
        _pathDisplay = pathDisplay;
        _parentSharedFolderId = parentSharedFolderId;
    }
    return self;
}

- (instancetype)initWithName:(NSString *)name {
    return [self initWithName:name pathLower:nil pathDisplay:nil parentSharedFolderId:nil];
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXFILESMetadataSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESMetadataSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESMetadataSerializer serialize:self] description];
}

@end


@implementation DBXFILESMetadataSerializer 

+ (NSDictionary *)serialize:(DBXFILESMetadata *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    jsonDict[@"name"] = valueObj.name;
    if (valueObj.pathLower) {
        jsonDict[@"path_lower"] = valueObj.pathLower;
    }
    if (valueObj.pathDisplay) {
        jsonDict[@"path_display"] = valueObj.pathDisplay;
    }
    if (valueObj.parentSharedFolderId) {
        jsonDict[@"parent_shared_folder_id"] = valueObj.parentSharedFolderId;
    }

    if ([valueObj isKindOfClass:[DBXFILESFileMetadata class]]) {
        NSDictionary *subTypeFields = [DBXFILESFileMetadataSerializer serialize:(DBXFILESFileMetadata *)valueObj];
        for (NSString* key in subTypeFields) {
            jsonDict[key] = subTypeFields[key];
        }
        jsonDict[@".tag"] = @"file";
    }
    else if ([valueObj isKindOfClass:[DBXFILESFolderMetadata class]]) {
        NSDictionary *subTypeFields = [DBXFILESFolderMetadataSerializer serialize:(DBXFILESFolderMetadata *)valueObj];
        for (NSString* key in subTypeFields) {
            jsonDict[key] = subTypeFields[key];
        }
        jsonDict[@".tag"] = @"folder";
    }
    else if ([valueObj isKindOfClass:[DBXFILESDeletedMetadata class]]) {
        NSDictionary *subTypeFields = [DBXFILESDeletedMetadataSerializer serialize:(DBXFILESDeletedMetadata *)valueObj];
        for (NSString* key in subTypeFields) {
            jsonDict[key] = subTypeFields[key];
        }
        jsonDict[@".tag"] = @"deleted";
    }

    return jsonDict;
}

+ (DBXFILESMetadata *)deserialize:(NSDictionary *)valueDict {
    if ([valueDict[@".tag"] isEqualToString:@"file"]) {
        return [DBXFILESFileMetadataSerializer deserialize:valueDict];
    }
    if ([valueDict[@".tag"] isEqualToString:@"folder"]) {
        return [DBXFILESFolderMetadataSerializer deserialize:valueDict];
    }
    if ([valueDict[@".tag"] isEqualToString:@"deleted"]) {
        return [DBXFILESDeletedMetadataSerializer deserialize:valueDict];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
