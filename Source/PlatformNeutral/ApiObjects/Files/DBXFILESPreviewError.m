///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESLookupError.h"
#import "DBXFILESPreviewError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESPreviewError 

@synthesize path = _path;

- (instancetype)initWithPath:(DBXFILESLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESPreviewErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithInProgress {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESPreviewErrorInProgress;
    }
    return self;
}

- (instancetype)initWithUnsupportedExtension {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESPreviewErrorUnsupportedExtension;
    }
    return self;
}

- (instancetype)initWithUnsupportedContent {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESPreviewErrorUnsupportedContent;
    }
    return self;
}

- (BOOL)isPath {
    return _tag == DBXFILESPreviewErrorPath;
}

- (BOOL)isInProgress {
    return _tag == DBXFILESPreviewErrorInProgress;
}

- (BOOL)isUnsupportedExtension {
    return _tag == DBXFILESPreviewErrorUnsupportedExtension;
}

- (BOOL)isUnsupportedContent {
    return _tag == DBXFILESPreviewErrorUnsupportedContent;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESPreviewErrorPath:
           return @"DBXFILESPreviewErrorPath";
        case DBXFILESPreviewErrorInProgress:
           return @"DBXFILESPreviewErrorInProgress";
        case DBXFILESPreviewErrorUnsupportedExtension:
           return @"DBXFILESPreviewErrorUnsupportedExtension";
        case DBXFILESPreviewErrorUnsupportedContent:
           return @"DBXFILESPreviewErrorUnsupportedContent";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXFILESLookupError *)path {
    if (_tag != DBXFILESPreviewErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESPreviewErrorPath`, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXFILESPreviewErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESPreviewErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESPreviewErrorSerializer serialize:self] description];
}

@end


@implementation DBXFILESPreviewErrorSerializer 

+ (NSDictionary *)serialize:(DBXFILESPreviewError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPath]) {
        jsonDict = [[DBXFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isInProgress]) {
        jsonDict[@".tag"] = @"in_progress";
    }
    else if ([valueObj isUnsupportedExtension]) {
        jsonDict[@".tag"] = @"unsupported_extension";
    }
    else if ([valueObj isUnsupportedContent]) {
        jsonDict[@".tag"] = @"unsupported_content";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESPreviewError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"path"]) {
        DBXFILESLookupError *path = [DBXFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DBXFILESPreviewError alloc] initWithPath:path];
    }
    else if ([tag isEqualToString:@"in_progress"]) {
        return [[DBXFILESPreviewError alloc] initWithInProgress];
    }
    else if ([tag isEqualToString:@"unsupported_extension"]) {
        return [[DBXFILESPreviewError alloc] initWithUnsupportedExtension];
    }
    else if ([tag isEqualToString:@"unsupported_content"]) {
        return [[DBXFILESPreviewError alloc] initWithUnsupportedContent];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
