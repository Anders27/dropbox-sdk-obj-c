///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESLookupError.h"
#import "DBXFILESPropertiesError.h"
#import "DBXPROPERTIESPropertyTemplateError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESPropertiesError 

@synthesize templateNotFound = _templateNotFound;
@synthesize path = _path;

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESPropertiesErrorTemplateNotFound;
        _templateNotFound = templateNotFound;
    }
    return self;
}

- (instancetype)initWithRestrictedContent {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESPropertiesErrorRestrictedContent;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESPropertiesErrorOther;
    }
    return self;
}

- (instancetype)initWithPath:(DBXFILESLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESPropertiesErrorPath;
        _path = path;
    }
    return self;
}

- (BOOL)isTemplateNotFound {
    return _tag == DBXFILESPropertiesErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
    return _tag == DBXFILESPropertiesErrorRestrictedContent;
}

- (BOOL)isOther {
    return _tag == DBXFILESPropertiesErrorOther;
}

- (BOOL)isPath {
    return _tag == DBXFILESPropertiesErrorPath;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESPropertiesErrorTemplateNotFound:
           return @"DBXFILESPropertiesErrorTemplateNotFound";
        case DBXFILESPropertiesErrorRestrictedContent:
           return @"DBXFILESPropertiesErrorRestrictedContent";
        case DBXFILESPropertiesErrorOther:
           return @"DBXFILESPropertiesErrorOther";
        case DBXFILESPropertiesErrorPath:
           return @"DBXFILESPropertiesErrorPath";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSString *)templateNotFound {
    if (_tag != DBXFILESPropertiesErrorTemplateNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESPropertiesErrorTemplateNotFound`, but was %@.", [self getTagName]];
    }
    return _templateNotFound;
}

- (DBXFILESLookupError *)path {
    if (_tag != DBXFILESPropertiesErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESPropertiesErrorPath`, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXFILESPropertiesErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESPropertiesErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESPropertiesErrorSerializer serialize:self] description];
}

@end


@implementation DBXFILESPropertiesErrorSerializer 

+ (NSDictionary *)serialize:(DBXFILESPropertiesError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTemplateNotFound]) {
        jsonDict[@"template_not_found"] = valueObj.templateNotFound;
        jsonDict[@".tag"] = @"template_not_found";
    }
    else if ([valueObj isRestrictedContent]) {
        jsonDict[@".tag"] = @"restricted_content";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isPath]) {
        jsonDict = [[DBXFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
        jsonDict[@".tag"] = @"path";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESPropertiesError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"template_not_found"]) {
        NSString *templateNotFound = valueDict[@"template_not_found"];
        return [[DBXFILESPropertiesError alloc] initWithTemplateNotFound:templateNotFound];
    }
    else if ([tag isEqualToString:@"restricted_content"]) {
        return [[DBXFILESPropertiesError alloc] initWithRestrictedContent];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXFILESPropertiesError alloc] initWithOther];
    }
    else if ([tag isEqualToString:@"path"]) {
        DBXFILESLookupError *path = [DBXFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DBXFILESPropertiesError alloc] initWithPath:path];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
