///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESLookUpPropertiesError.h"
#import "DBXFILESLookupError.h"
#import "DBXFILESPropertiesError.h"
#import "DBXFILESRemovePropertiesError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESRemovePropertiesError 

@synthesize templateNotFound = _templateNotFound;
@synthesize path = _path;
@synthesize propertyGroupLookup = _propertyGroupLookup;

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESRemovePropertiesErrorTemplateNotFound;
        _templateNotFound = templateNotFound;
    }
    return self;
}

- (instancetype)initWithRestrictedContent {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESRemovePropertiesErrorRestrictedContent;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESRemovePropertiesErrorOther;
    }
    return self;
}

- (instancetype)initWithPath:(DBXFILESLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESRemovePropertiesErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithPropertyGroupLookup:(DBXFILESLookUpPropertiesError *)propertyGroupLookup {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESRemovePropertiesErrorPropertyGroupLookup;
        _propertyGroupLookup = propertyGroupLookup;
    }
    return self;
}

- (BOOL)isTemplateNotFound {
    return _tag == DBXFILESRemovePropertiesErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
    return _tag == DBXFILESRemovePropertiesErrorRestrictedContent;
}

- (BOOL)isOther {
    return _tag == DBXFILESRemovePropertiesErrorOther;
}

- (BOOL)isPath {
    return _tag == DBXFILESRemovePropertiesErrorPath;
}

- (BOOL)isPropertyGroupLookup {
    return _tag == DBXFILESRemovePropertiesErrorPropertyGroupLookup;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESRemovePropertiesErrorTemplateNotFound:
           return @"DBXFILESRemovePropertiesErrorTemplateNotFound";
        case DBXFILESRemovePropertiesErrorRestrictedContent:
           return @"DBXFILESRemovePropertiesErrorRestrictedContent";
        case DBXFILESRemovePropertiesErrorOther:
           return @"DBXFILESRemovePropertiesErrorOther";
        case DBXFILESRemovePropertiesErrorPath:
           return @"DBXFILESRemovePropertiesErrorPath";
        case DBXFILESRemovePropertiesErrorPropertyGroupLookup:
           return @"DBXFILESRemovePropertiesErrorPropertyGroupLookup";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSString *)templateNotFound {
    if (_tag != DBXFILESRemovePropertiesErrorTemplateNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESRemovePropertiesErrorTemplateNotFound`, but was %@.", [self getTagName]];
    }
    return _templateNotFound;
}

- (DBXFILESLookupError *)path {
    if (_tag != DBXFILESRemovePropertiesErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESRemovePropertiesErrorPath`, but was %@.", [self getTagName]];
    }
    return _path;
}

- (DBXFILESLookUpPropertiesError *)propertyGroupLookup {
    if (_tag != DBXFILESRemovePropertiesErrorPropertyGroupLookup) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESRemovePropertiesErrorPropertyGroupLookup`, but was %@.", [self getTagName]];
    }
    return _propertyGroupLookup;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXFILESRemovePropertiesErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESRemovePropertiesErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESRemovePropertiesErrorSerializer serialize:self] description];
}

@end


@implementation DBXFILESRemovePropertiesErrorSerializer 

+ (NSDictionary *)serialize:(DBXFILESRemovePropertiesError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTemplateNotFound]) {
        jsonDict[@"template_not_found"] = valueObj.templateNotFound;
        jsonDict[@".tag"] = @"template_not_found";
    }
    else if ([valueObj isRestrictedContent]) {
        jsonDict[@".tag"] = @"restricted_content";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isPath]) {
        jsonDict = [[DBXFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isPropertyGroupLookup]) {
        jsonDict = [[DBXFILESLookUpPropertiesErrorSerializer serialize:valueObj.propertyGroupLookup] mutableCopy];
        jsonDict[@".tag"] = @"property_group_lookup";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESRemovePropertiesError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"template_not_found"]) {
        NSString *templateNotFound = valueDict[@"template_not_found"];
        return [[DBXFILESRemovePropertiesError alloc] initWithTemplateNotFound:templateNotFound];
    }
    else if ([tag isEqualToString:@"restricted_content"]) {
        return [[DBXFILESRemovePropertiesError alloc] initWithRestrictedContent];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXFILESRemovePropertiesError alloc] initWithOther];
    }
    else if ([tag isEqualToString:@"path"]) {
        DBXFILESLookupError *path = [DBXFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DBXFILESRemovePropertiesError alloc] initWithPath:path];
    }
    else if ([tag isEqualToString:@"property_group_lookup"]) {
        DBXFILESLookUpPropertiesError *propertyGroupLookup = [DBXFILESLookUpPropertiesErrorSerializer deserialize:valueDict[@"property_group_lookup"]];
        return [[DBXFILESRemovePropertiesError alloc] initWithPropertyGroupLookup:propertyGroupLookup];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
