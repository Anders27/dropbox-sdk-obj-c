///
/// Auto-generated by Stone, do not modify.
///

#import "DBXASYNCLaunchResultBase.h"
#import "DBXFILESFileMetadata.h"
#import "DBXFILESSaveUrlResult.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESSaveUrlResult 

@synthesize asyncJobId = _asyncJobId;
@synthesize complete = _complete;

- (instancetype)initWithAsyncJobId:(NSString *)asyncJobId {
    self = [super init];
    if (self) {
        _tag = DBXFILESSaveUrlResultAsyncJobId;
        _asyncJobId = asyncJobId;
    }
    return self;
}

- (instancetype)initWithComplete:(DBXFILESFileMetadata *)complete {
    self = [super init];
    if (self) {
        _tag = DBXFILESSaveUrlResultComplete;
        _complete = complete;
    }
    return self;
}

- (BOOL)isAsyncJobId {
    return _tag == DBXFILESSaveUrlResultAsyncJobId;
}

- (BOOL)isComplete {
    return _tag == DBXFILESSaveUrlResultComplete;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESSaveUrlResultAsyncJobId:
           return @"DBXFILESSaveUrlResultAsyncJobId";
        case DBXFILESSaveUrlResultComplete:
           return @"DBXFILESSaveUrlResultComplete";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSString *)asyncJobId {
    if (![self isAsyncJobId]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESSaveUrlResultAsyncJobId`, but was %@.", [self getTagName]];
    }
    return _asyncJobId;
}

- (DBXFILESFileMetadata *)complete {
    if (![self isComplete]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESSaveUrlResultComplete`, but was %@.", [self getTagName]];
    }
    return _complete;
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXFILESSaveUrlResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESSaveUrlResultSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESSaveUrlResultSerializer serialize:self] description];
}

@end


@implementation DBXFILESSaveUrlResultSerializer 

+ (NSDictionary *)serialize:(DBXFILESSaveUrlResult *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAsyncJobId]) {
        jsonDict[@"async_job_id"] = valueObj.asyncJobId;
        jsonDict[@".tag"] = @"async_job_id";
    }
    else if ([valueObj isComplete]) {
        jsonDict = [[DBXFILESFileMetadataSerializer serialize:valueObj.complete] mutableCopy];
        jsonDict[@".tag"] = @"complete";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESSaveUrlResult *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"async_job_id"]) {
        NSString *asyncJobId = valueDict[@"async_job_id"];
        return [[DBXFILESSaveUrlResult alloc] initWithAsyncJobId:asyncJobId];
    }
    else if ([tag isEqualToString:@"complete"]) {
        DBXFILESFileMetadata *complete = [DBXFILESFileMetadataSerializer deserialize:valueDict];
        return [[DBXFILESSaveUrlResult alloc] initWithComplete:complete];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
