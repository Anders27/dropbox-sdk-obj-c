///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESSearchMatchType.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESSearchMatchType 

- (instancetype)initWithFilename {
    self = [super init];
    if (self) {
        _tag = DBXFILESSearchMatchTypeFilename;
    }
    return self;
}

- (instancetype)initWithContent {
    self = [super init];
    if (self) {
        _tag = DBXFILESSearchMatchTypeContent;
    }
    return self;
}

- (instancetype)initWithBoth {
    self = [super init];
    if (self) {
        _tag = DBXFILESSearchMatchTypeBoth;
    }
    return self;
}

- (BOOL)isFilename {
    return _tag == DBXFILESSearchMatchTypeFilename;
}

- (BOOL)isContent {
    return _tag == DBXFILESSearchMatchTypeContent;
}

- (BOOL)isBoth {
    return _tag == DBXFILESSearchMatchTypeBoth;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESSearchMatchTypeFilename:
           return @"DBXFILESSearchMatchTypeFilename";
        case DBXFILESSearchMatchTypeContent:
           return @"DBXFILESSearchMatchTypeContent";
        case DBXFILESSearchMatchTypeBoth:
           return @"DBXFILESSearchMatchTypeBoth";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXFILESSearchMatchTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESSearchMatchTypeSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESSearchMatchTypeSerializer serialize:self] description];
}

@end


@implementation DBXFILESSearchMatchTypeSerializer 

+ (NSDictionary *)serialize:(DBXFILESSearchMatchType *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isFilename]) {
        jsonDict[@".tag"] = @"filename";
    }
    else if ([valueObj isContent]) {
        jsonDict[@".tag"] = @"content";
    }
    else if ([valueObj isBoth]) {
        jsonDict[@".tag"] = @"both";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESSearchMatchType *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"filename"]) {
        return [[DBXFILESSearchMatchType alloc] initWithFilename];
    }
    else if ([tag isEqualToString:@"content"]) {
        return [[DBXFILESSearchMatchType alloc] initWithContent];
    }
    else if ([tag isEqualToString:@"both"]) {
        return [[DBXFILESSearchMatchType alloc] initWithBoth];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
