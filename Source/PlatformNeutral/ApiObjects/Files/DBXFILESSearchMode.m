///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESSearchMode.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESSearchMode 

- (instancetype)initWithFilename {
    self = [super init];
    if (self) {
        _tag = DBXFILESSearchModeFilename;
    }
    return self;
}

- (instancetype)initWithFilenameAndContent {
    self = [super init];
    if (self) {
        _tag = DBXFILESSearchModeFilenameAndContent;
    }
    return self;
}

- (instancetype)initWithDeletedFilename {
    self = [super init];
    if (self) {
        _tag = DBXFILESSearchModeDeletedFilename;
    }
    return self;
}

- (BOOL)isFilename {
    return _tag == DBXFILESSearchModeFilename;
}

- (BOOL)isFilenameAndContent {
    return _tag == DBXFILESSearchModeFilenameAndContent;
}

- (BOOL)isDeletedFilename {
    return _tag == DBXFILESSearchModeDeletedFilename;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESSearchModeFilename:
           return @"DBXFILESSearchModeFilename";
        case DBXFILESSearchModeFilenameAndContent:
           return @"DBXFILESSearchModeFilenameAndContent";
        case DBXFILESSearchModeDeletedFilename:
           return @"DBXFILESSearchModeDeletedFilename";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXFILESSearchModeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESSearchModeSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESSearchModeSerializer serialize:self] description];
}

@end


@implementation DBXFILESSearchModeSerializer 

+ (NSDictionary *)serialize:(DBXFILESSearchMode *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isFilename]) {
        jsonDict[@".tag"] = @"filename";
    }
    else if ([valueObj isFilenameAndContent]) {
        jsonDict[@".tag"] = @"filename_and_content";
    }
    else if ([valueObj isDeletedFilename]) {
        jsonDict[@".tag"] = @"deleted_filename";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESSearchMode *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"filename"]) {
        return [[DBXFILESSearchMode alloc] initWithFilename];
    }
    else if ([tag isEqualToString:@"filename_and_content"]) {
        return [[DBXFILESSearchMode alloc] initWithFilenameAndContent];
    }
    else if ([tag isEqualToString:@"deleted_filename"]) {
        return [[DBXFILESSearchMode alloc] initWithDeletedFilename];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
