///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESLookupError.h"
#import "DBXFILESThumbnailError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESThumbnailError 

@synthesize path = _path;

- (instancetype)initWithPath:(DBXFILESLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESThumbnailErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithUnsupportedExtension {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESThumbnailErrorUnsupportedExtension;
    }
    return self;
}

- (instancetype)initWithUnsupportedImage {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESThumbnailErrorUnsupportedImage;
    }
    return self;
}

- (instancetype)initWithConversionError {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESThumbnailErrorConversionError;
    }
    return self;
}

- (BOOL)isPath {
    return _tag == DBXFILESThumbnailErrorPath;
}

- (BOOL)isUnsupportedExtension {
    return _tag == DBXFILESThumbnailErrorUnsupportedExtension;
}

- (BOOL)isUnsupportedImage {
    return _tag == DBXFILESThumbnailErrorUnsupportedImage;
}

- (BOOL)isConversionError {
    return _tag == DBXFILESThumbnailErrorConversionError;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESThumbnailErrorPath:
           return @"DBXFILESThumbnailErrorPath";
        case DBXFILESThumbnailErrorUnsupportedExtension:
           return @"DBXFILESThumbnailErrorUnsupportedExtension";
        case DBXFILESThumbnailErrorUnsupportedImage:
           return @"DBXFILESThumbnailErrorUnsupportedImage";
        case DBXFILESThumbnailErrorConversionError:
           return @"DBXFILESThumbnailErrorConversionError";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXFILESLookupError *)path {
    if (_tag != DBXFILESThumbnailErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESThumbnailErrorPath`, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXFILESThumbnailErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESThumbnailErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESThumbnailErrorSerializer serialize:self] description];
}

@end


@implementation DBXFILESThumbnailErrorSerializer 

+ (NSDictionary *)serialize:(DBXFILESThumbnailError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPath]) {
        jsonDict = [[DBXFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isUnsupportedExtension]) {
        jsonDict[@".tag"] = @"unsupported_extension";
    }
    else if ([valueObj isUnsupportedImage]) {
        jsonDict[@".tag"] = @"unsupported_image";
    }
    else if ([valueObj isConversionError]) {
        jsonDict[@".tag"] = @"conversion_error";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESThumbnailError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"path"]) {
        DBXFILESLookupError *path = [DBXFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DBXFILESThumbnailError alloc] initWithPath:path];
    }
    else if ([tag isEqualToString:@"unsupported_extension"]) {
        return [[DBXFILESThumbnailError alloc] initWithUnsupportedExtension];
    }
    else if ([tag isEqualToString:@"unsupported_image"]) {
        return [[DBXFILESThumbnailError alloc] initWithUnsupportedImage];
    }
    else if ([tag isEqualToString:@"conversion_error"]) {
        return [[DBXFILESThumbnailError alloc] initWithConversionError];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
