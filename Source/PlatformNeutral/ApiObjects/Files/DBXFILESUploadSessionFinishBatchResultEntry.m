///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESFileMetadata.h"
#import "DBXFILESUploadSessionFinishBatchResultEntry.h"
#import "DBXFILESUploadSessionFinishError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESUploadSessionFinishBatchResultEntry 

@synthesize success = _success;
@synthesize failure = _failure;

- (instancetype)initWithSuccess:(DBXFILESFileMetadata *)success {
    self = [super init];
    if (self) {
        _tag = DBXFILESUploadSessionFinishBatchResultEntrySuccess;
        _success = success;
    }
    return self;
}

- (instancetype)initWithFailure:(DBXFILESUploadSessionFinishError *)failure {
    self = [super init];
    if (self) {
        _tag = DBXFILESUploadSessionFinishBatchResultEntryFailure;
        _failure = failure;
    }
    return self;
}

- (BOOL)isSuccess {
    return _tag == DBXFILESUploadSessionFinishBatchResultEntrySuccess;
}

- (BOOL)isFailure {
    return _tag == DBXFILESUploadSessionFinishBatchResultEntryFailure;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESUploadSessionFinishBatchResultEntrySuccess:
           return @"DBXFILESUploadSessionFinishBatchResultEntrySuccess";
        case DBXFILESUploadSessionFinishBatchResultEntryFailure:
           return @"DBXFILESUploadSessionFinishBatchResultEntryFailure";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXFILESFileMetadata *)success {
    if (![self isSuccess]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESUploadSessionFinishBatchResultEntrySuccess`, but was %@.", [self getTagName]];
    }
    return _success;
}

- (DBXFILESUploadSessionFinishError *)failure {
    if (![self isFailure]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESUploadSessionFinishBatchResultEntryFailure`, but was %@.", [self getTagName]];
    }
    return _failure;
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXFILESUploadSessionFinishBatchResultEntrySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESUploadSessionFinishBatchResultEntrySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESUploadSessionFinishBatchResultEntrySerializer serialize:self] description];
}

@end


@implementation DBXFILESUploadSessionFinishBatchResultEntrySerializer 

+ (NSDictionary *)serialize:(DBXFILESUploadSessionFinishBatchResultEntry *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isSuccess]) {
        jsonDict = [[DBXFILESFileMetadataSerializer serialize:valueObj.success] mutableCopy];
        jsonDict[@".tag"] = @"success";
    }
    else if ([valueObj isFailure]) {
        jsonDict = [[DBXFILESUploadSessionFinishErrorSerializer serialize:valueObj.failure] mutableCopy];
        jsonDict[@".tag"] = @"failure";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESUploadSessionFinishBatchResultEntry *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"success"]) {
        DBXFILESFileMetadata *success = [DBXFILESFileMetadataSerializer deserialize:valueDict];
        return [[DBXFILESUploadSessionFinishBatchResultEntry alloc] initWithSuccess:success];
    }
    else if ([tag isEqualToString:@"failure"]) {
        DBXFILESUploadSessionFinishError *failure = [DBXFILESUploadSessionFinishErrorSerializer deserialize:valueDict[@"failure"]];
        return [[DBXFILESUploadSessionFinishBatchResultEntry alloc] initWithFailure:failure];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
