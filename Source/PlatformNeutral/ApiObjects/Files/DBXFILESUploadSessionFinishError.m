///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESUploadSessionFinishError.h"
#import "DBXFILESUploadSessionLookupError.h"
#import "DBXFILESWriteError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESUploadSessionFinishError 

@synthesize lookupFailed = _lookupFailed;
@synthesize path = _path;

- (instancetype)initWithLookupFailed:(DBXFILESUploadSessionLookupError *)lookupFailed {
    self = [super init];
    if (self) {
        _tag = DBXFILESUploadSessionFinishErrorLookupFailed;
        _lookupFailed = lookupFailed;
    }
    return self;
}

- (instancetype)initWithPath:(DBXFILESWriteError *)path {
    self = [super init];
    if (self) {
        _tag = DBXFILESUploadSessionFinishErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithTooManySharedFolderTargets {
    self = [super init];
    if (self) {
        _tag = DBXFILESUploadSessionFinishErrorTooManySharedFolderTargets;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXFILESUploadSessionFinishErrorOther;
    }
    return self;
}

- (BOOL)isLookupFailed {
    return _tag == DBXFILESUploadSessionFinishErrorLookupFailed;
}

- (BOOL)isPath {
    return _tag == DBXFILESUploadSessionFinishErrorPath;
}

- (BOOL)isTooManySharedFolderTargets {
    return _tag == DBXFILESUploadSessionFinishErrorTooManySharedFolderTargets;
}

- (BOOL)isOther {
    return _tag == DBXFILESUploadSessionFinishErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESUploadSessionFinishErrorLookupFailed:
           return @"DBXFILESUploadSessionFinishErrorLookupFailed";
        case DBXFILESUploadSessionFinishErrorPath:
           return @"DBXFILESUploadSessionFinishErrorPath";
        case DBXFILESUploadSessionFinishErrorTooManySharedFolderTargets:
           return @"DBXFILESUploadSessionFinishErrorTooManySharedFolderTargets";
        case DBXFILESUploadSessionFinishErrorOther:
           return @"DBXFILESUploadSessionFinishErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXFILESUploadSessionLookupError *)lookupFailed {
    if (![self isLookupFailed]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESUploadSessionFinishErrorLookupFailed`, but was %@.", [self getTagName]];
    }
    return _lookupFailed;
}

- (DBXFILESWriteError *)path {
    if (![self isPath]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESUploadSessionFinishErrorPath`, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXFILESUploadSessionFinishErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESUploadSessionFinishErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESUploadSessionFinishErrorSerializer serialize:self] description];
}

@end


@implementation DBXFILESUploadSessionFinishErrorSerializer 

+ (NSDictionary *)serialize:(DBXFILESUploadSessionFinishError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isLookupFailed]) {
        jsonDict = [[DBXFILESUploadSessionLookupErrorSerializer serialize:valueObj.lookupFailed] mutableCopy];
        jsonDict[@".tag"] = @"lookup_failed";
    }
    else if ([valueObj isPath]) {
        jsonDict = [[DBXFILESWriteErrorSerializer serialize:valueObj.path] mutableCopy];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isTooManySharedFolderTargets]) {
        jsonDict[@".tag"] = @"too_many_shared_folder_targets";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESUploadSessionFinishError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"lookup_failed"]) {
        DBXFILESUploadSessionLookupError *lookupFailed = [DBXFILESUploadSessionLookupErrorSerializer deserialize:valueDict[@"lookup_failed"]];
        return [[DBXFILESUploadSessionFinishError alloc] initWithLookupFailed:lookupFailed];
    }
    else if ([tag isEqualToString:@"path"]) {
        DBXFILESWriteError *path = [DBXFILESWriteErrorSerializer deserialize:valueDict[@"path"]];
        return [[DBXFILESUploadSessionFinishError alloc] initWithPath:path];
    }
    else if ([tag isEqualToString:@"too_many_shared_folder_targets"]) {
        return [[DBXFILESUploadSessionFinishError alloc] initWithTooManySharedFolderTargets];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXFILESUploadSessionFinishError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
