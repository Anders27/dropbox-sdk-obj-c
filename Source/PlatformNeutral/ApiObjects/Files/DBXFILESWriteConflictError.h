///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>
#import "DBXSerializableProtocol.h"

@class DBXFILESWriteConflictError;

/// 
/// The WriteConflictError union.
/// 
/// This class implements the `DBXSerializable` protocol (`serialize` and
/// `deserialize` instance methods), which is required for all Obj-C SDK API
/// route objects.
/// 
@interface DBXFILESWriteConflictError : NSObject <DBXSerializable> 

/// The `DBXFILESWriteConflictErrorTag` enum type represents the possible tag
/// states with which the `DBXFILESWriteConflictError` union can exist.
typedef NS_ENUM(NSInteger, DBXFILESWriteConflictErrorTag) {
    /// There's a file in the way.
    DBXFILESWriteConflictErrorFile,

    /// There's a folder in the way.
    DBXFILESWriteConflictErrorFolder,

    /// There's a file at an ancestor path, so we couldn't create the required
    /// parent folders.
    DBXFILESWriteConflictErrorFileAncestor,

    /// (no description).
    DBXFILESWriteConflictErrorOther,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBXFILESWriteConflictErrorTag tag;

/// 
/// Initializes union class with tag state of `File`.
/// 
/// About the `File` tag state: There's a file in the way.
/// 
/// - returns: An initialized `DBXFILESWriteConflictError` instance.
/// 
- (nonnull instancetype)initWithFile;

/// 
/// Initializes union class with tag state of `Folder`.
/// 
/// About the `Folder` tag state: There's a folder in the way.
/// 
/// - returns: An initialized `DBXFILESWriteConflictError` instance.
/// 
- (nonnull instancetype)initWithFolder;

/// 
/// Initializes union class with tag state of `FileAncestor`.
/// 
/// About the `FileAncestor` tag state: There's a file at an ancestor path, so
/// we couldn't create the required parent folders.
/// 
/// - returns: An initialized `DBXFILESWriteConflictError` instance.
/// 
- (nonnull instancetype)initWithFileAncestor;

/// 
/// Initializes union class with tag state of `Other`.
/// 
/// - returns: An initialized `DBXFILESWriteConflictError` instance.
/// 
- (nonnull instancetype)initWithOther;

/// 
/// Retrieves whether the union's current tag state has value `File`.
/// 
/// - returns: Whether the union's current tag state has value `File`.
/// 
- (BOOL)isFile;

/// 
/// Retrieves whether the union's current tag state has value `Folder`.
/// 
/// - returns: Whether the union's current tag state has value `Folder`.
/// 
- (BOOL)isFolder;

/// 
/// Retrieves whether the union's current tag state has value `FileAncestor`.
/// 
/// - returns: Whether the union's current tag state has value `FileAncestor`.
/// 
- (BOOL)isFileAncestor;

/// 
/// Retrieves whether the union's current tag state has value `Other`.
/// 
/// - returns: Whether the union's current tag state has value `Other`.
/// 
- (BOOL)isOther;

/// 
/// Retrieves string value of union's current tag state.
/// 
/// - returns: A human-readable string representing the union's current tag
/// state.
/// 
- (NSString * _Nonnull)getTagName;

@end


/// 
/// The serialization class for the `DBXFILESWriteConflictError` union.
/// 
@interface DBXFILESWriteConflictErrorSerializer : NSObject 

/// 
/// Serializes `DBXFILESWriteConflictError` instances.
/// 
///  - parameter instance: An instance of the `DBXFILESWriteConflictError` API
/// object.
/// 
///  - returns: A json-compatible dictionary representation of the
/// `DBXFILESWriteConflictError` API object.
/// 
+ (NSDictionary * _Nonnull)serialize:(DBXFILESWriteConflictError * _Nonnull)instance;

/// 
/// Deserializes `DBXFILESWriteConflictError` instances.
/// 
///  - parameter dict: A json-compatible dictionary representation of the
/// `DBXFILESWriteConflictError` API object.
/// 
///  - returns: An instantiation of the `DBXFILESWriteConflictError` object.
/// 
+ (DBXFILESWriteConflictError * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
