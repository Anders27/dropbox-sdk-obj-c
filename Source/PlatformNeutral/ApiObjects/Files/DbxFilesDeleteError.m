///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESDeleteError.h"
#import "DBXFILESLookupError.h"
#import "DBXFILESWriteError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESDeleteError 

- (instancetype)initWithPathLookup:(DBXFILESLookupError *)pathLookup {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESDeleteErrorPathLookup;
        _pathLookup = pathLookup;
    }
    return self;
}

- (instancetype)initWithPathWrite:(DBXFILESWriteError *)pathWrite {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESDeleteErrorPathWrite;
        _pathWrite = pathWrite;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESDeleteErrorOther;
    }
    return self;
}

- (BOOL)isPathLookup {
    return _tag == DBXFILESDeleteErrorPathLookup;
}

- (BOOL)isPathWrite {
    return _tag == DBXFILESDeleteErrorPathWrite;
}

- (BOOL)isOther {
    return _tag == DBXFILESDeleteErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESDeleteErrorPathLookup:
           return @"DBXFILESDeleteErrorPathLookup";
        case DBXFILESDeleteErrorPathWrite:
           return @"DBXFILESDeleteErrorPathWrite";
        case DBXFILESDeleteErrorOther:
           return @"DBXFILESDeleteErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXFILESLookupError *)pathLookup {
    if (_tag != DBXFILESDeleteErrorPathLookup) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESDeleteErrorPathLookup`, but was %@.", [self getTagName]];
    }
    return _pathLookup;
}

- (DBXFILESWriteError *)pathWrite {
    if (_tag != DBXFILESDeleteErrorPathWrite) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESDeleteErrorPathWrite`, but was %@.", [self getTagName]];
    }
    return _pathWrite;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXFILESDeleteErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESDeleteErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESDeleteErrorSerializer serialize:self] description];
}

@end


@implementation DBXFILESDeleteErrorSerializer 

+ (NSDictionary *)serialize:(DBXFILESDeleteError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPathLookup]) {
        jsonDict = [[DBXFILESLookupErrorSerializer serialize:valueObj.pathLookup] mutableCopy];
        jsonDict[@".tag"] = @"path_lookup";
    }
    else if ([valueObj isPathWrite]) {
        jsonDict = [[DBXFILESWriteErrorSerializer serialize:valueObj.pathWrite] mutableCopy];
        jsonDict[@".tag"] = @"path_write";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESDeleteError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"path_lookup"]) {
        DBXFILESLookupError *pathLookup = [DBXFILESLookupErrorSerializer deserialize:valueDict[@"path_lookup"]];
        return [[DBXFILESDeleteError alloc] initWithPathLookup:pathLookup];
    }
    else if ([tag isEqualToString:@"path_write"]) {
        DBXFILESWriteError *pathWrite = [DBXFILESWriteErrorSerializer deserialize:valueDict[@"path_write"]];
        return [[DBXFILESDeleteError alloc] initWithPathWrite:pathWrite];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXFILESDeleteError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
