///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesInvalidPropertyGroupError.h"
#import "DbxFilesLookupError.h"
#import "DbxFilesPropertiesError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesInvalidPropertyGroupError 

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorTemplateNotFound;
        _templateNotFound = templateNotFound;
    }
    return self;
}

- (instancetype)initWithRestrictedContent {
    self = [super init];
    if (self != nil) {
        _tag = (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorRestrictedContent;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorOther;
    }
    return self;
}

- (instancetype)initWithPath:(DbxFilesLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithPropertyFieldTooLarge {
    self = [super init];
    if (self != nil) {
        _tag = (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorPropertyFieldTooLarge;
    }
    return self;
}

- (instancetype)initWithDoesNotFitTemplate {
    self = [super init];
    if (self != nil) {
        _tag = (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorDoesNotFitTemplate;
    }
    return self;
}

- (BOOL)isTemplateNotFound {
    return _tag == (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
    return _tag == (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorRestrictedContent;
}

- (BOOL)isOther {
    return _tag == (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorOther;
}

- (BOOL)isPath {
    return _tag == (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorPath;
}

- (BOOL)isPropertyFieldTooLarge {
    return _tag == (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorPropertyFieldTooLarge;
}

- (BOOL)isDoesNotFitTemplate {
    return _tag == (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorDoesNotFitTemplate;
}

- (NSString *)getTagName {
    if (_tag == (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorTemplateNotFound) {
        return @"(FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorTemplateNotFound";
    }
    if (_tag == (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorRestrictedContent) {
        return @"(FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorRestrictedContent";
    }
    if (_tag == (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorOther) {
        return @"(FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorOther";
    }
    if (_tag == (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorPath) {
        return @"(FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorPath";
    }
    if (_tag == (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorPropertyFieldTooLarge) {
        return @"(FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorPropertyFieldTooLarge";
    }
    if (_tag == (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorDoesNotFitTemplate) {
        return @"(FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorDoesNotFitTemplate";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)templateNotFound {
    if (_tag != (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorTemplateNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorTemplateNotFound, but was %@.", [self getTagName]];
    }
    return _templateNotFound;
}

- (DbxFilesLookupError *)path {
    if (_tag != (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesInvalidPropertyGroupErrorTag)FilesInvalidPropertyGroupErrorPath, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesInvalidPropertyGroupErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesInvalidPropertyGroupErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesInvalidPropertyGroupErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesInvalidPropertyGroupErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesInvalidPropertyGroupError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTemplateNotFound]) {
        jsonDict[@"template_not_found"] = [DbxStringSerializer serialize:valueObj.templateNotFound];
        jsonDict[@".tag"] = @"template_not_found";
    }
    else if ([valueObj isRestrictedContent]) {
        jsonDict[@".tag"] = @"restricted_content";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isPath]) {
        jsonDict[@"path"] = [DbxFilesLookupErrorSerializer serialize:valueObj.path];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isPropertyFieldTooLarge]) {
        jsonDict[@".tag"] = @"property_field_too_large";
    }
    else if ([valueObj isDoesNotFitTemplate]) {
        jsonDict[@".tag"] = @"does_not_fit_template";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesInvalidPropertyGroupError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"template_not_found"]) {
        NSString *templateNotFound = [DbxStringSerializer deserialize:valueDict[@"template_not_found"]];
        return [[DbxFilesInvalidPropertyGroupError alloc] initWithTemplateNotFound:templateNotFound];
    }
    if ([tag isEqualToString:@"restricted_content"]) {
        return [[DbxFilesInvalidPropertyGroupError alloc] initWithRestrictedContent];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxFilesInvalidPropertyGroupError alloc] initWithOther];
    }
    if ([tag isEqualToString:@"path"]) {
        DbxFilesLookupError *path = [DbxFilesLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DbxFilesInvalidPropertyGroupError alloc] initWithPath:path];
    }
    if ([tag isEqualToString:@"property_field_too_large"]) {
        return [[DbxFilesInvalidPropertyGroupError alloc] initWithPropertyFieldTooLarge];
    }
    if ([tag isEqualToString:@"does_not_fit_template"]) {
        return [[DbxFilesInvalidPropertyGroupError alloc] initWithDoesNotFitTemplate];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
