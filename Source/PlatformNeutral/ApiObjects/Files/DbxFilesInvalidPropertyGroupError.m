///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesInvalidPropertyGroupError.h"
#import "DbxFilesLookupError.h"
#import "DbxFilesPropertiesError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesInvalidPropertyGroupError 

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
    self = [super init];
    if (self != nil) {
        _tag = FilesInvalidPropertyGroupErrorTemplateNotFound;
        _templateNotFound = templateNotFound;
    }
    return self;
}

- (instancetype)initWithRestrictedContent {
    self = [super init];
    if (self != nil) {
        _tag = FilesInvalidPropertyGroupErrorRestrictedContent;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = FilesInvalidPropertyGroupErrorOther;
    }
    return self;
}

- (instancetype)initWithPath:(DbxFilesLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = FilesInvalidPropertyGroupErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithPropertyFieldTooLarge {
    self = [super init];
    if (self != nil) {
        _tag = FilesInvalidPropertyGroupErrorPropertyFieldTooLarge;
    }
    return self;
}

- (instancetype)initWithDoesNotFitTemplate {
    self = [super init];
    if (self != nil) {
        _tag = FilesInvalidPropertyGroupErrorDoesNotFitTemplate;
    }
    return self;
}

- (BOOL)isTemplateNotFound {
    return _tag == FilesInvalidPropertyGroupErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
    return _tag == FilesInvalidPropertyGroupErrorRestrictedContent;
}

- (BOOL)isOther {
    return _tag == FilesInvalidPropertyGroupErrorOther;
}

- (BOOL)isPath {
    return _tag == FilesInvalidPropertyGroupErrorPath;
}

- (BOOL)isPropertyFieldTooLarge {
    return _tag == FilesInvalidPropertyGroupErrorPropertyFieldTooLarge;
}

- (BOOL)isDoesNotFitTemplate {
    return _tag == FilesInvalidPropertyGroupErrorDoesNotFitTemplate;
}

- (NSString *)getTagName {
    switch (_tag) {
        case FilesInvalidPropertyGroupErrorTemplateNotFound:
           return @"FilesInvalidPropertyGroupErrorTemplateNotFound";
        case FilesInvalidPropertyGroupErrorRestrictedContent:
           return @"FilesInvalidPropertyGroupErrorRestrictedContent";
        case FilesInvalidPropertyGroupErrorOther:
           return @"FilesInvalidPropertyGroupErrorOther";
        case FilesInvalidPropertyGroupErrorPath:
           return @"FilesInvalidPropertyGroupErrorPath";
        case FilesInvalidPropertyGroupErrorPropertyFieldTooLarge:
           return @"FilesInvalidPropertyGroupErrorPropertyFieldTooLarge";
        case FilesInvalidPropertyGroupErrorDoesNotFitTemplate:
           return @"FilesInvalidPropertyGroupErrorDoesNotFitTemplate";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)templateNotFound {
    if (_tag != FilesInvalidPropertyGroupErrorTemplateNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required FilesInvalidPropertyGroupErrorTemplateNotFound, but was %@.", [self getTagName]];
    }
    return _templateNotFound;
}

- (DbxFilesLookupError *)path {
    if (_tag != FilesInvalidPropertyGroupErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required FilesInvalidPropertyGroupErrorPath, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesInvalidPropertyGroupErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesInvalidPropertyGroupErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesInvalidPropertyGroupErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesInvalidPropertyGroupErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesInvalidPropertyGroupError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTemplateNotFound]) {
        jsonDict[@"template_not_found"] = valueObj.templateNotFound;
        jsonDict[@".tag"] = @"template_not_found";
    }
    else if ([valueObj isRestrictedContent]) {
        jsonDict[@".tag"] = @"restricted_content";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isPath]) {
        jsonDict = [[DbxFilesLookupErrorSerializer serialize:valueObj.path] mutableCopy];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isPropertyFieldTooLarge]) {
        jsonDict[@".tag"] = @"property_field_too_large";
    }
    else if ([valueObj isDoesNotFitTemplate]) {
        jsonDict[@".tag"] = @"does_not_fit_template";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesInvalidPropertyGroupError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"template_not_found"]) {
        NSString *templateNotFound = valueDict[@"template_not_found"];
        return [[DbxFilesInvalidPropertyGroupError alloc] initWithTemplateNotFound:templateNotFound];
    }
    if ([tag isEqualToString:@"restricted_content"]) {
        return [[DbxFilesInvalidPropertyGroupError alloc] initWithRestrictedContent];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxFilesInvalidPropertyGroupError alloc] initWithOther];
    }
    if ([tag isEqualToString:@"path"]) {
        DbxFilesLookupError *path = [DbxFilesLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DbxFilesInvalidPropertyGroupError alloc] initWithPath:path];
    }
    if ([tag isEqualToString:@"property_field_too_large"]) {
        return [[DbxFilesInvalidPropertyGroupError alloc] initWithPropertyFieldTooLarge];
    }
    if ([tag isEqualToString:@"does_not_fit_template"]) {
        return [[DbxFilesInvalidPropertyGroupError alloc] initWithDoesNotFitTemplate];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
