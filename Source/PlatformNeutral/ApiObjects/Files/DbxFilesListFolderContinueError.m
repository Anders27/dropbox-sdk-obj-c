///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesListFolderContinueError.h"
#import "DbxFilesLookupError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesListFolderContinueError 

- (instancetype)initWithPath:(DbxFilesLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = (FilesListFolderContinueErrorTag)FilesListFolderContinueErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithReset {
    self = [super init];
    if (self != nil) {
        _tag = (FilesListFolderContinueErrorTag)FilesListFolderContinueErrorReset;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (FilesListFolderContinueErrorTag)FilesListFolderContinueErrorOther;
    }
    return self;
}

- (BOOL)isPath {
    return _tag == (FilesListFolderContinueErrorTag)FilesListFolderContinueErrorPath;
}

- (BOOL)isReset {
    return _tag == (FilesListFolderContinueErrorTag)FilesListFolderContinueErrorReset;
}

- (BOOL)isOther {
    return _tag == (FilesListFolderContinueErrorTag)FilesListFolderContinueErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (FilesListFolderContinueErrorTag)FilesListFolderContinueErrorPath) {
        return @"(FilesListFolderContinueErrorTag)FilesListFolderContinueErrorPath";
    }
    if (_tag == (FilesListFolderContinueErrorTag)FilesListFolderContinueErrorReset) {
        return @"(FilesListFolderContinueErrorTag)FilesListFolderContinueErrorReset";
    }
    if (_tag == (FilesListFolderContinueErrorTag)FilesListFolderContinueErrorOther) {
        return @"(FilesListFolderContinueErrorTag)FilesListFolderContinueErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxFilesLookupError *)path {
    if (_tag != (FilesListFolderContinueErrorTag)FilesListFolderContinueErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesListFolderContinueErrorTag)FilesListFolderContinueErrorPath, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesListFolderContinueErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesListFolderContinueErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesListFolderContinueErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesListFolderContinueErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesListFolderContinueError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPath]) {
        jsonDict[@"path"] = [DbxFilesLookupErrorSerializer serialize:valueObj.path];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isReset]) {
        jsonDict[@".tag"] = @"reset";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesListFolderContinueError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"path"]) {
        DbxFilesLookupError *path = [DbxFilesLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DbxFilesListFolderContinueError alloc] initWithPath:path];
    }
    if ([tag isEqualToString:@"reset"]) {
        return [[DbxFilesListFolderContinueError alloc] initWithReset];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxFilesListFolderContinueError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
