///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesLookUpPropertiesError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesLookUpPropertiesError 

- (instancetype)initWithPropertyGroupNotFound {
    self = [super init];
    if (self != nil) {
        _tag = FilesLookUpPropertiesErrorPropertyGroupNotFound;
    }
    return self;
}

- (BOOL)isPropertyGroupNotFound {
    return _tag == FilesLookUpPropertiesErrorPropertyGroupNotFound;
}

- (NSString *)getTagName {
    switch (_tag) {
        case FilesLookUpPropertiesErrorPropertyGroupNotFound:
           return @"FilesLookUpPropertiesErrorPropertyGroupNotFound";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesLookUpPropertiesErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesLookUpPropertiesErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesLookUpPropertiesErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesLookUpPropertiesErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesLookUpPropertiesError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPropertyGroupNotFound]) {
        jsonDict[@".tag"] = @"property_group_not_found";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesLookUpPropertiesError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"property_group_not_found"]) {
        return [[DbxFilesLookUpPropertiesError alloc] initWithPropertyGroupNotFound];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
