///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesMediaInfo.h"
#import "DbxFilesMediaMetadata.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesMediaInfo 

- (instancetype)initWithPending {
    self = [super init];
    if (self != nil) {
        _tag = FilesMediaInfoPending;
    }
    return self;
}

- (instancetype)initWithMetadata:(DbxFilesMediaMetadata *)metadata {
    self = [super init];
    if (self != nil) {
        _tag = FilesMediaInfoMetadata;
        _metadata = metadata;
    }
    return self;
}

- (BOOL)isPending {
    return _tag == FilesMediaInfoPending;
}

- (BOOL)isMetadata {
    return _tag == FilesMediaInfoMetadata;
}

- (NSString *)getTagName {
    switch (_tag) {
        case FilesMediaInfoPending:
           return @"FilesMediaInfoPending";
        case FilesMediaInfoMetadata:
           return @"FilesMediaInfoMetadata";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxFilesMediaMetadata *)metadata {
    if (_tag != FilesMediaInfoMetadata) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required FilesMediaInfoMetadata, but was %@.", [self getTagName]];
    }
    return _metadata;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesMediaInfoSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesMediaInfoSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesMediaInfoSerializer serialize:self] description];
}

@end


@implementation DbxFilesMediaInfoSerializer 

+ (NSDictionary *)serialize:(DbxFilesMediaInfo *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPending]) {
        jsonDict[@".tag"] = @"pending";
    }
    else if ([valueObj isMetadata]) {
        jsonDict = [[DbxFilesMediaMetadataSerializer serialize:valueObj.metadata] mutableCopy];
        jsonDict[@".tag"] = @"metadata";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesMediaInfo *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"pending"]) {
        return [[DbxFilesMediaInfo alloc] initWithPending];
    }
    if ([tag isEqualToString:@"metadata"]) {
        DbxFilesMediaMetadata *metadata = [DbxFilesMediaMetadataSerializer deserialize:valueDict];
        return [[DbxFilesMediaInfo alloc] initWithMetadata:metadata];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
