///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesLookupError.h"
#import "DbxFilesPreviewError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesPreviewError 

- (instancetype)initWithPath:(DbxFilesLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = FilesPreviewErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithInProgress {
    self = [super init];
    if (self != nil) {
        _tag = FilesPreviewErrorInProgress;
    }
    return self;
}

- (instancetype)initWithUnsupportedExtension {
    self = [super init];
    if (self != nil) {
        _tag = FilesPreviewErrorUnsupportedExtension;
    }
    return self;
}

- (instancetype)initWithUnsupportedContent {
    self = [super init];
    if (self != nil) {
        _tag = FilesPreviewErrorUnsupportedContent;
    }
    return self;
}

- (BOOL)isPath {
    return _tag == FilesPreviewErrorPath;
}

- (BOOL)isInProgress {
    return _tag == FilesPreviewErrorInProgress;
}

- (BOOL)isUnsupportedExtension {
    return _tag == FilesPreviewErrorUnsupportedExtension;
}

- (BOOL)isUnsupportedContent {
    return _tag == FilesPreviewErrorUnsupportedContent;
}

- (NSString *)getTagName {
    switch (_tag) {
        case FilesPreviewErrorPath:
           return @"FilesPreviewErrorPath";
        case FilesPreviewErrorInProgress:
           return @"FilesPreviewErrorInProgress";
        case FilesPreviewErrorUnsupportedExtension:
           return @"FilesPreviewErrorUnsupportedExtension";
        case FilesPreviewErrorUnsupportedContent:
           return @"FilesPreviewErrorUnsupportedContent";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxFilesLookupError *)path {
    if (_tag != FilesPreviewErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required FilesPreviewErrorPath, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesPreviewErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesPreviewErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesPreviewErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesPreviewErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesPreviewError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPath]) {
        jsonDict = [[DbxFilesLookupErrorSerializer serialize:valueObj.path] mutableCopy];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isInProgress]) {
        jsonDict[@".tag"] = @"in_progress";
    }
    else if ([valueObj isUnsupportedExtension]) {
        jsonDict[@".tag"] = @"unsupported_extension";
    }
    else if ([valueObj isUnsupportedContent]) {
        jsonDict[@".tag"] = @"unsupported_content";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesPreviewError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"path"]) {
        DbxFilesLookupError *path = [DbxFilesLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DbxFilesPreviewError alloc] initWithPath:path];
    }
    if ([tag isEqualToString:@"in_progress"]) {
        return [[DbxFilesPreviewError alloc] initWithInProgress];
    }
    if ([tag isEqualToString:@"unsupported_extension"]) {
        return [[DbxFilesPreviewError alloc] initWithUnsupportedExtension];
    }
    if ([tag isEqualToString:@"unsupported_content"]) {
        return [[DbxFilesPreviewError alloc] initWithUnsupportedContent];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
