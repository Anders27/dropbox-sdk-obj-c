///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesLookupError.h"
#import "DbxFilesPropertiesError.h"
#import "DbxPropertiesPropertyTemplateError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesPropertiesError 

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (FilesPropertiesErrorTag)FilesPropertiesErrorTemplateNotFound;
        _templateNotFound = templateNotFound;
    }
    return self;
}

- (instancetype)initWithRestrictedContent {
    self = [super init];
    if (self != nil) {
        _tag = (FilesPropertiesErrorTag)FilesPropertiesErrorRestrictedContent;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (FilesPropertiesErrorTag)FilesPropertiesErrorOther;
    }
    return self;
}

- (instancetype)initWithPath:(DbxFilesLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = (FilesPropertiesErrorTag)FilesPropertiesErrorPath;
        _path = path;
    }
    return self;
}

- (BOOL)isTemplateNotFound {
    return _tag == (FilesPropertiesErrorTag)FilesPropertiesErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
    return _tag == (FilesPropertiesErrorTag)FilesPropertiesErrorRestrictedContent;
}

- (BOOL)isOther {
    return _tag == (FilesPropertiesErrorTag)FilesPropertiesErrorOther;
}

- (BOOL)isPath {
    return _tag == (FilesPropertiesErrorTag)FilesPropertiesErrorPath;
}

- (NSString *)getTagName {
    if (_tag == (FilesPropertiesErrorTag)FilesPropertiesErrorTemplateNotFound) {
        return @"(FilesPropertiesErrorTag)FilesPropertiesErrorTemplateNotFound";
    }
    if (_tag == (FilesPropertiesErrorTag)FilesPropertiesErrorRestrictedContent) {
        return @"(FilesPropertiesErrorTag)FilesPropertiesErrorRestrictedContent";
    }
    if (_tag == (FilesPropertiesErrorTag)FilesPropertiesErrorOther) {
        return @"(FilesPropertiesErrorTag)FilesPropertiesErrorOther";
    }
    if (_tag == (FilesPropertiesErrorTag)FilesPropertiesErrorPath) {
        return @"(FilesPropertiesErrorTag)FilesPropertiesErrorPath";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)templateNotFound {
    if (_tag != (FilesPropertiesErrorTag)FilesPropertiesErrorTemplateNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesPropertiesErrorTag)FilesPropertiesErrorTemplateNotFound, but was %@.", [self getTagName]];
    }
    return _templateNotFound;
}

- (DbxFilesLookupError *)path {
    if (_tag != (FilesPropertiesErrorTag)FilesPropertiesErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesPropertiesErrorTag)FilesPropertiesErrorPath, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesPropertiesErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesPropertiesErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesPropertiesErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesPropertiesErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesPropertiesError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTemplateNotFound]) {
        jsonDict[@"template_not_found"] = [DbxStringSerializer serialize:valueObj.templateNotFound];
        jsonDict[@".tag"] = @"template_not_found";
    }
    else if ([valueObj isRestrictedContent]) {
        jsonDict[@".tag"] = @"restricted_content";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isPath]) {
        jsonDict[@"path"] = [DbxFilesLookupErrorSerializer serialize:valueObj.path];
        jsonDict[@".tag"] = @"path";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesPropertiesError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"template_not_found"]) {
        NSString *templateNotFound = [DbxStringSerializer deserialize:valueDict[@"template_not_found"]];
        return [[DbxFilesPropertiesError alloc] initWithTemplateNotFound:templateNotFound];
    }
    if ([tag isEqualToString:@"restricted_content"]) {
        return [[DbxFilesPropertiesError alloc] initWithRestrictedContent];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxFilesPropertiesError alloc] initWithOther];
    }
    if ([tag isEqualToString:@"path"]) {
        DbxFilesLookupError *path = [DbxFilesLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DbxFilesPropertiesError alloc] initWithPath:path];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
