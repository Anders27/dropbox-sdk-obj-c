///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesLookupError.h"
#import "DbxFilesRestoreError.h"
#import "DbxFilesWriteError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesRestoreError 

- (instancetype)initWithPathLookup:(DbxFilesLookupError *)pathLookup {
    self = [super init];
    if (self != nil) {
        _tag = (FilesRestoreErrorTag)FilesRestoreErrorPathLookup;
        _pathLookup = pathLookup;
    }
    return self;
}

- (instancetype)initWithPathWrite:(DbxFilesWriteError *)pathWrite {
    self = [super init];
    if (self != nil) {
        _tag = (FilesRestoreErrorTag)FilesRestoreErrorPathWrite;
        _pathWrite = pathWrite;
    }
    return self;
}

- (instancetype)initWithInvalidRevision {
    self = [super init];
    if (self != nil) {
        _tag = (FilesRestoreErrorTag)FilesRestoreErrorInvalidRevision;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (FilesRestoreErrorTag)FilesRestoreErrorOther;
    }
    return self;
}

- (BOOL)isPathLookup {
    return _tag == (FilesRestoreErrorTag)FilesRestoreErrorPathLookup;
}

- (BOOL)isPathWrite {
    return _tag == (FilesRestoreErrorTag)FilesRestoreErrorPathWrite;
}

- (BOOL)isInvalidRevision {
    return _tag == (FilesRestoreErrorTag)FilesRestoreErrorInvalidRevision;
}

- (BOOL)isOther {
    return _tag == (FilesRestoreErrorTag)FilesRestoreErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (FilesRestoreErrorTag)FilesRestoreErrorPathLookup) {
        return @"(FilesRestoreErrorTag)FilesRestoreErrorPathLookup";
    }
    if (_tag == (FilesRestoreErrorTag)FilesRestoreErrorPathWrite) {
        return @"(FilesRestoreErrorTag)FilesRestoreErrorPathWrite";
    }
    if (_tag == (FilesRestoreErrorTag)FilesRestoreErrorInvalidRevision) {
        return @"(FilesRestoreErrorTag)FilesRestoreErrorInvalidRevision";
    }
    if (_tag == (FilesRestoreErrorTag)FilesRestoreErrorOther) {
        return @"(FilesRestoreErrorTag)FilesRestoreErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxFilesLookupError *)pathLookup {
    if (_tag != (FilesRestoreErrorTag)FilesRestoreErrorPathLookup) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesRestoreErrorTag)FilesRestoreErrorPathLookup, but was %@.", [self getTagName]];
    }
    return _pathLookup;
}

- (DbxFilesWriteError *)pathWrite {
    if (_tag != (FilesRestoreErrorTag)FilesRestoreErrorPathWrite) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesRestoreErrorTag)FilesRestoreErrorPathWrite, but was %@.", [self getTagName]];
    }
    return _pathWrite;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesRestoreErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesRestoreErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesRestoreErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesRestoreErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesRestoreError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPathLookup]) {
        jsonDict = [[DbxFilesLookupErrorSerializer serialize:valueObj.pathLookup] mutableCopy];
        jsonDict[@".tag"] = @"path_lookup";
    }
    else if ([valueObj isPathWrite]) {
        jsonDict = [[DbxFilesWriteErrorSerializer serialize:valueObj.pathWrite] mutableCopy];
        jsonDict[@".tag"] = @"path_write";
    }
    else if ([valueObj isInvalidRevision]) {
        jsonDict[@".tag"] = @"invalid_revision";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesRestoreError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"path_lookup"]) {
        DbxFilesLookupError *pathLookup = [DbxFilesLookupErrorSerializer deserialize:valueDict[@"path_lookup"]];
        return [[DbxFilesRestoreError alloc] initWithPathLookup:pathLookup];
    }
    if ([tag isEqualToString:@"path_write"]) {
        DbxFilesWriteError *pathWrite = [DbxFilesWriteErrorSerializer deserialize:valueDict[@"path_write"]];
        return [[DbxFilesRestoreError alloc] initWithPathWrite:pathWrite];
    }
    if ([tag isEqualToString:@"invalid_revision"]) {
        return [[DbxFilesRestoreError alloc] initWithInvalidRevision];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxFilesRestoreError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
