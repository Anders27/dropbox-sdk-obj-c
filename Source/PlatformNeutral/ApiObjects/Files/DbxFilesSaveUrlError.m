///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesSaveUrlError.h"
#import "DbxFilesWriteError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesSaveUrlError 

- (instancetype)initWithPath:(DbxFilesWriteError *)path {
    self = [super init];
    if (self != nil) {
        _tag = FilesSaveUrlErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithDownloadFailed {
    self = [super init];
    if (self != nil) {
        _tag = FilesSaveUrlErrorDownloadFailed;
    }
    return self;
}

- (instancetype)initWithInvalidUrl {
    self = [super init];
    if (self != nil) {
        _tag = FilesSaveUrlErrorInvalidUrl;
    }
    return self;
}

- (instancetype)initWithNotFound {
    self = [super init];
    if (self != nil) {
        _tag = FilesSaveUrlErrorNotFound;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = FilesSaveUrlErrorOther;
    }
    return self;
}

- (BOOL)isPath {
    return _tag == FilesSaveUrlErrorPath;
}

- (BOOL)isDownloadFailed {
    return _tag == FilesSaveUrlErrorDownloadFailed;
}

- (BOOL)isInvalidUrl {
    return _tag == FilesSaveUrlErrorInvalidUrl;
}

- (BOOL)isNotFound {
    return _tag == FilesSaveUrlErrorNotFound;
}

- (BOOL)isOther {
    return _tag == FilesSaveUrlErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case FilesSaveUrlErrorPath:
           return @"FilesSaveUrlErrorPath";
        case FilesSaveUrlErrorDownloadFailed:
           return @"FilesSaveUrlErrorDownloadFailed";
        case FilesSaveUrlErrorInvalidUrl:
           return @"FilesSaveUrlErrorInvalidUrl";
        case FilesSaveUrlErrorNotFound:
           return @"FilesSaveUrlErrorNotFound";
        case FilesSaveUrlErrorOther:
           return @"FilesSaveUrlErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxFilesWriteError *)path {
    if (_tag != FilesSaveUrlErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required FilesSaveUrlErrorPath, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesSaveUrlErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesSaveUrlErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesSaveUrlErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesSaveUrlErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesSaveUrlError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPath]) {
        jsonDict = [[DbxFilesWriteErrorSerializer serialize:valueObj.path] mutableCopy];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isDownloadFailed]) {
        jsonDict[@".tag"] = @"download_failed";
    }
    else if ([valueObj isInvalidUrl]) {
        jsonDict[@".tag"] = @"invalid_url";
    }
    else if ([valueObj isNotFound]) {
        jsonDict[@".tag"] = @"not_found";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesSaveUrlError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"path"]) {
        DbxFilesWriteError *path = [DbxFilesWriteErrorSerializer deserialize:valueDict[@"path"]];
        return [[DbxFilesSaveUrlError alloc] initWithPath:path];
    }
    if ([tag isEqualToString:@"download_failed"]) {
        return [[DbxFilesSaveUrlError alloc] initWithDownloadFailed];
    }
    if ([tag isEqualToString:@"invalid_url"]) {
        return [[DbxFilesSaveUrlError alloc] initWithInvalidUrl];
    }
    if ([tag isEqualToString:@"not_found"]) {
        return [[DbxFilesSaveUrlError alloc] initWithNotFound];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxFilesSaveUrlError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
