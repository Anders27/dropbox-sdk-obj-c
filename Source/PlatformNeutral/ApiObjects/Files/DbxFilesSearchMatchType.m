///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesSearchMatchType.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesSearchMatchType 

- (instancetype)initWithFilename {
    self = [super init];
    if (self != nil) {
        _tag = FilesSearchMatchTypeFilename;
    }
    return self;
}

- (instancetype)initWithContent {
    self = [super init];
    if (self != nil) {
        _tag = FilesSearchMatchTypeContent;
    }
    return self;
}

- (instancetype)initWithBoth {
    self = [super init];
    if (self != nil) {
        _tag = FilesSearchMatchTypeBoth;
    }
    return self;
}

- (BOOL)isFilename {
    return _tag == FilesSearchMatchTypeFilename;
}

- (BOOL)isContent {
    return _tag == FilesSearchMatchTypeContent;
}

- (BOOL)isBoth {
    return _tag == FilesSearchMatchTypeBoth;
}

- (NSString *)getTagName {
    switch (_tag) {
        case FilesSearchMatchTypeFilename:
           return @"FilesSearchMatchTypeFilename";
        case FilesSearchMatchTypeContent:
           return @"FilesSearchMatchTypeContent";
        case FilesSearchMatchTypeBoth:
           return @"FilesSearchMatchTypeBoth";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesSearchMatchTypeSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesSearchMatchTypeSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesSearchMatchTypeSerializer serialize:self] description];
}

@end


@implementation DbxFilesSearchMatchTypeSerializer 

+ (NSDictionary *)serialize:(DbxFilesSearchMatchType *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isFilename]) {
        jsonDict[@".tag"] = @"filename";
    }
    else if ([valueObj isContent]) {
        jsonDict[@".tag"] = @"content";
    }
    else if ([valueObj isBoth]) {
        jsonDict[@".tag"] = @"both";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesSearchMatchType *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"filename"]) {
        return [[DbxFilesSearchMatchType alloc] initWithFilename];
    }
    if ([tag isEqualToString:@"content"]) {
        return [[DbxFilesSearchMatchType alloc] initWithContent];
    }
    if ([tag isEqualToString:@"both"]) {
        return [[DbxFilesSearchMatchType alloc] initWithBoth];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
