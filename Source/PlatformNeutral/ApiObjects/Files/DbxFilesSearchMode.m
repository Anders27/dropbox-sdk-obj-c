///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesSearchMode.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesSearchMode 

- (instancetype)initWithFilename {
    self = [super init];
    if (self != nil) {
        _tag = FilesSearchModeFilename;
    }
    return self;
}

- (instancetype)initWithFilenameAndContent {
    self = [super init];
    if (self != nil) {
        _tag = FilesSearchModeFilenameAndContent;
    }
    return self;
}

- (instancetype)initWithDeletedFilename {
    self = [super init];
    if (self != nil) {
        _tag = FilesSearchModeDeletedFilename;
    }
    return self;
}

- (BOOL)isFilename {
    return _tag == FilesSearchModeFilename;
}

- (BOOL)isFilenameAndContent {
    return _tag == FilesSearchModeFilenameAndContent;
}

- (BOOL)isDeletedFilename {
    return _tag == FilesSearchModeDeletedFilename;
}

- (NSString *)getTagName {
    switch (_tag) {
        case FilesSearchModeFilename:
           return @"FilesSearchModeFilename";
        case FilesSearchModeFilenameAndContent:
           return @"FilesSearchModeFilenameAndContent";
        case FilesSearchModeDeletedFilename:
           return @"FilesSearchModeDeletedFilename";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesSearchModeSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesSearchModeSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesSearchModeSerializer serialize:self] description];
}

@end


@implementation DbxFilesSearchModeSerializer 

+ (NSDictionary *)serialize:(DbxFilesSearchMode *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isFilename]) {
        jsonDict[@".tag"] = @"filename";
    }
    else if ([valueObj isFilenameAndContent]) {
        jsonDict[@".tag"] = @"filename_and_content";
    }
    else if ([valueObj isDeletedFilename]) {
        jsonDict[@".tag"] = @"deleted_filename";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesSearchMode *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"filename"]) {
        return [[DbxFilesSearchMode alloc] initWithFilename];
    }
    if ([tag isEqualToString:@"filename_and_content"]) {
        return [[DbxFilesSearchMode alloc] initWithFilenameAndContent];
    }
    if ([tag isEqualToString:@"deleted_filename"]) {
        return [[DbxFilesSearchMode alloc] initWithDeletedFilename];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
