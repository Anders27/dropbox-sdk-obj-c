///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesLookupError.h"
#import "DbxFilesThumbnailError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesThumbnailError 

- (instancetype)initWithPath:(DbxFilesLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = (FilesThumbnailErrorTag)FilesThumbnailErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithUnsupportedExtension {
    self = [super init];
    if (self != nil) {
        _tag = (FilesThumbnailErrorTag)FilesThumbnailErrorUnsupportedExtension;
    }
    return self;
}

- (instancetype)initWithUnsupportedImage {
    self = [super init];
    if (self != nil) {
        _tag = (FilesThumbnailErrorTag)FilesThumbnailErrorUnsupportedImage;
    }
    return self;
}

- (instancetype)initWithConversionError {
    self = [super init];
    if (self != nil) {
        _tag = (FilesThumbnailErrorTag)FilesThumbnailErrorConversionError;
    }
    return self;
}

- (BOOL)isPath {
    return _tag == (FilesThumbnailErrorTag)FilesThumbnailErrorPath;
}

- (BOOL)isUnsupportedExtension {
    return _tag == (FilesThumbnailErrorTag)FilesThumbnailErrorUnsupportedExtension;
}

- (BOOL)isUnsupportedImage {
    return _tag == (FilesThumbnailErrorTag)FilesThumbnailErrorUnsupportedImage;
}

- (BOOL)isConversionError {
    return _tag == (FilesThumbnailErrorTag)FilesThumbnailErrorConversionError;
}

- (NSString *)getTagName {
    if (_tag == (FilesThumbnailErrorTag)FilesThumbnailErrorPath) {
        return @"(FilesThumbnailErrorTag)FilesThumbnailErrorPath";
    }
    if (_tag == (FilesThumbnailErrorTag)FilesThumbnailErrorUnsupportedExtension) {
        return @"(FilesThumbnailErrorTag)FilesThumbnailErrorUnsupportedExtension";
    }
    if (_tag == (FilesThumbnailErrorTag)FilesThumbnailErrorUnsupportedImage) {
        return @"(FilesThumbnailErrorTag)FilesThumbnailErrorUnsupportedImage";
    }
    if (_tag == (FilesThumbnailErrorTag)FilesThumbnailErrorConversionError) {
        return @"(FilesThumbnailErrorTag)FilesThumbnailErrorConversionError";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxFilesLookupError *)path {
    if (_tag != (FilesThumbnailErrorTag)FilesThumbnailErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesThumbnailErrorTag)FilesThumbnailErrorPath, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesThumbnailErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesThumbnailErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesThumbnailErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesThumbnailErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesThumbnailError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPath]) {
        jsonDict = [[DbxFilesLookupErrorSerializer serialize:valueObj.path] mutableCopy];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isUnsupportedExtension]) {
        jsonDict[@".tag"] = @"unsupported_extension";
    }
    else if ([valueObj isUnsupportedImage]) {
        jsonDict[@".tag"] = @"unsupported_image";
    }
    else if ([valueObj isConversionError]) {
        jsonDict[@".tag"] = @"conversion_error";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesThumbnailError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"path"]) {
        DbxFilesLookupError *path = [DbxFilesLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DbxFilesThumbnailError alloc] initWithPath:path];
    }
    if ([tag isEqualToString:@"unsupported_extension"]) {
        return [[DbxFilesThumbnailError alloc] initWithUnsupportedExtension];
    }
    if ([tag isEqualToString:@"unsupported_image"]) {
        return [[DbxFilesThumbnailError alloc] initWithUnsupportedImage];
    }
    if ([tag isEqualToString:@"conversion_error"]) {
        return [[DbxFilesThumbnailError alloc] initWithConversionError];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
