///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESInvalidPropertyGroupError.h"
#import "DBXFILESLookUpPropertiesError.h"
#import "DBXFILESLookupError.h"
#import "DBXFILESUpdatePropertiesError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXFILESUpdatePropertiesError 

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESUpdatePropertiesErrorTemplateNotFound;
        _templateNotFound = templateNotFound;
    }
    return self;
}

- (instancetype)initWithRestrictedContent {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESUpdatePropertiesErrorRestrictedContent;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESUpdatePropertiesErrorOther;
    }
    return self;
}

- (instancetype)initWithPath:(DBXFILESLookupError *)path {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESUpdatePropertiesErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithPropertyFieldTooLarge {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESUpdatePropertiesErrorPropertyFieldTooLarge;
    }
    return self;
}

- (instancetype)initWithDoesNotFitTemplate {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESUpdatePropertiesErrorDoesNotFitTemplate;
    }
    return self;
}

- (instancetype)initWithPropertyGroupLookup:(DBXFILESLookUpPropertiesError *)propertyGroupLookup {
    self = [super init];
    if (self != nil) {
        _tag = DBXFILESUpdatePropertiesErrorPropertyGroupLookup;
        _propertyGroupLookup = propertyGroupLookup;
    }
    return self;
}

- (BOOL)isTemplateNotFound {
    return _tag == DBXFILESUpdatePropertiesErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
    return _tag == DBXFILESUpdatePropertiesErrorRestrictedContent;
}

- (BOOL)isOther {
    return _tag == DBXFILESUpdatePropertiesErrorOther;
}

- (BOOL)isPath {
    return _tag == DBXFILESUpdatePropertiesErrorPath;
}

- (BOOL)isPropertyFieldTooLarge {
    return _tag == DBXFILESUpdatePropertiesErrorPropertyFieldTooLarge;
}

- (BOOL)isDoesNotFitTemplate {
    return _tag == DBXFILESUpdatePropertiesErrorDoesNotFitTemplate;
}

- (BOOL)isPropertyGroupLookup {
    return _tag == DBXFILESUpdatePropertiesErrorPropertyGroupLookup;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXFILESUpdatePropertiesErrorTemplateNotFound:
           return @"DBXFILESUpdatePropertiesErrorTemplateNotFound";
        case DBXFILESUpdatePropertiesErrorRestrictedContent:
           return @"DBXFILESUpdatePropertiesErrorRestrictedContent";
        case DBXFILESUpdatePropertiesErrorOther:
           return @"DBXFILESUpdatePropertiesErrorOther";
        case DBXFILESUpdatePropertiesErrorPath:
           return @"DBXFILESUpdatePropertiesErrorPath";
        case DBXFILESUpdatePropertiesErrorPropertyFieldTooLarge:
           return @"DBXFILESUpdatePropertiesErrorPropertyFieldTooLarge";
        case DBXFILESUpdatePropertiesErrorDoesNotFitTemplate:
           return @"DBXFILESUpdatePropertiesErrorDoesNotFitTemplate";
        case DBXFILESUpdatePropertiesErrorPropertyGroupLookup:
           return @"DBXFILESUpdatePropertiesErrorPropertyGroupLookup";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSString *)templateNotFound {
    if (_tag != DBXFILESUpdatePropertiesErrorTemplateNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESUpdatePropertiesErrorTemplateNotFound`, but was %@.", [self getTagName]];
    }
    return _templateNotFound;
}

- (DBXFILESLookupError *)path {
    if (_tag != DBXFILESUpdatePropertiesErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESUpdatePropertiesErrorPath`, but was %@.", [self getTagName]];
    }
    return _path;
}

- (DBXFILESLookUpPropertiesError *)propertyGroupLookup {
    if (_tag != DBXFILESUpdatePropertiesErrorPropertyGroupLookup) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXFILESUpdatePropertiesErrorPropertyGroupLookup`, but was %@.", [self getTagName]];
    }
    return _propertyGroupLookup;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXFILESUpdatePropertiesErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXFILESUpdatePropertiesErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXFILESUpdatePropertiesErrorSerializer serialize:self] description];
}

@end


@implementation DBXFILESUpdatePropertiesErrorSerializer 

+ (NSDictionary *)serialize:(DBXFILESUpdatePropertiesError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTemplateNotFound]) {
        jsonDict[@"template_not_found"] = valueObj.templateNotFound;
        jsonDict[@".tag"] = @"template_not_found";
    }
    else if ([valueObj isRestrictedContent]) {
        jsonDict[@".tag"] = @"restricted_content";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isPath]) {
        jsonDict = [[DBXFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isPropertyFieldTooLarge]) {
        jsonDict[@".tag"] = @"property_field_too_large";
    }
    else if ([valueObj isDoesNotFitTemplate]) {
        jsonDict[@".tag"] = @"does_not_fit_template";
    }
    else if ([valueObj isPropertyGroupLookup]) {
        jsonDict = [[DBXFILESLookUpPropertiesErrorSerializer serialize:valueObj.propertyGroupLookup] mutableCopy];
        jsonDict[@".tag"] = @"property_group_lookup";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXFILESUpdatePropertiesError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"template_not_found"]) {
        NSString *templateNotFound = valueDict[@"template_not_found"];
        return [[DBXFILESUpdatePropertiesError alloc] initWithTemplateNotFound:templateNotFound];
    }
    else if ([tag isEqualToString:@"restricted_content"]) {
        return [[DBXFILESUpdatePropertiesError alloc] initWithRestrictedContent];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXFILESUpdatePropertiesError alloc] initWithOther];
    }
    else if ([tag isEqualToString:@"path"]) {
        DBXFILESLookupError *path = [DBXFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
        return [[DBXFILESUpdatePropertiesError alloc] initWithPath:path];
    }
    else if ([tag isEqualToString:@"property_field_too_large"]) {
        return [[DBXFILESUpdatePropertiesError alloc] initWithPropertyFieldTooLarge];
    }
    else if ([tag isEqualToString:@"does_not_fit_template"]) {
        return [[DBXFILESUpdatePropertiesError alloc] initWithDoesNotFitTemplate];
    }
    else if ([tag isEqualToString:@"property_group_lookup"]) {
        DBXFILESLookUpPropertiesError *propertyGroupLookup = [DBXFILESLookUpPropertiesErrorSerializer deserialize:valueDict[@"property_group_lookup"]];
        return [[DBXFILESUpdatePropertiesError alloc] initWithPropertyGroupLookup:propertyGroupLookup];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
