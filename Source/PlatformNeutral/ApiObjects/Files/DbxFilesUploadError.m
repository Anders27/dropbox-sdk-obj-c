///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesUploadError.h"
#import "DbxFilesUploadWriteFailed.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesUploadError 

- (instancetype)initWithPath:(DbxFilesUploadWriteFailed *)path {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadErrorTag)FilesUploadErrorPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadErrorTag)FilesUploadErrorOther;
    }
    return self;
}

- (BOOL)isPath {
    return _tag == (FilesUploadErrorTag)FilesUploadErrorPath;
}

- (BOOL)isOther {
    return _tag == (FilesUploadErrorTag)FilesUploadErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (FilesUploadErrorTag)FilesUploadErrorPath) {
        return @"(FilesUploadErrorTag)FilesUploadErrorPath";
    }
    if (_tag == (FilesUploadErrorTag)FilesUploadErrorOther) {
        return @"(FilesUploadErrorTag)FilesUploadErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxFilesUploadWriteFailed *)path {
    if (_tag != (FilesUploadErrorTag)FilesUploadErrorPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesUploadErrorTag)FilesUploadErrorPath, but was %@.", [self getTagName]];
    }
    return _path;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesUploadErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesUploadErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesUploadErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesUploadErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesUploadError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPath]) {
        jsonDict[@"path"] = [DbxFilesUploadWriteFailedSerializer serialize:valueObj.path];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesUploadError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"path"]) {
        DbxFilesUploadWriteFailed *path = [DbxFilesUploadWriteFailedSerializer deserialize:valueDict[@"path"]];
        return [[DbxFilesUploadError alloc] initWithPath:path];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxFilesUploadError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
