///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesInvalidPropertyGroupError.h"
#import "DbxFilesUploadError.h"
#import "DbxFilesUploadErrorWithProperties.h"
#import "DbxFilesUploadWriteFailed.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesUploadErrorWithProperties 

- (instancetype)initWithPath:(DbxFilesUploadWriteFailed *)path {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesPath;
        _path = path;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesOther;
    }
    return self;
}

- (instancetype)initWithPropertiesError:(DbxFilesInvalidPropertyGroupError *)propertiesError {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesPropertiesError;
        _propertiesError = propertiesError;
    }
    return self;
}

- (BOOL)isPath {
    return _tag == (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesPath;
}

- (BOOL)isOther {
    return _tag == (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesOther;
}

- (BOOL)isPropertiesError {
    return _tag == (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesPropertiesError;
}

- (NSString *)getTagName {
    if (_tag == (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesPath) {
        return @"(FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesPath";
    }
    if (_tag == (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesOther) {
        return @"(FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesOther";
    }
    if (_tag == (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesPropertiesError) {
        return @"(FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesPropertiesError";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxFilesUploadWriteFailed *)path {
    if (_tag != (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesPath, but was %@.", [self getTagName]];
    }
    return _path;
}

- (DbxFilesInvalidPropertyGroupError *)propertiesError {
    if (_tag != (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesPropertiesError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesUploadErrorWithPropertiesTag)FilesUploadErrorWithPropertiesPropertiesError, but was %@.", [self getTagName]];
    }
    return _propertiesError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesUploadErrorWithPropertiesSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesUploadErrorWithPropertiesSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesUploadErrorWithPropertiesSerializer serialize:self] description];
}

@end


@implementation DbxFilesUploadErrorWithPropertiesSerializer 

+ (NSDictionary *)serialize:(DbxFilesUploadErrorWithProperties *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPath]) {
        jsonDict[@"path"] = [DbxFilesUploadWriteFailedSerializer serialize:valueObj.path];
        jsonDict[@".tag"] = @"path";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isPropertiesError]) {
        jsonDict[@"properties_error"] = [DbxFilesInvalidPropertyGroupErrorSerializer serialize:valueObj.propertiesError];
        jsonDict[@".tag"] = @"properties_error";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesUploadErrorWithProperties *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"path"]) {
        DbxFilesUploadWriteFailed *path = [DbxFilesUploadWriteFailedSerializer deserialize:valueDict[@"path"]];
        return [[DbxFilesUploadErrorWithProperties alloc] initWithPath:path];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxFilesUploadErrorWithProperties alloc] initWithOther];
    }
    if ([tag isEqualToString:@"properties_error"]) {
        DbxFilesInvalidPropertyGroupError *propertiesError = [DbxFilesInvalidPropertyGroupErrorSerializer deserialize:valueDict[@"properties_error"]];
        return [[DbxFilesUploadErrorWithProperties alloc] initWithPropertiesError:propertiesError];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
