///
/// Auto-generated by Stone, do not modify.
///

#import "DbxAsyncPollResultBase.h"
#import "DbxFilesUploadSessionFinishBatchJobStatus.h"
#import "DbxFilesUploadSessionFinishBatchResult.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesUploadSessionFinishBatchJobStatus 

- (instancetype)initWithInProgress {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadSessionFinishBatchJobStatusTag)FilesUploadSessionFinishBatchJobStatusInProgress;
    }
    return self;
}

- (instancetype)initWithComplete:(DbxFilesUploadSessionFinishBatchResult *)complete {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadSessionFinishBatchJobStatusTag)FilesUploadSessionFinishBatchJobStatusComplete;
        _complete = complete;
    }
    return self;
}

- (BOOL)isInProgress {
    return _tag == (FilesUploadSessionFinishBatchJobStatusTag)FilesUploadSessionFinishBatchJobStatusInProgress;
}

- (BOOL)isComplete {
    return _tag == (FilesUploadSessionFinishBatchJobStatusTag)FilesUploadSessionFinishBatchJobStatusComplete;
}

- (NSString *)getTagName {
    if (_tag == (FilesUploadSessionFinishBatchJobStatusTag)FilesUploadSessionFinishBatchJobStatusInProgress) {
        return @"(FilesUploadSessionFinishBatchJobStatusTag)FilesUploadSessionFinishBatchJobStatusInProgress";
    }
    if (_tag == (FilesUploadSessionFinishBatchJobStatusTag)FilesUploadSessionFinishBatchJobStatusComplete) {
        return @"(FilesUploadSessionFinishBatchJobStatusTag)FilesUploadSessionFinishBatchJobStatusComplete";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxFilesUploadSessionFinishBatchResult *)complete {
    if (_tag != (FilesUploadSessionFinishBatchJobStatusTag)FilesUploadSessionFinishBatchJobStatusComplete) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesUploadSessionFinishBatchJobStatusTag)FilesUploadSessionFinishBatchJobStatusComplete, but was %@.", [self getTagName]];
    }
    return _complete;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesUploadSessionFinishBatchJobStatusSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesUploadSessionFinishBatchJobStatusSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesUploadSessionFinishBatchJobStatusSerializer serialize:self] description];
}

@end


@implementation DbxFilesUploadSessionFinishBatchJobStatusSerializer 

+ (NSDictionary *)serialize:(DbxFilesUploadSessionFinishBatchJobStatus *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInProgress]) {
        jsonDict[@".tag"] = @"in_progress";
    }
    else if ([valueObj isComplete]) {
        jsonDict = [[DbxFilesUploadSessionFinishBatchResultSerializer serialize:valueObj.complete] mutableCopy];
        jsonDict[@".tag"] = @"complete";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesUploadSessionFinishBatchJobStatus *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"in_progress"]) {
        return [[DbxFilesUploadSessionFinishBatchJobStatus alloc] initWithInProgress];
    }
    if ([tag isEqualToString:@"complete"]) {
        DbxFilesUploadSessionFinishBatchResult *complete = [DbxFilesUploadSessionFinishBatchResultSerializer deserialize:valueDict];
        return [[DbxFilesUploadSessionFinishBatchJobStatus alloc] initWithComplete:complete];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
