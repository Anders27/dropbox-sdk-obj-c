///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesFileMetadata.h"
#import "DbxFilesUploadSessionFinishBatchResultEntry.h"
#import "DbxFilesUploadSessionFinishError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesUploadSessionFinishBatchResultEntry 

- (instancetype)initWithSuccess:(DbxFilesFileMetadata *)success {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadSessionFinishBatchResultEntryTag)FilesUploadSessionFinishBatchResultEntrySuccess;
        _success = success;
    }
    return self;
}

- (instancetype)initWithFailure:(DbxFilesUploadSessionFinishError *)failure {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadSessionFinishBatchResultEntryTag)FilesUploadSessionFinishBatchResultEntryFailure;
        _failure = failure;
    }
    return self;
}

- (BOOL)isSuccess {
    return _tag == (FilesUploadSessionFinishBatchResultEntryTag)FilesUploadSessionFinishBatchResultEntrySuccess;
}

- (BOOL)isFailure {
    return _tag == (FilesUploadSessionFinishBatchResultEntryTag)FilesUploadSessionFinishBatchResultEntryFailure;
}

- (NSString *)getTagName {
    if (_tag == (FilesUploadSessionFinishBatchResultEntryTag)FilesUploadSessionFinishBatchResultEntrySuccess) {
        return @"(FilesUploadSessionFinishBatchResultEntryTag)FilesUploadSessionFinishBatchResultEntrySuccess";
    }
    if (_tag == (FilesUploadSessionFinishBatchResultEntryTag)FilesUploadSessionFinishBatchResultEntryFailure) {
        return @"(FilesUploadSessionFinishBatchResultEntryTag)FilesUploadSessionFinishBatchResultEntryFailure";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxFilesFileMetadata *)success {
    if (_tag != (FilesUploadSessionFinishBatchResultEntryTag)FilesUploadSessionFinishBatchResultEntrySuccess) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesUploadSessionFinishBatchResultEntryTag)FilesUploadSessionFinishBatchResultEntrySuccess, but was %@.", [self getTagName]];
    }
    return _success;
}

- (DbxFilesUploadSessionFinishError *)failure {
    if (_tag != (FilesUploadSessionFinishBatchResultEntryTag)FilesUploadSessionFinishBatchResultEntryFailure) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesUploadSessionFinishBatchResultEntryTag)FilesUploadSessionFinishBatchResultEntryFailure, but was %@.", [self getTagName]];
    }
    return _failure;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesUploadSessionFinishBatchResultEntrySerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesUploadSessionFinishBatchResultEntrySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesUploadSessionFinishBatchResultEntrySerializer serialize:self] description];
}

@end


@implementation DbxFilesUploadSessionFinishBatchResultEntrySerializer 

+ (NSDictionary *)serialize:(DbxFilesUploadSessionFinishBatchResultEntry *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isSuccess]) {
        jsonDict[@"success"] = [DbxFilesFileMetadataSerializer serialize:valueObj.success];
        jsonDict[@".tag"] = @"success";
    }
    else if ([valueObj isFailure]) {
        jsonDict[@"failure"] = [DbxFilesUploadSessionFinishErrorSerializer serialize:valueObj.failure];
        jsonDict[@".tag"] = @"failure";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesUploadSessionFinishBatchResultEntry *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"success"]) {
        DbxFilesFileMetadata *success = [DbxFilesFileMetadataSerializer deserialize:valueDict[@"success"]];
        return [[DbxFilesUploadSessionFinishBatchResultEntry alloc] initWithSuccess:success];
    }
    if ([tag isEqualToString:@"failure"]) {
        DbxFilesUploadSessionFinishError *failure = [DbxFilesUploadSessionFinishErrorSerializer deserialize:valueDict[@"failure"]];
        return [[DbxFilesUploadSessionFinishBatchResultEntry alloc] initWithFailure:failure];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
