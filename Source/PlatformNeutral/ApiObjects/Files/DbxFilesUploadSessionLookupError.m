///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesUploadSessionLookupError.h"
#import "DbxFilesUploadSessionOffsetError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesUploadSessionLookupError 

- (instancetype)initWithNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorNotFound;
    }
    return self;
}

- (instancetype)initWithIncorrectOffset:(DbxFilesUploadSessionOffsetError *)incorrectOffset {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorIncorrectOffset;
        _incorrectOffset = incorrectOffset;
    }
    return self;
}

- (instancetype)initWithClosed {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorClosed;
    }
    return self;
}

- (instancetype)initWithNotClosed {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorNotClosed;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorOther;
    }
    return self;
}

- (BOOL)isNotFound {
    return _tag == (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorNotFound;
}

- (BOOL)isIncorrectOffset {
    return _tag == (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorIncorrectOffset;
}

- (BOOL)isClosed {
    return _tag == (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorClosed;
}

- (BOOL)isNotClosed {
    return _tag == (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorNotClosed;
}

- (BOOL)isOther {
    return _tag == (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorNotFound) {
        return @"(FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorNotFound";
    }
    if (_tag == (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorIncorrectOffset) {
        return @"(FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorIncorrectOffset";
    }
    if (_tag == (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorClosed) {
        return @"(FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorClosed";
    }
    if (_tag == (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorNotClosed) {
        return @"(FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorNotClosed";
    }
    if (_tag == (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorOther) {
        return @"(FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxFilesUploadSessionOffsetError *)incorrectOffset {
    if (_tag != (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorIncorrectOffset) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesUploadSessionLookupErrorTag)FilesUploadSessionLookupErrorIncorrectOffset, but was %@.", [self getTagName]];
    }
    return _incorrectOffset;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesUploadSessionLookupErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesUploadSessionLookupErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesUploadSessionLookupErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesUploadSessionLookupErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesUploadSessionLookupError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isNotFound]) {
        jsonDict[@".tag"] = @"not_found";
    }
    else if ([valueObj isIncorrectOffset]) {
        jsonDict[@"incorrect_offset"] = [DbxFilesUploadSessionOffsetErrorSerializer serialize:valueObj.incorrectOffset];
        jsonDict[@".tag"] = @"incorrect_offset";
    }
    else if ([valueObj isClosed]) {
        jsonDict[@".tag"] = @"closed";
    }
    else if ([valueObj isNotClosed]) {
        jsonDict[@".tag"] = @"not_closed";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesUploadSessionLookupError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"not_found"]) {
        return [[DbxFilesUploadSessionLookupError alloc] initWithNotFound];
    }
    if ([tag isEqualToString:@"incorrect_offset"]) {
        DbxFilesUploadSessionOffsetError *incorrectOffset = [DbxFilesUploadSessionOffsetErrorSerializer deserialize:valueDict[@"incorrect_offset"]];
        return [[DbxFilesUploadSessionLookupError alloc] initWithIncorrectOffset:incorrectOffset];
    }
    if ([tag isEqualToString:@"closed"]) {
        return [[DbxFilesUploadSessionLookupError alloc] initWithClosed];
    }
    if ([tag isEqualToString:@"not_closed"]) {
        return [[DbxFilesUploadSessionLookupError alloc] initWithNotClosed];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxFilesUploadSessionLookupError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
