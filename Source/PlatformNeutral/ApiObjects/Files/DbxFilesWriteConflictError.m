///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesWriteConflictError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesWriteConflictError 

- (instancetype)initWithFile {
    self = [super init];
    if (self != nil) {
        _tag = FilesWriteConflictErrorFile;
    }
    return self;
}

- (instancetype)initWithFolder {
    self = [super init];
    if (self != nil) {
        _tag = FilesWriteConflictErrorFolder;
    }
    return self;
}

- (instancetype)initWithFileAncestor {
    self = [super init];
    if (self != nil) {
        _tag = FilesWriteConflictErrorFileAncestor;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = FilesWriteConflictErrorOther;
    }
    return self;
}

- (BOOL)isFile {
    return _tag == FilesWriteConflictErrorFile;
}

- (BOOL)isFolder {
    return _tag == FilesWriteConflictErrorFolder;
}

- (BOOL)isFileAncestor {
    return _tag == FilesWriteConflictErrorFileAncestor;
}

- (BOOL)isOther {
    return _tag == FilesWriteConflictErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case FilesWriteConflictErrorFile:
           return @"FilesWriteConflictErrorFile";
        case FilesWriteConflictErrorFolder:
           return @"FilesWriteConflictErrorFolder";
        case FilesWriteConflictErrorFileAncestor:
           return @"FilesWriteConflictErrorFileAncestor";
        case FilesWriteConflictErrorOther:
           return @"FilesWriteConflictErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesWriteConflictErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesWriteConflictErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesWriteConflictErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesWriteConflictErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesWriteConflictError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isFile]) {
        jsonDict[@".tag"] = @"file";
    }
    else if ([valueObj isFolder]) {
        jsonDict[@".tag"] = @"folder";
    }
    else if ([valueObj isFileAncestor]) {
        jsonDict[@".tag"] = @"file_ancestor";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesWriteConflictError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"file"]) {
        return [[DbxFilesWriteConflictError alloc] initWithFile];
    }
    if ([tag isEqualToString:@"folder"]) {
        return [[DbxFilesWriteConflictError alloc] initWithFolder];
    }
    if ([tag isEqualToString:@"file_ancestor"]) {
        return [[DbxFilesWriteConflictError alloc] initWithFileAncestor];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxFilesWriteConflictError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
