///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesWriteConflictError.h"
#import "DbxFilesWriteError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesWriteError 

- (instancetype)initWithMalformedPath:(NSString *)malformedPath {
    self = [super init];
    if (self != nil) {
        _tag = FilesWriteErrorMalformedPath;
        _malformedPath = malformedPath;
    }
    return self;
}

- (instancetype)initWithConflict:(DbxFilesWriteConflictError *)conflict {
    self = [super init];
    if (self != nil) {
        _tag = FilesWriteErrorConflict;
        _conflict = conflict;
    }
    return self;
}

- (instancetype)initWithNoWritePermission {
    self = [super init];
    if (self != nil) {
        _tag = FilesWriteErrorNoWritePermission;
    }
    return self;
}

- (instancetype)initWithInsufficientSpace {
    self = [super init];
    if (self != nil) {
        _tag = FilesWriteErrorInsufficientSpace;
    }
    return self;
}

- (instancetype)initWithDisallowedName {
    self = [super init];
    if (self != nil) {
        _tag = FilesWriteErrorDisallowedName;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = FilesWriteErrorOther;
    }
    return self;
}

- (BOOL)isMalformedPath {
    return _tag == FilesWriteErrorMalformedPath;
}

- (BOOL)isConflict {
    return _tag == FilesWriteErrorConflict;
}

- (BOOL)isNoWritePermission {
    return _tag == FilesWriteErrorNoWritePermission;
}

- (BOOL)isInsufficientSpace {
    return _tag == FilesWriteErrorInsufficientSpace;
}

- (BOOL)isDisallowedName {
    return _tag == FilesWriteErrorDisallowedName;
}

- (BOOL)isOther {
    return _tag == FilesWriteErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case FilesWriteErrorMalformedPath:
           return @"FilesWriteErrorMalformedPath";
        case FilesWriteErrorConflict:
           return @"FilesWriteErrorConflict";
        case FilesWriteErrorNoWritePermission:
           return @"FilesWriteErrorNoWritePermission";
        case FilesWriteErrorInsufficientSpace:
           return @"FilesWriteErrorInsufficientSpace";
        case FilesWriteErrorDisallowedName:
           return @"FilesWriteErrorDisallowedName";
        case FilesWriteErrorOther:
           return @"FilesWriteErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)malformedPath {
    if (_tag != FilesWriteErrorMalformedPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required FilesWriteErrorMalformedPath, but was %@.", [self getTagName]];
    }
    return _malformedPath;
}

- (DbxFilesWriteConflictError *)conflict {
    if (_tag != FilesWriteErrorConflict) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required FilesWriteErrorConflict, but was %@.", [self getTagName]];
    }
    return _conflict;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesWriteErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesWriteErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesWriteErrorSerializer serialize:self] description];
}

@end


@implementation DbxFilesWriteErrorSerializer 

+ (NSDictionary *)serialize:(DbxFilesWriteError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isMalformedPath]) {
        if (valueObj.malformedPath) {
            jsonDict[@"malformed_path"] = valueObj.malformedPath;
        }
        jsonDict[@".tag"] = @"malformed_path";
    }
    else if ([valueObj isConflict]) {
        jsonDict = [[DbxFilesWriteConflictErrorSerializer serialize:valueObj.conflict] mutableCopy];
        jsonDict[@".tag"] = @"conflict";
    }
    else if ([valueObj isNoWritePermission]) {
        jsonDict[@".tag"] = @"no_write_permission";
    }
    else if ([valueObj isInsufficientSpace]) {
        jsonDict[@".tag"] = @"insufficient_space";
    }
    else if ([valueObj isDisallowedName]) {
        jsonDict[@".tag"] = @"disallowed_name";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesWriteError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"malformed_path"]) {
        NSString *malformedPath = valueDict[@"malformed_path"] ? valueDict[@"malformed_path"] : nil;
        return [[DbxFilesWriteError alloc] initWithMalformedPath:malformedPath];
    }
    if ([tag isEqualToString:@"conflict"]) {
        DbxFilesWriteConflictError *conflict = [DbxFilesWriteConflictErrorSerializer deserialize:valueDict[@"conflict"]];
        return [[DbxFilesWriteError alloc] initWithConflict:conflict];
    }
    if ([tag isEqualToString:@"no_write_permission"]) {
        return [[DbxFilesWriteError alloc] initWithNoWritePermission];
    }
    if ([tag isEqualToString:@"insufficient_space"]) {
        return [[DbxFilesWriteError alloc] initWithInsufficientSpace];
    }
    if ([tag isEqualToString:@"disallowed_name"]) {
        return [[DbxFilesWriteError alloc] initWithDisallowedName];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxFilesWriteError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
