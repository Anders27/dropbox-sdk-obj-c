///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesWriteMode.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxFilesWriteMode 

- (instancetype)initWithAdd {
    self = [super init];
    if (self != nil) {
        _tag = (FilesWriteModeTag)FilesWriteModeAdd;
    }
    return self;
}

- (instancetype)initWithOverwrite {
    self = [super init];
    if (self != nil) {
        _tag = (FilesWriteModeTag)FilesWriteModeOverwrite;
    }
    return self;
}

- (instancetype)initWithUpdate:(NSString *)update {
    self = [super init];
    if (self != nil) {
        _tag = (FilesWriteModeTag)FilesWriteModeUpdate;
        _update = update;
    }
    return self;
}

- (BOOL)isAdd {
    return _tag == (FilesWriteModeTag)FilesWriteModeAdd;
}

- (BOOL)isOverwrite {
    return _tag == (FilesWriteModeTag)FilesWriteModeOverwrite;
}

- (BOOL)isUpdate {
    return _tag == (FilesWriteModeTag)FilesWriteModeUpdate;
}

- (NSString *)getTagName {
    if (_tag == (FilesWriteModeTag)FilesWriteModeAdd) {
        return @"(FilesWriteModeTag)FilesWriteModeAdd";
    }
    if (_tag == (FilesWriteModeTag)FilesWriteModeOverwrite) {
        return @"(FilesWriteModeTag)FilesWriteModeOverwrite";
    }
    if (_tag == (FilesWriteModeTag)FilesWriteModeUpdate) {
        return @"(FilesWriteModeTag)FilesWriteModeUpdate";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)update {
    if (_tag != (FilesWriteModeTag)FilesWriteModeUpdate) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (FilesWriteModeTag)FilesWriteModeUpdate, but was %@.", [self getTagName]];
    }
    return _update;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxFilesWriteModeSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxFilesWriteModeSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxFilesWriteModeSerializer serialize:self] description];
}

@end


@implementation DbxFilesWriteModeSerializer 

+ (NSDictionary *)serialize:(DbxFilesWriteMode *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAdd]) {
        jsonDict[@".tag"] = @"add";
    }
    else if ([valueObj isOverwrite]) {
        jsonDict[@".tag"] = @"overwrite";
    }
    else if ([valueObj isUpdate]) {
        jsonDict[@"update"] = [DbxStringSerializer serialize:valueObj.update];
        jsonDict[@".tag"] = @"update";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxFilesWriteMode *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"add"]) {
        return [[DbxFilesWriteMode alloc] initWithAdd];
    }
    if ([tag isEqualToString:@"overwrite"]) {
        return [[DbxFilesWriteMode alloc] initWithOverwrite];
    }
    if ([tag isEqualToString:@"update"]) {
        NSString *update = [DbxStringSerializer deserialize:valueDict[@"update"]];
        return [[DbxFilesWriteMode alloc] initWithUpdate:update];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
