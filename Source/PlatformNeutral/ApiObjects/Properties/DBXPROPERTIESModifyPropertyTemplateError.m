///
/// Auto-generated by Stone, do not modify.
///

#import "DBXPROPERTIESModifyPropertyTemplateError.h"
#import "DBXPROPERTIESPropertyTemplateError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXPROPERTIESModifyPropertyTemplateError 

@synthesize templateNotFound = _templateNotFound;

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
    self = [super init];
    if (self) {
        _tag = DBXPROPERTIESModifyPropertyTemplateErrorTemplateNotFound;
        _templateNotFound = templateNotFound;
    }
    return self;
}

- (instancetype)initWithRestrictedContent {
    self = [super init];
    if (self) {
        _tag = DBXPROPERTIESModifyPropertyTemplateErrorRestrictedContent;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXPROPERTIESModifyPropertyTemplateErrorOther;
    }
    return self;
}

- (instancetype)initWithConflictingPropertyNames {
    self = [super init];
    if (self) {
        _tag = DBXPROPERTIESModifyPropertyTemplateErrorConflictingPropertyNames;
    }
    return self;
}

- (instancetype)initWithTooManyProperties {
    self = [super init];
    if (self) {
        _tag = DBXPROPERTIESModifyPropertyTemplateErrorTooManyProperties;
    }
    return self;
}

- (instancetype)initWithTooManyTemplates {
    self = [super init];
    if (self) {
        _tag = DBXPROPERTIESModifyPropertyTemplateErrorTooManyTemplates;
    }
    return self;
}

- (instancetype)initWithTemplateAttributeTooLarge {
    self = [super init];
    if (self) {
        _tag = DBXPROPERTIESModifyPropertyTemplateErrorTemplateAttributeTooLarge;
    }
    return self;
}

- (BOOL)isTemplateNotFound {
    return _tag == DBXPROPERTIESModifyPropertyTemplateErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
    return _tag == DBXPROPERTIESModifyPropertyTemplateErrorRestrictedContent;
}

- (BOOL)isOther {
    return _tag == DBXPROPERTIESModifyPropertyTemplateErrorOther;
}

- (BOOL)isConflictingPropertyNames {
    return _tag == DBXPROPERTIESModifyPropertyTemplateErrorConflictingPropertyNames;
}

- (BOOL)isTooManyProperties {
    return _tag == DBXPROPERTIESModifyPropertyTemplateErrorTooManyProperties;
}

- (BOOL)isTooManyTemplates {
    return _tag == DBXPROPERTIESModifyPropertyTemplateErrorTooManyTemplates;
}

- (BOOL)isTemplateAttributeTooLarge {
    return _tag == DBXPROPERTIESModifyPropertyTemplateErrorTemplateAttributeTooLarge;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXPROPERTIESModifyPropertyTemplateErrorTemplateNotFound:
           return @"DBXPROPERTIESModifyPropertyTemplateErrorTemplateNotFound";
        case DBXPROPERTIESModifyPropertyTemplateErrorRestrictedContent:
           return @"DBXPROPERTIESModifyPropertyTemplateErrorRestrictedContent";
        case DBXPROPERTIESModifyPropertyTemplateErrorOther:
           return @"DBXPROPERTIESModifyPropertyTemplateErrorOther";
        case DBXPROPERTIESModifyPropertyTemplateErrorConflictingPropertyNames:
           return @"DBXPROPERTIESModifyPropertyTemplateErrorConflictingPropertyNames";
        case DBXPROPERTIESModifyPropertyTemplateErrorTooManyProperties:
           return @"DBXPROPERTIESModifyPropertyTemplateErrorTooManyProperties";
        case DBXPROPERTIESModifyPropertyTemplateErrorTooManyTemplates:
           return @"DBXPROPERTIESModifyPropertyTemplateErrorTooManyTemplates";
        case DBXPROPERTIESModifyPropertyTemplateErrorTemplateAttributeTooLarge:
           return @"DBXPROPERTIESModifyPropertyTemplateErrorTemplateAttributeTooLarge";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSString *)templateNotFound {
    if (![self isTemplateNotFound]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXPROPERTIESModifyPropertyTemplateErrorTemplateNotFound`, but was %@.", [self getTagName]];
    }
    return _templateNotFound;
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXPROPERTIESModifyPropertyTemplateErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXPROPERTIESModifyPropertyTemplateErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXPROPERTIESModifyPropertyTemplateErrorSerializer serialize:self] description];
}

@end


@implementation DBXPROPERTIESModifyPropertyTemplateErrorSerializer 

+ (NSDictionary *)serialize:(DBXPROPERTIESModifyPropertyTemplateError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTemplateNotFound]) {
        jsonDict[@"template_not_found"] = valueObj.templateNotFound;
        jsonDict[@".tag"] = @"template_not_found";
    }
    else if ([valueObj isRestrictedContent]) {
        jsonDict[@".tag"] = @"restricted_content";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isConflictingPropertyNames]) {
        jsonDict[@".tag"] = @"conflicting_property_names";
    }
    else if ([valueObj isTooManyProperties]) {
        jsonDict[@".tag"] = @"too_many_properties";
    }
    else if ([valueObj isTooManyTemplates]) {
        jsonDict[@".tag"] = @"too_many_templates";
    }
    else if ([valueObj isTemplateAttributeTooLarge]) {
        jsonDict[@".tag"] = @"template_attribute_too_large";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXPROPERTIESModifyPropertyTemplateError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"template_not_found"]) {
        NSString *templateNotFound = valueDict[@"template_not_found"];
        return [[DBXPROPERTIESModifyPropertyTemplateError alloc] initWithTemplateNotFound:templateNotFound];
    }
    else if ([tag isEqualToString:@"restricted_content"]) {
        return [[DBXPROPERTIESModifyPropertyTemplateError alloc] initWithRestrictedContent];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXPROPERTIESModifyPropertyTemplateError alloc] initWithOther];
    }
    else if ([tag isEqualToString:@"conflicting_property_names"]) {
        return [[DBXPROPERTIESModifyPropertyTemplateError alloc] initWithConflictingPropertyNames];
    }
    else if ([tag isEqualToString:@"too_many_properties"]) {
        return [[DBXPROPERTIESModifyPropertyTemplateError alloc] initWithTooManyProperties];
    }
    else if ([tag isEqualToString:@"too_many_templates"]) {
        return [[DBXPROPERTIESModifyPropertyTemplateError alloc] initWithTooManyTemplates];
    }
    else if ([tag isEqualToString:@"template_attribute_too_large"]) {
        return [[DBXPROPERTIESModifyPropertyTemplateError alloc] initWithTemplateAttributeTooLarge];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
