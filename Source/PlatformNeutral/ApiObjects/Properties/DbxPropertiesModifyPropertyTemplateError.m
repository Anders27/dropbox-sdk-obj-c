///
/// Auto-generated by Stone, do not modify.
///

#import "DbxPropertiesModifyPropertyTemplateError.h"
#import "DbxPropertiesPropertyTemplateError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxPropertiesModifyPropertyTemplateError 

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTemplateNotFound;
        _templateNotFound = templateNotFound;
    }
    return self;
}

- (instancetype)initWithRestrictedContent {
    self = [super init];
    if (self != nil) {
        _tag = (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorRestrictedContent;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorOther;
    }
    return self;
}

- (instancetype)initWithConflictingPropertyNames {
    self = [super init];
    if (self != nil) {
        _tag = (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorConflictingPropertyNames;
    }
    return self;
}

- (instancetype)initWithTooManyProperties {
    self = [super init];
    if (self != nil) {
        _tag = (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTooManyProperties;
    }
    return self;
}

- (instancetype)initWithTooManyTemplates {
    self = [super init];
    if (self != nil) {
        _tag = (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTooManyTemplates;
    }
    return self;
}

- (instancetype)initWithTemplateAttributeTooLarge {
    self = [super init];
    if (self != nil) {
        _tag = (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTemplateAttributeTooLarge;
    }
    return self;
}

- (BOOL)isTemplateNotFound {
    return _tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
    return _tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorRestrictedContent;
}

- (BOOL)isOther {
    return _tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorOther;
}

- (BOOL)isConflictingPropertyNames {
    return _tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorConflictingPropertyNames;
}

- (BOOL)isTooManyProperties {
    return _tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTooManyProperties;
}

- (BOOL)isTooManyTemplates {
    return _tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTooManyTemplates;
}

- (BOOL)isTemplateAttributeTooLarge {
    return _tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTemplateAttributeTooLarge;
}

- (NSString *)getTagName {
    if (_tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTemplateNotFound) {
        return @"(PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTemplateNotFound";
    }
    if (_tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorRestrictedContent) {
        return @"(PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorRestrictedContent";
    }
    if (_tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorOther) {
        return @"(PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorOther";
    }
    if (_tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorConflictingPropertyNames) {
        return @"(PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorConflictingPropertyNames";
    }
    if (_tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTooManyProperties) {
        return @"(PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTooManyProperties";
    }
    if (_tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTooManyTemplates) {
        return @"(PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTooManyTemplates";
    }
    if (_tag == (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTemplateAttributeTooLarge) {
        return @"(PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTemplateAttributeTooLarge";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)templateNotFound {
    if (_tag != (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTemplateNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (PropertiesModifyPropertyTemplateErrorTag)PropertiesModifyPropertyTemplateErrorTemplateNotFound, but was %@.", [self getTagName]];
    }
    return _templateNotFound;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxPropertiesModifyPropertyTemplateErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxPropertiesModifyPropertyTemplateErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxPropertiesModifyPropertyTemplateErrorSerializer serialize:self] description];
}

@end


@implementation DbxPropertiesModifyPropertyTemplateErrorSerializer 

+ (NSDictionary *)serialize:(DbxPropertiesModifyPropertyTemplateError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTemplateNotFound]) {
        jsonDict[@"template_not_found"] = valueObj.templateNotFound;
        jsonDict[@".tag"] = @"template_not_found";
    }
    else if ([valueObj isRestrictedContent]) {
        jsonDict[@".tag"] = @"restricted_content";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isConflictingPropertyNames]) {
        jsonDict[@".tag"] = @"conflicting_property_names";
    }
    else if ([valueObj isTooManyProperties]) {
        jsonDict[@".tag"] = @"too_many_properties";
    }
    else if ([valueObj isTooManyTemplates]) {
        jsonDict[@".tag"] = @"too_many_templates";
    }
    else if ([valueObj isTemplateAttributeTooLarge]) {
        jsonDict[@".tag"] = @"template_attribute_too_large";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxPropertiesModifyPropertyTemplateError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"template_not_found"]) {
        NSString *templateNotFound = valueDict[@"template_not_found"];
        return [[DbxPropertiesModifyPropertyTemplateError alloc] initWithTemplateNotFound:templateNotFound];
    }
    if ([tag isEqualToString:@"restricted_content"]) {
        return [[DbxPropertiesModifyPropertyTemplateError alloc] initWithRestrictedContent];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxPropertiesModifyPropertyTemplateError alloc] initWithOther];
    }
    if ([tag isEqualToString:@"conflicting_property_names"]) {
        return [[DbxPropertiesModifyPropertyTemplateError alloc] initWithConflictingPropertyNames];
    }
    if ([tag isEqualToString:@"too_many_properties"]) {
        return [[DbxPropertiesModifyPropertyTemplateError alloc] initWithTooManyProperties];
    }
    if ([tag isEqualToString:@"too_many_templates"]) {
        return [[DbxPropertiesModifyPropertyTemplateError alloc] initWithTooManyTemplates];
    }
    if ([tag isEqualToString:@"template_attribute_too_large"]) {
        return [[DbxPropertiesModifyPropertyTemplateError alloc] initWithTemplateAttributeTooLarge];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
