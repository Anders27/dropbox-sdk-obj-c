///
/// Auto-generated by Stone, do not modify.
///

#import "DBXPROPERTIESPropertyTemplateError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXPROPERTIESPropertyTemplateError 

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
    self = [super init];
    if (self != nil) {
        _tag = DBXPROPERTIESPropertyTemplateErrorTemplateNotFound;
        _templateNotFound = templateNotFound;
    }
    return self;
}

- (instancetype)initWithRestrictedContent {
    self = [super init];
    if (self != nil) {
        _tag = DBXPROPERTIESPropertyTemplateErrorRestrictedContent;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXPROPERTIESPropertyTemplateErrorOther;
    }
    return self;
}

- (BOOL)isTemplateNotFound {
    return _tag == DBXPROPERTIESPropertyTemplateErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
    return _tag == DBXPROPERTIESPropertyTemplateErrorRestrictedContent;
}

- (BOOL)isOther {
    return _tag == DBXPROPERTIESPropertyTemplateErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXPROPERTIESPropertyTemplateErrorTemplateNotFound:
           return @"DBXPROPERTIESPropertyTemplateErrorTemplateNotFound";
        case DBXPROPERTIESPropertyTemplateErrorRestrictedContent:
           return @"DBXPROPERTIESPropertyTemplateErrorRestrictedContent";
        case DBXPROPERTIESPropertyTemplateErrorOther:
           return @"DBXPROPERTIESPropertyTemplateErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSString *)templateNotFound {
    if (_tag != DBXPROPERTIESPropertyTemplateErrorTemplateNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXPROPERTIESPropertyTemplateErrorTemplateNotFound`, but was %@.", [self getTagName]];
    }
    return _templateNotFound;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXPROPERTIESPropertyTemplateErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXPROPERTIESPropertyTemplateErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXPROPERTIESPropertyTemplateErrorSerializer serialize:self] description];
}

@end


@implementation DBXPROPERTIESPropertyTemplateErrorSerializer 

+ (NSDictionary *)serialize:(DBXPROPERTIESPropertyTemplateError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTemplateNotFound]) {
        jsonDict[@"template_not_found"] = valueObj.templateNotFound;
        jsonDict[@".tag"] = @"template_not_found";
    }
    else if ([valueObj isRestrictedContent]) {
        jsonDict[@".tag"] = @"restricted_content";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXPROPERTIESPropertyTemplateError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"template_not_found"]) {
        NSString *templateNotFound = valueDict[@"template_not_found"];
        return [[DBXPROPERTIESPropertyTemplateError alloc] initWithTemplateNotFound:templateNotFound];
    }
    else if ([tag isEqualToString:@"restricted_content"]) {
        return [[DBXPROPERTIESPropertyTemplateError alloc] initWithRestrictedContent];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXPROPERTIESPropertyTemplateError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
