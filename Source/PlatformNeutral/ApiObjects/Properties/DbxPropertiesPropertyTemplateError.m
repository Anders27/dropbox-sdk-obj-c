///
/// Auto-generated by Stone, do not modify.
///

#import "DbxPropertiesPropertyTemplateError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxPropertiesPropertyTemplateError 

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorTemplateNotFound;
        _templateNotFound = templateNotFound;
    }
    return self;
}

- (instancetype)initWithRestrictedContent {
    self = [super init];
    if (self != nil) {
        _tag = (PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorRestrictedContent;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorOther;
    }
    return self;
}

- (BOOL)isTemplateNotFound {
    return _tag == (PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
    return _tag == (PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorRestrictedContent;
}

- (BOOL)isOther {
    return _tag == (PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorTemplateNotFound) {
        return @"(PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorTemplateNotFound";
    }
    if (_tag == (PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorRestrictedContent) {
        return @"(PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorRestrictedContent";
    }
    if (_tag == (PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorOther) {
        return @"(PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)templateNotFound {
    if (_tag != (PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorTemplateNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (PropertiesPropertyTemplateErrorTag)PropertiesPropertyTemplateErrorTemplateNotFound, but was %@.", [self getTagName]];
    }
    return _templateNotFound;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxPropertiesPropertyTemplateErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxPropertiesPropertyTemplateErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxPropertiesPropertyTemplateErrorSerializer serialize:self] description];
}

@end


@implementation DbxPropertiesPropertyTemplateErrorSerializer 

+ (NSDictionary *)serialize:(DbxPropertiesPropertyTemplateError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTemplateNotFound]) {
        jsonDict[@"template_not_found"] = [DbxStringSerializer serialize:valueObj.templateNotFound];
        jsonDict[@".tag"] = @"template_not_found";
    }
    else if ([valueObj isRestrictedContent]) {
        jsonDict[@".tag"] = @"restricted_content";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxPropertiesPropertyTemplateError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"template_not_found"]) {
        NSString *templateNotFound = [DbxStringSerializer deserialize:valueDict[@"template_not_found"]];
        return [[DbxPropertiesPropertyTemplateError alloc] initWithTemplateNotFound:templateNotFound];
    }
    if ([tag isEqualToString:@"restricted_content"]) {
        return [[DbxPropertiesPropertyTemplateError alloc] initWithRestrictedContent];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxPropertiesPropertyTemplateError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
