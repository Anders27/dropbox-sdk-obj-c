///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSerializableProtocol.h"
#import <Foundation/Foundation.h>

@class DBSHARINGInsufficientQuotaAmounts;
@class DBSHARINGMountFolderError;
@class DBSHARINGSharedFolderAccessError;

#pragma mark - API Object

///
/// The MountFolderError union.
///
/// This class implements the DBSerializable protocol (serialize and deserialize instance methods),
/// which is required for all Obj-C SDK API route objects.
///
@interface DBSHARINGMountFolderError : NSObject <DBSerializable>

#pragma mark - Instance fields

/// The DBSHARINGMountFolderErrorTag enum type represents the possible tag states with which the
/// DBSHARINGMountFolderError union can exist.
typedef NS_ENUM(NSInteger, DBSHARINGMountFolderErrorTag) {
  /// (no description).
  DBSHARINGMountFolderErrorAccessError,

  /// Mounting would cause a shared folder to be inside another, which is disallowed.
  DBSHARINGMountFolderErrorInsideSharedFolder,

  /// The current user does not have enough space to mount the shared folder.
  DBSHARINGMountFolderErrorInsufficientQuota,

  /// The shared folder is already mounted.
  DBSHARINGMountFolderErrorAlreadyMounted,

  /// The current user does not have permission to perform this action.
  DBSHARINGMountFolderErrorNoPermission,

  /// The shared folder is not mountable. One example where this can occur is when the shared
  /// folder belongs within a team folder in the user's Dropbox.
  DBSHARINGMountFolderErrorNotMountable,

  /// (no description).
  DBSHARINGMountFolderErrorOther,

};

/// Represents the union's current tag state.
@property(nonatomic, readonly) DBSHARINGMountFolderErrorTag tag;

/// (no description). Ensure the isAccessError method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property(nonatomic, readonly) DBSHARINGSharedFolderAccessError * _Nonnull accessError;

/// The current user does not have enough space to mount the shared folder. Ensure the
/// isInsufficientQuota method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property(nonatomic, readonly) DBSHARINGInsufficientQuotaAmounts * _Nonnull insufficientQuota;

#pragma mark - Constructors

///
/// Initializes union class with tag state of AccessError.
///
/// @param accessError (no description).
///
/// @return An initialized DBSHARINGMountFolderError instance.
///
- (nonnull instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError * _Nonnull)accessError;

///
/// Initializes union class with tag state of InsideSharedFolder.
///
/// About the InsideSharedFolder tag state: Mounting would cause a shared folder to be inside
/// another, which is disallowed.
///
/// @return An initialized DBSHARINGMountFolderError instance.
///
- (nonnull instancetype)initWithInsideSharedFolder;

///
/// Initializes union class with tag state of InsufficientQuota.
///
/// About the InsufficientQuota tag state: The current user does not have enough space to mount the
/// shared folder.
///
/// @param insufficientQuota The current user does not have enough space to mount the shared folder.
///
/// @return An initialized DBSHARINGMountFolderError instance.
///
- (nonnull instancetype)initWithInsufficientQuota:(DBSHARINGInsufficientQuotaAmounts * _Nonnull)insufficientQuota;

///
/// Initializes union class with tag state of AlreadyMounted.
///
/// About the AlreadyMounted tag state: The shared folder is already mounted.
///
/// @return An initialized DBSHARINGMountFolderError instance.
///
- (nonnull instancetype)initWithAlreadyMounted;

///
/// Initializes union class with tag state of NoPermission.
///
/// About the NoPermission tag state: The current user does not have permission to perform this
/// action.
///
/// @return An initialized DBSHARINGMountFolderError instance.
///
- (nonnull instancetype)initWithNoPermission;

///
/// Initializes union class with tag state of NotMountable.
///
/// About the NotMountable tag state: The shared folder is not mountable. One example where this can
/// occur is when the shared folder belongs within a team folder in the user's Dropbox.
///
/// @return An initialized DBSHARINGMountFolderError instance.
///
- (nonnull instancetype)initWithNotMountable;

///
/// Initializes union class with tag state of Other.
///
/// @return An initialized DBSHARINGMountFolderError instance.
///
- (nonnull instancetype)initWithOther;

#pragma mark - Tag state methods

///
/// Retrieves whether the union's current tag state has value AccessError.
///
/// @note Call this method and ensure it returns true before accessing the accessError property,
/// otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value AccessError.
///
- (BOOL)isAccessError;

///
/// Retrieves whether the union's current tag state has value InsideSharedFolder.
///
/// @return Whether the union's current tag state has value InsideSharedFolder.
///
- (BOOL)isInsideSharedFolder;

///
/// Retrieves whether the union's current tag state has value InsufficientQuota.
///
/// @note Call this method and ensure it returns true before accessing the insufficientQuota
/// property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value InsufficientQuota.
///
- (BOOL)isInsufficientQuota;

///
/// Retrieves whether the union's current tag state has value AlreadyMounted.
///
/// @return Whether the union's current tag state has value AlreadyMounted.
///
- (BOOL)isAlreadyMounted;

///
/// Retrieves whether the union's current tag state has value NoPermission.
///
/// @return Whether the union's current tag state has value NoPermission.
///
- (BOOL)isNoPermission;

///
/// Retrieves whether the union's current tag state has value NotMountable.
///
/// @return Whether the union's current tag state has value NotMountable.
///
- (BOOL)isNotMountable;

///
/// Retrieves whether the union's current tag state has value Other.
///
/// @return Whether the union's current tag state has value Other.
///
- (BOOL)isOther;

///
/// Retrieves string value of union's current tag state.
///
/// @return A human-readable string representing the union's current tag state.
///
- (NSString * _Nonnull)tagName;

@end

#pragma mark - Serializer Object

///
/// The serialization class for the DBSHARINGMountFolderError union.
///
@interface DBSHARINGMountFolderErrorSerializer : NSObject

///
/// Serializes DBSHARINGMountFolderError instances.
///
/// @param instance An instance of the DBSHARINGMountFolderError API object.
///
/// @return A json-compatible dictionary representation of the DBSHARINGMountFolderError API object.
///
+ (NSDictionary * _Nonnull)serialize:(DBSHARINGMountFolderError * _Nonnull)instance;

///
/// Deserializes DBSHARINGMountFolderError instances.
///
/// @param dict A json-compatible dictionary representation of the DBSHARINGMountFolderError API
/// object.
///
/// @return An instantiation of the DBSHARINGMountFolderError object.
///
+ (DBSHARINGMountFolderError * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
