///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSerializableProtocol.h"
#import <Foundation/Foundation.h>

@class DBSHARINGPermissionDeniedReason;

#pragma mark - API Object

///
/// The PermissionDeniedReason union.
///
/// Possible reasons the user is denied a permission.
///
/// This class implements the DBSerializable protocol (serialize and deserialize instance methods),
/// which is required for all Obj-C SDK API route objects.
///
@interface DBSHARINGPermissionDeniedReason : NSObject <DBSerializable>

#pragma mark - Instance fields

/// The DBSHARINGPermissionDeniedReasonTag enum type represents the possible tag states with which
/// the DBSHARINGPermissionDeniedReason union can exist.
typedef NS_ENUM(NSInteger, DBSHARINGPermissionDeniedReasonTag) {
  /// User is not on the same team as the folder owner.
  DBSHARINGPermissionDeniedReasonUserNotSameTeamAsOwner,

  /// User is prohibited by the owner from taking the action.
  DBSHARINGPermissionDeniedReasonUserNotAllowedByOwner,

  /// Target is indirectly a member of the folder, for example by being part of a group.
  DBSHARINGPermissionDeniedReasonTargetIsIndirectMember,

  /// Target is the owner of the folder.
  DBSHARINGPermissionDeniedReasonTargetIsOwner,

  /// Target is the user itself.
  DBSHARINGPermissionDeniedReasonTargetIsSelf,

  /// Target is not an active member of the team.
  DBSHARINGPermissionDeniedReasonTargetNotActive,

  /// Folder is team folder for a limited team.
  DBSHARINGPermissionDeniedReasonFolderIsLimitedTeamFolder,

  /// (no description).
  DBSHARINGPermissionDeniedReasonOther,

};

/// Represents the union's current tag state.
@property(nonatomic, readonly) DBSHARINGPermissionDeniedReasonTag tag;

#pragma mark - Constructors

///
/// Initializes union class with tag state of UserNotSameTeamAsOwner.
///
/// About the UserNotSameTeamAsOwner tag state: User is not on the same team as the folder owner.
///
/// @return An initialized DBSHARINGPermissionDeniedReason instance.
///
- (nonnull instancetype)initWithUserNotSameTeamAsOwner;

///
/// Initializes union class with tag state of UserNotAllowedByOwner.
///
/// About the UserNotAllowedByOwner tag state: User is prohibited by the owner from taking the
/// action.
///
/// @return An initialized DBSHARINGPermissionDeniedReason instance.
///
- (nonnull instancetype)initWithUserNotAllowedByOwner;

///
/// Initializes union class with tag state of TargetIsIndirectMember.
///
/// About the TargetIsIndirectMember tag state: Target is indirectly a member of the folder, for
/// example by being part of a group.
///
/// @return An initialized DBSHARINGPermissionDeniedReason instance.
///
- (nonnull instancetype)initWithTargetIsIndirectMember;

///
/// Initializes union class with tag state of TargetIsOwner.
///
/// About the TargetIsOwner tag state: Target is the owner of the folder.
///
/// @return An initialized DBSHARINGPermissionDeniedReason instance.
///
- (nonnull instancetype)initWithTargetIsOwner;

///
/// Initializes union class with tag state of TargetIsSelf.
///
/// About the TargetIsSelf tag state: Target is the user itself.
///
/// @return An initialized DBSHARINGPermissionDeniedReason instance.
///
- (nonnull instancetype)initWithTargetIsSelf;

///
/// Initializes union class with tag state of TargetNotActive.
///
/// About the TargetNotActive tag state: Target is not an active member of the team.
///
/// @return An initialized DBSHARINGPermissionDeniedReason instance.
///
- (nonnull instancetype)initWithTargetNotActive;

///
/// Initializes union class with tag state of FolderIsLimitedTeamFolder.
///
/// About the FolderIsLimitedTeamFolder tag state: Folder is team folder for a limited team.
///
/// @return An initialized DBSHARINGPermissionDeniedReason instance.
///
- (nonnull instancetype)initWithFolderIsLimitedTeamFolder;

///
/// Initializes union class with tag state of Other.
///
/// @return An initialized DBSHARINGPermissionDeniedReason instance.
///
- (nonnull instancetype)initWithOther;

#pragma mark - Tag state methods

///
/// Retrieves whether the union's current tag state has value UserNotSameTeamAsOwner.
///
/// @return Whether the union's current tag state has value UserNotSameTeamAsOwner.
///
- (BOOL)isUserNotSameTeamAsOwner;

///
/// Retrieves whether the union's current tag state has value UserNotAllowedByOwner.
///
/// @return Whether the union's current tag state has value UserNotAllowedByOwner.
///
- (BOOL)isUserNotAllowedByOwner;

///
/// Retrieves whether the union's current tag state has value TargetIsIndirectMember.
///
/// @return Whether the union's current tag state has value TargetIsIndirectMember.
///
- (BOOL)isTargetIsIndirectMember;

///
/// Retrieves whether the union's current tag state has value TargetIsOwner.
///
/// @return Whether the union's current tag state has value TargetIsOwner.
///
- (BOOL)isTargetIsOwner;

///
/// Retrieves whether the union's current tag state has value TargetIsSelf.
///
/// @return Whether the union's current tag state has value TargetIsSelf.
///
- (BOOL)isTargetIsSelf;

///
/// Retrieves whether the union's current tag state has value TargetNotActive.
///
/// @return Whether the union's current tag state has value TargetNotActive.
///
- (BOOL)isTargetNotActive;

///
/// Retrieves whether the union's current tag state has value FolderIsLimitedTeamFolder.
///
/// @return Whether the union's current tag state has value FolderIsLimitedTeamFolder.
///
- (BOOL)isFolderIsLimitedTeamFolder;

///
/// Retrieves whether the union's current tag state has value Other.
///
/// @return Whether the union's current tag state has value Other.
///
- (BOOL)isOther;

///
/// Retrieves string value of union's current tag state.
///
/// @return A human-readable string representing the union's current tag state.
///
- (NSString * _Nonnull)tagName;

@end

#pragma mark - Serializer Object

///
/// The serialization class for the DBSHARINGPermissionDeniedReason union.
///
@interface DBSHARINGPermissionDeniedReasonSerializer : NSObject

///
/// Serializes DBSHARINGPermissionDeniedReason instances.
///
/// @param instance An instance of the DBSHARINGPermissionDeniedReason API object.
///
/// @return A json-compatible dictionary representation of the DBSHARINGPermissionDeniedReason API
/// object.
///
+ (NSDictionary * _Nonnull)serialize:(DBSHARINGPermissionDeniedReason * _Nonnull)instance;

///
/// Deserializes DBSHARINGPermissionDeniedReason instances.
///
/// @param dict A json-compatible dictionary representation of the DBSHARINGPermissionDeniedReason
/// API object.
///
/// @return An instantiation of the DBSHARINGPermissionDeniedReason object.
///
+ (DBSHARINGPermissionDeniedReason * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
