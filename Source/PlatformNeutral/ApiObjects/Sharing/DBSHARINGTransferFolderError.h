///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>
#import "DBSerializableProtocol.h"

@class DBSHARINGSharedFolderAccessError;
@class DBSHARINGTransferFolderError;

#pragma mark - API Object

/// 
/// The TransferFolderError union.
/// 
/// This class implements the DBSerializable protocol (serialize and deserialize
/// instance methods), which is required for all Obj-C SDK API route objects.
/// 
@interface DBSHARINGTransferFolderError : NSObject <DBSerializable> 

#pragma mark - Instance fields

/// The DBSHARINGTransferFolderErrorTag enum type represents the possible tag
/// states with which the DBSHARINGTransferFolderError union can exist.
typedef NS_ENUM(NSInteger, DBSHARINGTransferFolderErrorTag) {
    /// (no description).
    DBSHARINGTransferFolderErrorAccessError,

    /// toDropboxId in TransferFolderArg is invalid.
    DBSHARINGTransferFolderErrorInvalidDropboxId,

    /// The new designated owner is not currently a member of the shared folder.
    DBSHARINGTransferFolderErrorDNewOwnerNotAMember,

    /// The new designated owner has not added the folder to their Dropbox.
    DBSHARINGTransferFolderErrorDNewOwnerUnmounted,

    /// The new designated owner's e-mail address is unverified.
    DBSHARINGTransferFolderErrorDNewOwnerEmailUnverified,

    /// This action cannot be performed on a team shared folder.
    DBSHARINGTransferFolderErrorTeamFolder,

    /// The current user does not have permission to perform this action.
    DBSHARINGTransferFolderErrorNoPermission,

    /// (no description).
    DBSHARINGTransferFolderErrorOther,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBSHARINGTransferFolderErrorTag tag;

/// (no description). Ensure the isAccessError method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBSHARINGSharedFolderAccessError * _Nonnull accessError;

#pragma mark - Constructors

/// 
/// Initializes union class with tag state of AccessError.
/// 
/// @param accessError (no description).
/// 
/// @return An initialized DBSHARINGTransferFolderError instance.
/// 
- (nonnull instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError * _Nonnull)accessError;

/// 
/// Initializes union class with tag state of InvalidDropboxId.
/// 
/// About the InvalidDropboxId tag state:
/// :field:`TransferFolderArg.to_dropbox_id` is invalid.
/// 
/// @return An initialized DBSHARINGTransferFolderError instance.
/// 
- (nonnull instancetype)initWithInvalidDropboxId;

/// 
/// Initializes union class with tag state of DNewOwnerNotAMember.
/// 
/// About the DNewOwnerNotAMember tag state: The new designated owner is not
/// currently a member of the shared folder.
/// 
/// @return An initialized DBSHARINGTransferFolderError instance.
/// 
- (nonnull instancetype)initWithDNewOwnerNotAMember;

/// 
/// Initializes union class with tag state of DNewOwnerUnmounted.
/// 
/// About the DNewOwnerUnmounted tag state: The new designated owner has not
/// added the folder to their Dropbox.
/// 
/// @return An initialized DBSHARINGTransferFolderError instance.
/// 
- (nonnull instancetype)initWithDNewOwnerUnmounted;

/// 
/// Initializes union class with tag state of DNewOwnerEmailUnverified.
/// 
/// About the DNewOwnerEmailUnverified tag state: The new designated owner's
/// e-mail address is unverified.
/// 
/// @return An initialized DBSHARINGTransferFolderError instance.
/// 
- (nonnull instancetype)initWithDNewOwnerEmailUnverified;

/// 
/// Initializes union class with tag state of TeamFolder.
/// 
/// About the TeamFolder tag state: This action cannot be performed on a team
/// shared folder.
/// 
/// @return An initialized DBSHARINGTransferFolderError instance.
/// 
- (nonnull instancetype)initWithTeamFolder;

/// 
/// Initializes union class with tag state of NoPermission.
/// 
/// About the NoPermission tag state: The current user does not have permission
/// to perform this action.
/// 
/// @return An initialized DBSHARINGTransferFolderError instance.
/// 
- (nonnull instancetype)initWithNoPermission;

/// 
/// Initializes union class with tag state of Other.
/// 
/// @return An initialized DBSHARINGTransferFolderError instance.
/// 
- (nonnull instancetype)initWithOther;

#pragma mark - Tag state methods

/// 
/// Retrieves whether the union's current tag state has value AccessError.
/// 
/// @note Call this method and ensure it returns true before accessing the
/// accessError property, otherwise a runtime exception will be thrown.
/// 
/// @return Whether the union's current tag state has value AccessError.
/// 
- (BOOL)isAccessError;

/// 
/// Retrieves whether the union's current tag state has value InvalidDropboxId.
/// 
/// @return Whether the union's current tag state has value InvalidDropboxId.
/// 
- (BOOL)isInvalidDropboxId;

/// 
/// Retrieves whether the union's current tag state has value
/// DNewOwnerNotAMember.
/// 
/// @return Whether the union's current tag state has value DNewOwnerNotAMember.
/// 
- (BOOL)isDNewOwnerNotAMember;

/// 
/// Retrieves whether the union's current tag state has value
/// DNewOwnerUnmounted.
/// 
/// @return Whether the union's current tag state has value DNewOwnerUnmounted.
/// 
- (BOOL)isDNewOwnerUnmounted;

/// 
/// Retrieves whether the union's current tag state has value
/// DNewOwnerEmailUnverified.
/// 
/// @return Whether the union's current tag state has value
/// DNewOwnerEmailUnverified.
/// 
- (BOOL)isDNewOwnerEmailUnverified;

/// 
/// Retrieves whether the union's current tag state has value TeamFolder.
/// 
/// @return Whether the union's current tag state has value TeamFolder.
/// 
- (BOOL)isTeamFolder;

/// 
/// Retrieves whether the union's current tag state has value NoPermission.
/// 
/// @return Whether the union's current tag state has value NoPermission.
/// 
- (BOOL)isNoPermission;

/// 
/// Retrieves whether the union's current tag state has value Other.
/// 
/// @return Whether the union's current tag state has value Other.
/// 
- (BOOL)isOther;

/// 
/// Retrieves string value of union's current tag state.
/// 
/// @return A human-readable string representing the union's current tag state.
/// 
- (NSString * _Nonnull)tagName;

@end


#pragma mark - Serializer Object

/// 
/// The serialization class for the DBSHARINGTransferFolderError union.
/// 
@interface DBSHARINGTransferFolderErrorSerializer : NSObject 

/// 
/// Serializes DBSHARINGTransferFolderError instances.
/// 
/// @param instance An instance of the DBSHARINGTransferFolderError API object.
/// 
/// @return A json-compatible dictionary representation of the
/// DBSHARINGTransferFolderError API object.
/// 
+ (NSDictionary * _Nonnull)serialize:(DBSHARINGTransferFolderError * _Nonnull)instance;

/// 
/// Deserializes DBSHARINGTransferFolderError instances.
/// 
/// @param dict A json-compatible dictionary representation of the
/// DBSHARINGTransferFolderError API object.
/// 
/// @return An instantiation of the DBSHARINGTransferFolderError object.
/// 
+ (DBSHARINGTransferFolderError * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
