///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>
#import "DBSerializableProtocol.h"

@class DBSHARINGVisibility;

#pragma mark - API Object

/// 
/// The Visibility union.
/// 
/// Who can access a shared link. The most open visibility is public. The
/// default depends on many aspects, such as team and user preferences and
/// shared folder settings.
/// 
/// This class implements the DBSerializable protocol (serialize and deserialize
/// instance methods), which is required for all Obj-C SDK API route objects.
/// 
@interface DBSHARINGVisibility : NSObject <DBSerializable> 

#pragma mark - Instance fields

/// The DBSHARINGVisibilityTag enum type represents the possible tag states with
/// which the DBSHARINGVisibility union can exist.
typedef NS_ENUM(NSInteger, DBSHARINGVisibilityTag) {
    /// Anyone who has received the link can access it. No login required.
    DBSHARINGVisibilityPublic,

    /// Only members of the same team can access the link. Login is required.
    DBSHARINGVisibilityTeamOnly,

    /// A link-specific password is required to access the link. Login is not
    /// required.
    DBSHARINGVisibilityPassword,

    /// Only members of the same team who have the link-specific password can
    /// access the link.
    DBSHARINGVisibilityTeamAndPassword,

    /// Only members of the shared folder containing the linked file can access
    /// the link. Login is required.
    DBSHARINGVisibilitySharedFolderOnly,

    /// (no description).
    DBSHARINGVisibilityOther,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBSHARINGVisibilityTag tag;

#pragma mark - Constructors

/// 
/// Initializes union class with tag state of Public.
/// 
/// About the Public tag state: Anyone who has received the link can access it.
/// No login required.
/// 
/// @return An initialized DBSHARINGVisibility instance.
/// 
- (nonnull instancetype)initWithPublic;

/// 
/// Initializes union class with tag state of TeamOnly.
/// 
/// About the TeamOnly tag state: Only members of the same team can access the
/// link. Login is required.
/// 
/// @return An initialized DBSHARINGVisibility instance.
/// 
- (nonnull instancetype)initWithTeamOnly;

/// 
/// Initializes union class with tag state of Password.
/// 
/// About the Password tag state: A link-specific password is required to access
/// the link. Login is not required.
/// 
/// @return An initialized DBSHARINGVisibility instance.
/// 
- (nonnull instancetype)initWithPassword;

/// 
/// Initializes union class with tag state of TeamAndPassword.
/// 
/// About the TeamAndPassword tag state: Only members of the same team who have
/// the link-specific password can access the link.
/// 
/// @return An initialized DBSHARINGVisibility instance.
/// 
- (nonnull instancetype)initWithTeamAndPassword;

/// 
/// Initializes union class with tag state of SharedFolderOnly.
/// 
/// About the SharedFolderOnly tag state: Only members of the shared folder
/// containing the linked file can access the link. Login is required.
/// 
/// @return An initialized DBSHARINGVisibility instance.
/// 
- (nonnull instancetype)initWithSharedFolderOnly;

/// 
/// Initializes union class with tag state of Other.
/// 
/// @return An initialized DBSHARINGVisibility instance.
/// 
- (nonnull instancetype)initWithOther;

#pragma mark - Tag state methods

/// 
/// Retrieves whether the union's current tag state has value Public.
/// 
/// @return Whether the union's current tag state has value Public.
/// 
- (BOOL)isPublic;

/// 
/// Retrieves whether the union's current tag state has value TeamOnly.
/// 
/// @return Whether the union's current tag state has value TeamOnly.
/// 
- (BOOL)isTeamOnly;

/// 
/// Retrieves whether the union's current tag state has value Password.
/// 
/// @return Whether the union's current tag state has value Password.
/// 
- (BOOL)isPassword;

/// 
/// Retrieves whether the union's current tag state has value TeamAndPassword.
/// 
/// @return Whether the union's current tag state has value TeamAndPassword.
/// 
- (BOOL)isTeamAndPassword;

/// 
/// Retrieves whether the union's current tag state has value SharedFolderOnly.
/// 
/// @return Whether the union's current tag state has value SharedFolderOnly.
/// 
- (BOOL)isSharedFolderOnly;

/// 
/// Retrieves whether the union's current tag state has value Other.
/// 
/// @return Whether the union's current tag state has value Other.
/// 
- (BOOL)isOther;

/// 
/// Retrieves string value of union's current tag state.
/// 
/// @return A human-readable string representing the union's current tag state.
/// 
- (NSString * _Nonnull)tagName;

@end


#pragma mark - Serializer Object

/// 
/// The serialization class for the DBSHARINGVisibility union.
/// 
@interface DBSHARINGVisibilitySerializer : NSObject 

/// 
/// Serializes DBSHARINGVisibility instances.
/// 
/// @param instance An instance of the DBSHARINGVisibility API object.
/// 
/// @return A json-compatible dictionary representation of the
/// DBSHARINGVisibility API object.
/// 
+ (NSDictionary * _Nonnull)serialize:(DBSHARINGVisibility * _Nonnull)instance;

/// 
/// Deserializes DBSHARINGVisibility instances.
/// 
/// @param dict A json-compatible dictionary representation of the
/// DBSHARINGVisibility API object.
/// 
/// @return An instantiation of the DBSHARINGVisibility object.
/// 
+ (DBSHARINGVisibility * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
