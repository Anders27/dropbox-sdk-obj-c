///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGAccessLevel.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGAccessLevel 

- (instancetype)initWithOwner {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGAccessLevelOwner;
    }
    return self;
}

- (instancetype)initWithEditor {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGAccessLevelEditor;
    }
    return self;
}

- (instancetype)initWithViewer {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGAccessLevelViewer;
    }
    return self;
}

- (instancetype)initWithViewerNoComment {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGAccessLevelViewerNoComment;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGAccessLevelOther;
    }
    return self;
}

- (BOOL)isOwner {
    return _tag == DBXSHARINGAccessLevelOwner;
}

- (BOOL)isEditor {
    return _tag == DBXSHARINGAccessLevelEditor;
}

- (BOOL)isViewer {
    return _tag == DBXSHARINGAccessLevelViewer;
}

- (BOOL)isViewerNoComment {
    return _tag == DBXSHARINGAccessLevelViewerNoComment;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGAccessLevelOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGAccessLevelOwner:
           return @"DBXSHARINGAccessLevelOwner";
        case DBXSHARINGAccessLevelEditor:
           return @"DBXSHARINGAccessLevelEditor";
        case DBXSHARINGAccessLevelViewer:
           return @"DBXSHARINGAccessLevelViewer";
        case DBXSHARINGAccessLevelViewerNoComment:
           return @"DBXSHARINGAccessLevelViewerNoComment";
        case DBXSHARINGAccessLevelOther:
           return @"DBXSHARINGAccessLevelOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGAccessLevelSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGAccessLevelSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGAccessLevelSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGAccessLevelSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGAccessLevel *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isOwner]) {
        jsonDict[@".tag"] = @"owner";
    }
    else if ([valueObj isEditor]) {
        jsonDict[@".tag"] = @"editor";
    }
    else if ([valueObj isViewer]) {
        jsonDict[@".tag"] = @"viewer";
    }
    else if ([valueObj isViewerNoComment]) {
        jsonDict[@".tag"] = @"viewer_no_comment";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGAccessLevel *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"owner"]) {
        return [[DBXSHARINGAccessLevel alloc] initWithOwner];
    }
    else if ([tag isEqualToString:@"editor"]) {
        return [[DBXSHARINGAccessLevel alloc] initWithEditor];
    }
    else if ([tag isEqualToString:@"viewer"]) {
        return [[DBXSHARINGAccessLevel alloc] initWithViewer];
    }
    else if ([tag isEqualToString:@"viewer_no_comment"]) {
        return [[DBXSHARINGAccessLevel alloc] initWithViewerNoComment];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGAccessLevel alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
