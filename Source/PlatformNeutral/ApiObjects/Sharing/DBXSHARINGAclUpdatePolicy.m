///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGAclUpdatePolicy.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGAclUpdatePolicy 

- (instancetype)initWithOwner {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAclUpdatePolicyOwner;
    }
    return self;
}

- (instancetype)initWithEditors {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAclUpdatePolicyEditors;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAclUpdatePolicyOther;
    }
    return self;
}

- (BOOL)isOwner {
    return _tag == DBXSHARINGAclUpdatePolicyOwner;
}

- (BOOL)isEditors {
    return _tag == DBXSHARINGAclUpdatePolicyEditors;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGAclUpdatePolicyOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGAclUpdatePolicyOwner:
           return @"DBXSHARINGAclUpdatePolicyOwner";
        case DBXSHARINGAclUpdatePolicyEditors:
           return @"DBXSHARINGAclUpdatePolicyEditors";
        case DBXSHARINGAclUpdatePolicyOther:
           return @"DBXSHARINGAclUpdatePolicyOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGAclUpdatePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGAclUpdatePolicySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGAclUpdatePolicySerializer serialize:self] description];
}

@end


@implementation DBXSHARINGAclUpdatePolicySerializer 

+ (NSDictionary *)serialize:(DBXSHARINGAclUpdatePolicy *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isOwner]) {
        jsonDict[@".tag"] = @"owner";
    }
    else if ([valueObj isEditors]) {
        jsonDict[@".tag"] = @"editors";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGAclUpdatePolicy *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"owner"]) {
        return [[DBXSHARINGAclUpdatePolicy alloc] initWithOwner];
    }
    else if ([tag isEqualToString:@"editors"]) {
        return [[DBXSHARINGAclUpdatePolicy alloc] initWithEditors];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGAclUpdatePolicy alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
