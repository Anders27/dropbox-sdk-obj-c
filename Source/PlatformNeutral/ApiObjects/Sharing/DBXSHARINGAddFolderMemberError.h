///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>
#import "DBXSerializableProtocol.h"

@class DBXSHARINGAddFolderMemberError;
@class DBXSHARINGAddMemberSelectorError;
@class DBXSHARINGSharedFolderAccessError;

/// 
/// The AddFolderMemberError union.
/// 
/// This class implements the `DBXSerializable` protocol (`serialize` and
/// `deserialize` instance methods), which is required for all Obj-C SDK API
/// route objects.
/// 
@interface DBXSHARINGAddFolderMemberError : NSObject <DBXSerializable> 

/// The `DBXSHARINGAddFolderMemberErrorTag` enum type represents the possible
/// tag states with which the `DBXSHARINGAddFolderMemberError` union can exist.
typedef NS_ENUM(NSInteger, DBXSHARINGAddFolderMemberErrorTag) {
    /// Unable to access shared folder.
    DBXSHARINGAddFolderMemberErrorAccessError,

    /// The current user's e-mail address is unverified.
    DBXSHARINGAddFolderMemberErrorEmailUnverified,

    /// members in AddFolderMemberArg contains a bad invitation recipient.
    DBXSHARINGAddFolderMemberErrorBadMember,

    /// Your team policy does not allow sharing outside of the team.
    DBXSHARINGAddFolderMemberErrorCantShareOutsideTeam,

    /// The value is the member limit that was reached.
    DBXSHARINGAddFolderMemberErrorTooManyMembers,

    /// The value is the pending invite limit that was reached.
    DBXSHARINGAddFolderMemberErrorTooManyPendingInvites,

    /// The current user has hit the limit of invites they can send per day. Try
    /// again in 24 hours.
    DBXSHARINGAddFolderMemberErrorRateLimit,

    /// The current user is trying to share with too many people at once.
    DBXSHARINGAddFolderMemberErrorTooManyInvitees,

    /// The current user's account doesn't support this action. An example of
    /// this is when adding a read-only member. This action can only be
    /// performed by users that have upgraded to a Pro or Business plan.
    DBXSHARINGAddFolderMemberErrorInsufficientPlan,

    /// This action cannot be performed on a team shared folder.
    DBXSHARINGAddFolderMemberErrorTeamFolder,

    /// The current user does not have permission to perform this action.
    DBXSHARINGAddFolderMemberErrorNoPermission,

    /// (no description).
    DBXSHARINGAddFolderMemberErrorOther,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBXSHARINGAddFolderMemberErrorTag tag;

/// Unable to access shared folder.
@property (nonatomic, readonly) DBXSHARINGSharedFolderAccessError * _Nonnull accessError;

/// members in AddFolderMemberArg contains a bad invitation recipient.
@property (nonatomic, readonly) DBXSHARINGAddMemberSelectorError * _Nonnull badMember;

/// The value is the member limit that was reached.
@property (nonatomic, readonly, copy) NSNumber * _Nonnull tooManyMembers;

/// The value is the pending invite limit that was reached.
@property (nonatomic, readonly, copy) NSNumber * _Nonnull tooManyPendingInvites;

/// 
/// Initializes union class with tag state of `AccessError`.
/// 
/// About the `AccessError` tag state: Unable to access shared folder.
/// 
/// - parameter accessError: Unable to access shared folder.
/// 
/// - returns: An initialized `DBXSHARINGAddFolderMemberError` instance.
/// 
- (nonnull instancetype)initWithAccessError:(DBXSHARINGSharedFolderAccessError * _Nonnull)accessError;

/// 
/// Initializes union class with tag state of `EmailUnverified`.
/// 
/// About the `EmailUnverified` tag state: The current user's e-mail address is
/// unverified.
/// 
/// - returns: An initialized `DBXSHARINGAddFolderMemberError` instance.
/// 
- (nonnull instancetype)initWithEmailUnverified;

/// 
/// Initializes union class with tag state of `BadMember`.
/// 
/// About the `BadMember` tag state: :field:`AddFolderMemberArg.members`
/// contains a bad invitation recipient.
/// 
/// - parameter badMember: :field:`AddFolderMemberArg.members` contains a bad
/// invitation recipient.
/// 
/// - returns: An initialized `DBXSHARINGAddFolderMemberError` instance.
/// 
- (nonnull instancetype)initWithBadMember:(DBXSHARINGAddMemberSelectorError * _Nonnull)badMember;

/// 
/// Initializes union class with tag state of `CantShareOutsideTeam`.
/// 
/// About the `CantShareOutsideTeam` tag state: Your team policy does not allow
/// sharing outside of the team.
/// 
/// - returns: An initialized `DBXSHARINGAddFolderMemberError` instance.
/// 
- (nonnull instancetype)initWithCantShareOutsideTeam;

/// 
/// Initializes union class with tag state of `TooManyMembers`.
/// 
/// About the `TooManyMembers` tag state: The value is the member limit that was
/// reached.
/// 
/// - parameter tooManyMembers: The value is the member limit that was reached.
/// 
/// - returns: An initialized `DBXSHARINGAddFolderMemberError` instance.
/// 
- (nonnull instancetype)initWithTooManyMembers:(NSNumber * _Nonnull)tooManyMembers;

/// 
/// Initializes union class with tag state of `TooManyPendingInvites`.
/// 
/// About the `TooManyPendingInvites` tag state: The value is the pending invite
/// limit that was reached.
/// 
/// - parameter tooManyPendingInvites: The value is the pending invite limit
/// that was reached.
/// 
/// - returns: An initialized `DBXSHARINGAddFolderMemberError` instance.
/// 
- (nonnull instancetype)initWithTooManyPendingInvites:(NSNumber * _Nonnull)tooManyPendingInvites;

/// 
/// Initializes union class with tag state of `RateLimit`.
/// 
/// About the `RateLimit` tag state: The current user has hit the limit of
/// invites they can send per day. Try again in 24 hours.
/// 
/// - returns: An initialized `DBXSHARINGAddFolderMemberError` instance.
/// 
- (nonnull instancetype)initWithRateLimit;

/// 
/// Initializes union class with tag state of `TooManyInvitees`.
/// 
/// About the `TooManyInvitees` tag state: The current user is trying to share
/// with too many people at once.
/// 
/// - returns: An initialized `DBXSHARINGAddFolderMemberError` instance.
/// 
- (nonnull instancetype)initWithTooManyInvitees;

/// 
/// Initializes union class with tag state of `InsufficientPlan`.
/// 
/// About the `InsufficientPlan` tag state: The current user's account doesn't
/// support this action. An example of this is when adding a read-only member.
/// This action can only be performed by users that have upgraded to a Pro or
/// Business plan.
/// 
/// - returns: An initialized `DBXSHARINGAddFolderMemberError` instance.
/// 
- (nonnull instancetype)initWithInsufficientPlan;

/// 
/// Initializes union class with tag state of `TeamFolder`.
/// 
/// About the `TeamFolder` tag state: This action cannot be performed on a team
/// shared folder.
/// 
/// - returns: An initialized `DBXSHARINGAddFolderMemberError` instance.
/// 
- (nonnull instancetype)initWithTeamFolder;

/// 
/// Initializes union class with tag state of `NoPermission`.
/// 
/// About the `NoPermission` tag state: The current user does not have
/// permission to perform this action.
/// 
/// - returns: An initialized `DBXSHARINGAddFolderMemberError` instance.
/// 
- (nonnull instancetype)initWithNoPermission;

/// 
/// Initializes union class with tag state of `Other`.
/// 
/// - returns: An initialized `DBXSHARINGAddFolderMemberError` instance.
/// 
- (nonnull instancetype)initWithOther;

/// 
/// Retrieves whether the union's current tag state has value `AccessError`.
/// 
/// - returns: Whether the union's current tag state has value `AccessError`.
/// 
- (BOOL)isAccessError;

/// 
/// Retrieves whether the union's current tag state has value `EmailUnverified`.
/// 
/// - returns: Whether the union's current tag state has value
/// `EmailUnverified`.
/// 
- (BOOL)isEmailUnverified;

/// 
/// Retrieves whether the union's current tag state has value `BadMember`.
/// 
/// - returns: Whether the union's current tag state has value `BadMember`.
/// 
- (BOOL)isBadMember;

/// 
/// Retrieves whether the union's current tag state has value
/// `CantShareOutsideTeam`.
/// 
/// - returns: Whether the union's current tag state has value
/// `CantShareOutsideTeam`.
/// 
- (BOOL)isCantShareOutsideTeam;

/// 
/// Retrieves whether the union's current tag state has value `TooManyMembers`.
/// 
/// - returns: Whether the union's current tag state has value `TooManyMembers`.
/// 
- (BOOL)isTooManyMembers;

/// 
/// Retrieves whether the union's current tag state has value
/// `TooManyPendingInvites`.
/// 
/// - returns: Whether the union's current tag state has value
/// `TooManyPendingInvites`.
/// 
- (BOOL)isTooManyPendingInvites;

/// 
/// Retrieves whether the union's current tag state has value `RateLimit`.
/// 
/// - returns: Whether the union's current tag state has value `RateLimit`.
/// 
- (BOOL)isRateLimit;

/// 
/// Retrieves whether the union's current tag state has value `TooManyInvitees`.
/// 
/// - returns: Whether the union's current tag state has value
/// `TooManyInvitees`.
/// 
- (BOOL)isTooManyInvitees;

/// 
/// Retrieves whether the union's current tag state has value
/// `InsufficientPlan`.
/// 
/// - returns: Whether the union's current tag state has value
/// `InsufficientPlan`.
/// 
- (BOOL)isInsufficientPlan;

/// 
/// Retrieves whether the union's current tag state has value `TeamFolder`.
/// 
/// - returns: Whether the union's current tag state has value `TeamFolder`.
/// 
- (BOOL)isTeamFolder;

/// 
/// Retrieves whether the union's current tag state has value `NoPermission`.
/// 
/// - returns: Whether the union's current tag state has value `NoPermission`.
/// 
- (BOOL)isNoPermission;

/// 
/// Retrieves whether the union's current tag state has value `Other`.
/// 
/// - returns: Whether the union's current tag state has value `Other`.
/// 
- (BOOL)isOther;

/// 
/// Retrieves string value of union's current tag state.
/// 
/// - returns: A human-readable string representing the union's current tag
/// state.
/// 
- (NSString * _Nonnull)getTagName;

@end


/// 
/// The serialization class for the `DBXSHARINGAddFolderMemberError` union.
/// 
@interface DBXSHARINGAddFolderMemberErrorSerializer : NSObject 

/// 
/// Serializes `DBXSHARINGAddFolderMemberError` instances.
/// 
///  - parameter instance: An instance of the `DBXSHARINGAddFolderMemberError`
/// API object.
/// 
///  - returns: A json-compatible dictionary representation of the
/// `DBXSHARINGAddFolderMemberError` API object.
/// 
+ (NSDictionary * _Nonnull)serialize:(DBXSHARINGAddFolderMemberError * _Nonnull)instance;

/// 
/// Deserializes `DBXSHARINGAddFolderMemberError` instances.
/// 
///  - parameter dict: A json-compatible dictionary representation of the
/// `DBXSHARINGAddFolderMemberError` API object.
/// 
///  - returns: An instantiation of the `DBXSHARINGAddFolderMemberError` object.
/// 
+ (DBXSHARINGAddFolderMemberError * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
