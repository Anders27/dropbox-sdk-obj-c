///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGAddFolderMemberError.h"
#import "DBXSHARINGAddMemberSelectorError.h"
#import "DBXSHARINGSharedFolderAccessError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGAddFolderMemberError 

@synthesize accessError = _accessError;
@synthesize badMember = _badMember;
@synthesize tooManyMembers = _tooManyMembers;
@synthesize tooManyPendingInvites = _tooManyPendingInvites;

- (instancetype)initWithAccessError:(DBXSHARINGSharedFolderAccessError *)accessError {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAddFolderMemberErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithEmailUnverified {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAddFolderMemberErrorEmailUnverified;
    }
    return self;
}

- (instancetype)initWithBadMember:(DBXSHARINGAddMemberSelectorError *)badMember {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAddFolderMemberErrorBadMember;
        _badMember = badMember;
    }
    return self;
}

- (instancetype)initWithCantShareOutsideTeam {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAddFolderMemberErrorCantShareOutsideTeam;
    }
    return self;
}

- (instancetype)initWithTooManyMembers:(NSNumber *)tooManyMembers {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAddFolderMemberErrorTooManyMembers;
        _tooManyMembers = tooManyMembers;
    }
    return self;
}

- (instancetype)initWithTooManyPendingInvites:(NSNumber *)tooManyPendingInvites {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAddFolderMemberErrorTooManyPendingInvites;
        _tooManyPendingInvites = tooManyPendingInvites;
    }
    return self;
}

- (instancetype)initWithRateLimit {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAddFolderMemberErrorRateLimit;
    }
    return self;
}

- (instancetype)initWithTooManyInvitees {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAddFolderMemberErrorTooManyInvitees;
    }
    return self;
}

- (instancetype)initWithInsufficientPlan {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAddFolderMemberErrorInsufficientPlan;
    }
    return self;
}

- (instancetype)initWithTeamFolder {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAddFolderMemberErrorTeamFolder;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAddFolderMemberErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGAddFolderMemberErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == DBXSHARINGAddFolderMemberErrorAccessError;
}

- (BOOL)isEmailUnverified {
    return _tag == DBXSHARINGAddFolderMemberErrorEmailUnverified;
}

- (BOOL)isBadMember {
    return _tag == DBXSHARINGAddFolderMemberErrorBadMember;
}

- (BOOL)isCantShareOutsideTeam {
    return _tag == DBXSHARINGAddFolderMemberErrorCantShareOutsideTeam;
}

- (BOOL)isTooManyMembers {
    return _tag == DBXSHARINGAddFolderMemberErrorTooManyMembers;
}

- (BOOL)isTooManyPendingInvites {
    return _tag == DBXSHARINGAddFolderMemberErrorTooManyPendingInvites;
}

- (BOOL)isRateLimit {
    return _tag == DBXSHARINGAddFolderMemberErrorRateLimit;
}

- (BOOL)isTooManyInvitees {
    return _tag == DBXSHARINGAddFolderMemberErrorTooManyInvitees;
}

- (BOOL)isInsufficientPlan {
    return _tag == DBXSHARINGAddFolderMemberErrorInsufficientPlan;
}

- (BOOL)isTeamFolder {
    return _tag == DBXSHARINGAddFolderMemberErrorTeamFolder;
}

- (BOOL)isNoPermission {
    return _tag == DBXSHARINGAddFolderMemberErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGAddFolderMemberErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGAddFolderMemberErrorAccessError:
           return @"DBXSHARINGAddFolderMemberErrorAccessError";
        case DBXSHARINGAddFolderMemberErrorEmailUnverified:
           return @"DBXSHARINGAddFolderMemberErrorEmailUnverified";
        case DBXSHARINGAddFolderMemberErrorBadMember:
           return @"DBXSHARINGAddFolderMemberErrorBadMember";
        case DBXSHARINGAddFolderMemberErrorCantShareOutsideTeam:
           return @"DBXSHARINGAddFolderMemberErrorCantShareOutsideTeam";
        case DBXSHARINGAddFolderMemberErrorTooManyMembers:
           return @"DBXSHARINGAddFolderMemberErrorTooManyMembers";
        case DBXSHARINGAddFolderMemberErrorTooManyPendingInvites:
           return @"DBXSHARINGAddFolderMemberErrorTooManyPendingInvites";
        case DBXSHARINGAddFolderMemberErrorRateLimit:
           return @"DBXSHARINGAddFolderMemberErrorRateLimit";
        case DBXSHARINGAddFolderMemberErrorTooManyInvitees:
           return @"DBXSHARINGAddFolderMemberErrorTooManyInvitees";
        case DBXSHARINGAddFolderMemberErrorInsufficientPlan:
           return @"DBXSHARINGAddFolderMemberErrorInsufficientPlan";
        case DBXSHARINGAddFolderMemberErrorTeamFolder:
           return @"DBXSHARINGAddFolderMemberErrorTeamFolder";
        case DBXSHARINGAddFolderMemberErrorNoPermission:
           return @"DBXSHARINGAddFolderMemberErrorNoPermission";
        case DBXSHARINGAddFolderMemberErrorOther:
           return @"DBXSHARINGAddFolderMemberErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharedFolderAccessError *)accessError {
    if (![self isAccessError]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGAddFolderMemberErrorAccessError`, but was %@.", [self getTagName]];
    }
    return _accessError;
}

- (DBXSHARINGAddMemberSelectorError *)badMember {
    if (![self isBadMember]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGAddFolderMemberErrorBadMember`, but was %@.", [self getTagName]];
    }
    return _badMember;
}

- (NSNumber *)tooManyMembers {
    if (![self isTooManyMembers]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGAddFolderMemberErrorTooManyMembers`, but was %@.", [self getTagName]];
    }
    return _tooManyMembers;
}

- (NSNumber *)tooManyPendingInvites {
    if (![self isTooManyPendingInvites]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGAddFolderMemberErrorTooManyPendingInvites`, but was %@.", [self getTagName]];
    }
    return _tooManyPendingInvites;
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGAddFolderMemberErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGAddFolderMemberErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGAddFolderMemberErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGAddFolderMemberErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGAddFolderMemberError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DBXSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isEmailUnverified]) {
        jsonDict[@".tag"] = @"email_unverified";
    }
    else if ([valueObj isBadMember]) {
        jsonDict = [[DBXSHARINGAddMemberSelectorErrorSerializer serialize:valueObj.badMember] mutableCopy];
        jsonDict[@".tag"] = @"bad_member";
    }
    else if ([valueObj isCantShareOutsideTeam]) {
        jsonDict[@".tag"] = @"cant_share_outside_team";
    }
    else if ([valueObj isTooManyMembers]) {
        jsonDict[@"too_many_members"] = valueObj.tooManyMembers;
        jsonDict[@".tag"] = @"too_many_members";
    }
    else if ([valueObj isTooManyPendingInvites]) {
        jsonDict[@"too_many_pending_invites"] = valueObj.tooManyPendingInvites;
        jsonDict[@".tag"] = @"too_many_pending_invites";
    }
    else if ([valueObj isRateLimit]) {
        jsonDict[@".tag"] = @"rate_limit";
    }
    else if ([valueObj isTooManyInvitees]) {
        jsonDict[@".tag"] = @"too_many_invitees";
    }
    else if ([valueObj isInsufficientPlan]) {
        jsonDict[@".tag"] = @"insufficient_plan";
    }
    else if ([valueObj isTeamFolder]) {
        jsonDict[@".tag"] = @"team_folder";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGAddFolderMemberError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DBXSHARINGSharedFolderAccessError *accessError = [DBXSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DBXSHARINGAddFolderMemberError alloc] initWithAccessError:accessError];
    }
    else if ([tag isEqualToString:@"email_unverified"]) {
        return [[DBXSHARINGAddFolderMemberError alloc] initWithEmailUnverified];
    }
    else if ([tag isEqualToString:@"bad_member"]) {
        DBXSHARINGAddMemberSelectorError *badMember = [DBXSHARINGAddMemberSelectorErrorSerializer deserialize:valueDict[@"bad_member"]];
        return [[DBXSHARINGAddFolderMemberError alloc] initWithBadMember:badMember];
    }
    else if ([tag isEqualToString:@"cant_share_outside_team"]) {
        return [[DBXSHARINGAddFolderMemberError alloc] initWithCantShareOutsideTeam];
    }
    else if ([tag isEqualToString:@"too_many_members"]) {
        NSNumber *tooManyMembers = valueDict[@"too_many_members"];
        return [[DBXSHARINGAddFolderMemberError alloc] initWithTooManyMembers:tooManyMembers];
    }
    else if ([tag isEqualToString:@"too_many_pending_invites"]) {
        NSNumber *tooManyPendingInvites = valueDict[@"too_many_pending_invites"];
        return [[DBXSHARINGAddFolderMemberError alloc] initWithTooManyPendingInvites:tooManyPendingInvites];
    }
    else if ([tag isEqualToString:@"rate_limit"]) {
        return [[DBXSHARINGAddFolderMemberError alloc] initWithRateLimit];
    }
    else if ([tag isEqualToString:@"too_many_invitees"]) {
        return [[DBXSHARINGAddFolderMemberError alloc] initWithTooManyInvitees];
    }
    else if ([tag isEqualToString:@"insufficient_plan"]) {
        return [[DBXSHARINGAddFolderMemberError alloc] initWithInsufficientPlan];
    }
    else if ([tag isEqualToString:@"team_folder"]) {
        return [[DBXSHARINGAddFolderMemberError alloc] initWithTeamFolder];
    }
    else if ([tag isEqualToString:@"no_permission"]) {
        return [[DBXSHARINGAddFolderMemberError alloc] initWithNoPermission];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGAddFolderMemberError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
