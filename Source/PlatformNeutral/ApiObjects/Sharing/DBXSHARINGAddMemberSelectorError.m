///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGAddMemberSelectorError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGAddMemberSelectorError 

@synthesize invalidDropboxId = _invalidDropboxId;
@synthesize invalidEmail = _invalidEmail;
@synthesize unverifiedDropboxId = _unverifiedDropboxId;

- (instancetype)initWithAutomaticGroup {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGAddMemberSelectorErrorAutomaticGroup;
    }
    return self;
}

- (instancetype)initWithInvalidDropboxId:(NSString *)invalidDropboxId {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGAddMemberSelectorErrorInvalidDropboxId;
        _invalidDropboxId = invalidDropboxId;
    }
    return self;
}

- (instancetype)initWithInvalidEmail:(NSString *)invalidEmail {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGAddMemberSelectorErrorInvalidEmail;
        _invalidEmail = invalidEmail;
    }
    return self;
}

- (instancetype)initWithUnverifiedDropboxId:(NSString *)unverifiedDropboxId {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGAddMemberSelectorErrorUnverifiedDropboxId;
        _unverifiedDropboxId = unverifiedDropboxId;
    }
    return self;
}

- (instancetype)initWithGroupDeleted {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGAddMemberSelectorErrorGroupDeleted;
    }
    return self;
}

- (instancetype)initWithGroupNotOnTeam {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGAddMemberSelectorErrorGroupNotOnTeam;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGAddMemberSelectorErrorOther;
    }
    return self;
}

- (BOOL)isAutomaticGroup {
    return _tag == DBXSHARINGAddMemberSelectorErrorAutomaticGroup;
}

- (BOOL)isInvalidDropboxId {
    return _tag == DBXSHARINGAddMemberSelectorErrorInvalidDropboxId;
}

- (BOOL)isInvalidEmail {
    return _tag == DBXSHARINGAddMemberSelectorErrorInvalidEmail;
}

- (BOOL)isUnverifiedDropboxId {
    return _tag == DBXSHARINGAddMemberSelectorErrorUnverifiedDropboxId;
}

- (BOOL)isGroupDeleted {
    return _tag == DBXSHARINGAddMemberSelectorErrorGroupDeleted;
}

- (BOOL)isGroupNotOnTeam {
    return _tag == DBXSHARINGAddMemberSelectorErrorGroupNotOnTeam;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGAddMemberSelectorErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGAddMemberSelectorErrorAutomaticGroup:
           return @"DBXSHARINGAddMemberSelectorErrorAutomaticGroup";
        case DBXSHARINGAddMemberSelectorErrorInvalidDropboxId:
           return @"DBXSHARINGAddMemberSelectorErrorInvalidDropboxId";
        case DBXSHARINGAddMemberSelectorErrorInvalidEmail:
           return @"DBXSHARINGAddMemberSelectorErrorInvalidEmail";
        case DBXSHARINGAddMemberSelectorErrorUnverifiedDropboxId:
           return @"DBXSHARINGAddMemberSelectorErrorUnverifiedDropboxId";
        case DBXSHARINGAddMemberSelectorErrorGroupDeleted:
           return @"DBXSHARINGAddMemberSelectorErrorGroupDeleted";
        case DBXSHARINGAddMemberSelectorErrorGroupNotOnTeam:
           return @"DBXSHARINGAddMemberSelectorErrorGroupNotOnTeam";
        case DBXSHARINGAddMemberSelectorErrorOther:
           return @"DBXSHARINGAddMemberSelectorErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSString *)invalidDropboxId {
    if (_tag != DBXSHARINGAddMemberSelectorErrorInvalidDropboxId) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGAddMemberSelectorErrorInvalidDropboxId`, but was %@.", [self getTagName]];
    }
    return _invalidDropboxId;
}

- (NSString *)invalidEmail {
    if (_tag != DBXSHARINGAddMemberSelectorErrorInvalidEmail) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGAddMemberSelectorErrorInvalidEmail`, but was %@.", [self getTagName]];
    }
    return _invalidEmail;
}

- (NSString *)unverifiedDropboxId {
    if (_tag != DBXSHARINGAddMemberSelectorErrorUnverifiedDropboxId) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGAddMemberSelectorErrorUnverifiedDropboxId`, but was %@.", [self getTagName]];
    }
    return _unverifiedDropboxId;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGAddMemberSelectorErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGAddMemberSelectorErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGAddMemberSelectorErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGAddMemberSelectorErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGAddMemberSelectorError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAutomaticGroup]) {
        jsonDict[@".tag"] = @"automatic_group";
    }
    else if ([valueObj isInvalidDropboxId]) {
        jsonDict[@"invalid_dropbox_id"] = valueObj.invalidDropboxId;
        jsonDict[@".tag"] = @"invalid_dropbox_id";
    }
    else if ([valueObj isInvalidEmail]) {
        jsonDict[@"invalid_email"] = valueObj.invalidEmail;
        jsonDict[@".tag"] = @"invalid_email";
    }
    else if ([valueObj isUnverifiedDropboxId]) {
        jsonDict[@"unverified_dropbox_id"] = valueObj.unverifiedDropboxId;
        jsonDict[@".tag"] = @"unverified_dropbox_id";
    }
    else if ([valueObj isGroupDeleted]) {
        jsonDict[@".tag"] = @"group_deleted";
    }
    else if ([valueObj isGroupNotOnTeam]) {
        jsonDict[@".tag"] = @"group_not_on_team";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGAddMemberSelectorError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"automatic_group"]) {
        return [[DBXSHARINGAddMemberSelectorError alloc] initWithAutomaticGroup];
    }
    else if ([tag isEqualToString:@"invalid_dropbox_id"]) {
        NSString *invalidDropboxId = valueDict[@"invalid_dropbox_id"];
        return [[DBXSHARINGAddMemberSelectorError alloc] initWithInvalidDropboxId:invalidDropboxId];
    }
    else if ([tag isEqualToString:@"invalid_email"]) {
        NSString *invalidEmail = valueDict[@"invalid_email"];
        return [[DBXSHARINGAddMemberSelectorError alloc] initWithInvalidEmail:invalidEmail];
    }
    else if ([tag isEqualToString:@"unverified_dropbox_id"]) {
        NSString *unverifiedDropboxId = valueDict[@"unverified_dropbox_id"];
        return [[DBXSHARINGAddMemberSelectorError alloc] initWithUnverifiedDropboxId:unverifiedDropboxId];
    }
    else if ([tag isEqualToString:@"group_deleted"]) {
        return [[DBXSHARINGAddMemberSelectorError alloc] initWithGroupDeleted];
    }
    else if ([tag isEqualToString:@"group_not_on_team"]) {
        return [[DBXSHARINGAddMemberSelectorError alloc] initWithGroupNotOnTeam];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGAddMemberSelectorError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
