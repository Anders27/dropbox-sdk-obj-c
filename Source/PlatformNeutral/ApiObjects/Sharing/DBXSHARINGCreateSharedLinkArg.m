///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGCreateSharedLinkArg.h"
#import "DBXSHARINGPendingUploadMode.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGCreateSharedLinkArg 

- (instancetype)initWithPath:(NSString *)path shortUrl:(NSNumber *)shortUrl pendingUpload:(DBXSHARINGPendingUploadMode *)pendingUpload {

    self = [super init];
    if (self) {
        _path = path;
        _shortUrl = shortUrl ?: @NO;
        _pendingUpload = pendingUpload;
    }
    return self;
}

- (instancetype)initWithPath:(NSString *)path {
    return [self initWithPath:path shortUrl:nil pendingUpload:nil];
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGCreateSharedLinkArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGCreateSharedLinkArgSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGCreateSharedLinkArgSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGCreateSharedLinkArgSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGCreateSharedLinkArg *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    jsonDict[@"path"] = valueObj.path;
    jsonDict[@"short_url"] = valueObj.shortUrl;
    if (valueObj.pendingUpload) {
        jsonDict[@"pending_upload"] = [DBXSHARINGPendingUploadModeSerializer serialize:valueObj.pendingUpload];
    }

    return jsonDict;
}

+ (DBXSHARINGCreateSharedLinkArg *)deserialize:(NSDictionary *)valueDict {
    NSString *path = valueDict[@"path"];
    NSNumber *shortUrl = valueDict[@"short_url"];
    DBXSHARINGPendingUploadMode *pendingUpload = valueDict[@"pending_upload"] ? [DBXSHARINGPendingUploadModeSerializer deserialize:valueDict[@"pending_upload"]] : nil;

    return [[DBXSHARINGCreateSharedLinkArg alloc] initWithPath:path shortUrl:shortUrl pendingUpload:pendingUpload];
}

@end
