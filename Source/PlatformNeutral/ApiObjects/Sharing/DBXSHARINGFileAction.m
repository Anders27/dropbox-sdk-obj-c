///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGFileAction.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGFileAction 

- (instancetype)initWithEditContents {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGFileActionEditContents;
    }
    return self;
}

- (instancetype)initWithInviteViewer {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGFileActionInviteViewer;
    }
    return self;
}

- (instancetype)initWithInviteViewerNoComment {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGFileActionInviteViewerNoComment;
    }
    return self;
}

- (instancetype)initWithUnshare {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGFileActionUnshare;
    }
    return self;
}

- (instancetype)initWithRelinquishMembership {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGFileActionRelinquishMembership;
    }
    return self;
}

- (instancetype)initWithShareLink {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGFileActionShareLink;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGFileActionOther;
    }
    return self;
}

- (BOOL)isEditContents {
    return _tag == DBXSHARINGFileActionEditContents;
}

- (BOOL)isInviteViewer {
    return _tag == DBXSHARINGFileActionInviteViewer;
}

- (BOOL)isInviteViewerNoComment {
    return _tag == DBXSHARINGFileActionInviteViewerNoComment;
}

- (BOOL)isUnshare {
    return _tag == DBXSHARINGFileActionUnshare;
}

- (BOOL)isRelinquishMembership {
    return _tag == DBXSHARINGFileActionRelinquishMembership;
}

- (BOOL)isShareLink {
    return _tag == DBXSHARINGFileActionShareLink;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGFileActionOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGFileActionEditContents:
           return @"DBXSHARINGFileActionEditContents";
        case DBXSHARINGFileActionInviteViewer:
           return @"DBXSHARINGFileActionInviteViewer";
        case DBXSHARINGFileActionInviteViewerNoComment:
           return @"DBXSHARINGFileActionInviteViewerNoComment";
        case DBXSHARINGFileActionUnshare:
           return @"DBXSHARINGFileActionUnshare";
        case DBXSHARINGFileActionRelinquishMembership:
           return @"DBXSHARINGFileActionRelinquishMembership";
        case DBXSHARINGFileActionShareLink:
           return @"DBXSHARINGFileActionShareLink";
        case DBXSHARINGFileActionOther:
           return @"DBXSHARINGFileActionOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGFileActionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGFileActionSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGFileActionSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGFileActionSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGFileAction *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isEditContents]) {
        jsonDict[@".tag"] = @"edit_contents";
    }
    else if ([valueObj isInviteViewer]) {
        jsonDict[@".tag"] = @"invite_viewer";
    }
    else if ([valueObj isInviteViewerNoComment]) {
        jsonDict[@".tag"] = @"invite_viewer_no_comment";
    }
    else if ([valueObj isUnshare]) {
        jsonDict[@".tag"] = @"unshare";
    }
    else if ([valueObj isRelinquishMembership]) {
        jsonDict[@".tag"] = @"relinquish_membership";
    }
    else if ([valueObj isShareLink]) {
        jsonDict[@".tag"] = @"share_link";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGFileAction *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"edit_contents"]) {
        return [[DBXSHARINGFileAction alloc] initWithEditContents];
    }
    else if ([tag isEqualToString:@"invite_viewer"]) {
        return [[DBXSHARINGFileAction alloc] initWithInviteViewer];
    }
    else if ([tag isEqualToString:@"invite_viewer_no_comment"]) {
        return [[DBXSHARINGFileAction alloc] initWithInviteViewerNoComment];
    }
    else if ([tag isEqualToString:@"unshare"]) {
        return [[DBXSHARINGFileAction alloc] initWithUnshare];
    }
    else if ([tag isEqualToString:@"relinquish_membership"]) {
        return [[DBXSHARINGFileAction alloc] initWithRelinquishMembership];
    }
    else if ([tag isEqualToString:@"share_link"]) {
        return [[DBXSHARINGFileAction alloc] initWithShareLink];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGFileAction alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
