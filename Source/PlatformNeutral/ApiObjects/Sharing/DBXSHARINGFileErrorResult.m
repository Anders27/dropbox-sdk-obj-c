///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGFileErrorResult.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGFileErrorResult 

@synthesize fileNotFoundError = _fileNotFoundError;
@synthesize invalidFileActionError = _invalidFileActionError;
@synthesize permissionDeniedError = _permissionDeniedError;

- (instancetype)initWithFileNotFoundError:(NSString *)fileNotFoundError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGFileErrorResultFileNotFoundError;
        _fileNotFoundError = fileNotFoundError;
    }
    return self;
}

- (instancetype)initWithInvalidFileActionError:(NSString *)invalidFileActionError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGFileErrorResultInvalidFileActionError;
        _invalidFileActionError = invalidFileActionError;
    }
    return self;
}

- (instancetype)initWithPermissionDeniedError:(NSString *)permissionDeniedError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGFileErrorResultPermissionDeniedError;
        _permissionDeniedError = permissionDeniedError;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGFileErrorResultOther;
    }
    return self;
}

- (BOOL)isFileNotFoundError {
    return _tag == DBXSHARINGFileErrorResultFileNotFoundError;
}

- (BOOL)isInvalidFileActionError {
    return _tag == DBXSHARINGFileErrorResultInvalidFileActionError;
}

- (BOOL)isPermissionDeniedError {
    return _tag == DBXSHARINGFileErrorResultPermissionDeniedError;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGFileErrorResultOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGFileErrorResultFileNotFoundError:
           return @"DBXSHARINGFileErrorResultFileNotFoundError";
        case DBXSHARINGFileErrorResultInvalidFileActionError:
           return @"DBXSHARINGFileErrorResultInvalidFileActionError";
        case DBXSHARINGFileErrorResultPermissionDeniedError:
           return @"DBXSHARINGFileErrorResultPermissionDeniedError";
        case DBXSHARINGFileErrorResultOther:
           return @"DBXSHARINGFileErrorResultOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSString *)fileNotFoundError {
    if (_tag != DBXSHARINGFileErrorResultFileNotFoundError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGFileErrorResultFileNotFoundError`, but was %@.", [self getTagName]];
    }
    return _fileNotFoundError;
}

- (NSString *)invalidFileActionError {
    if (_tag != DBXSHARINGFileErrorResultInvalidFileActionError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGFileErrorResultInvalidFileActionError`, but was %@.", [self getTagName]];
    }
    return _invalidFileActionError;
}

- (NSString *)permissionDeniedError {
    if (_tag != DBXSHARINGFileErrorResultPermissionDeniedError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGFileErrorResultPermissionDeniedError`, but was %@.", [self getTagName]];
    }
    return _permissionDeniedError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGFileErrorResultSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGFileErrorResultSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGFileErrorResultSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGFileErrorResultSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGFileErrorResult *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isFileNotFoundError]) {
        jsonDict[@"file_not_found_error"] = valueObj.fileNotFoundError;
        jsonDict[@".tag"] = @"file_not_found_error";
    }
    else if ([valueObj isInvalidFileActionError]) {
        jsonDict[@"invalid_file_action_error"] = valueObj.invalidFileActionError;
        jsonDict[@".tag"] = @"invalid_file_action_error";
    }
    else if ([valueObj isPermissionDeniedError]) {
        jsonDict[@"permission_denied_error"] = valueObj.permissionDeniedError;
        jsonDict[@".tag"] = @"permission_denied_error";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGFileErrorResult *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"file_not_found_error"]) {
        NSString *fileNotFoundError = valueDict[@"file_not_found_error"];
        return [[DBXSHARINGFileErrorResult alloc] initWithFileNotFoundError:fileNotFoundError];
    }
    else if ([tag isEqualToString:@"invalid_file_action_error"]) {
        NSString *invalidFileActionError = valueDict[@"invalid_file_action_error"];
        return [[DBXSHARINGFileErrorResult alloc] initWithInvalidFileActionError:invalidFileActionError];
    }
    else if ([tag isEqualToString:@"permission_denied_error"]) {
        NSString *permissionDeniedError = valueDict[@"permission_denied_error"];
        return [[DBXSHARINGFileErrorResult alloc] initWithPermissionDeniedError:permissionDeniedError];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGFileErrorResult alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
