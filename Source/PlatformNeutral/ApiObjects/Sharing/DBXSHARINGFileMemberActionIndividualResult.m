///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGAccessLevel.h"
#import "DBXSHARINGFileMemberActionError.h"
#import "DBXSHARINGFileMemberActionIndividualResult.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGFileMemberActionIndividualResult 

@synthesize success = _success;
@synthesize memberError = _memberError;

- (instancetype)initWithSuccess:(DBXSHARINGAccessLevel *)success {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGFileMemberActionIndividualResultSuccess;
        _success = success;
    }
    return self;
}

- (instancetype)initWithMemberError:(DBXSHARINGFileMemberActionError *)memberError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGFileMemberActionIndividualResultMemberError;
        _memberError = memberError;
    }
    return self;
}

- (BOOL)isSuccess {
    return _tag == DBXSHARINGFileMemberActionIndividualResultSuccess;
}

- (BOOL)isMemberError {
    return _tag == DBXSHARINGFileMemberActionIndividualResultMemberError;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGFileMemberActionIndividualResultSuccess:
           return @"DBXSHARINGFileMemberActionIndividualResultSuccess";
        case DBXSHARINGFileMemberActionIndividualResultMemberError:
           return @"DBXSHARINGFileMemberActionIndividualResultMemberError";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGAccessLevel *)success {
    if (_tag != DBXSHARINGFileMemberActionIndividualResultSuccess) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGFileMemberActionIndividualResultSuccess`, but was %@.", [self getTagName]];
    }
    return _success;
}

- (DBXSHARINGFileMemberActionError *)memberError {
    if (_tag != DBXSHARINGFileMemberActionIndividualResultMemberError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGFileMemberActionIndividualResultMemberError`, but was %@.", [self getTagName]];
    }
    return _memberError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGFileMemberActionIndividualResultSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGFileMemberActionIndividualResultSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGFileMemberActionIndividualResultSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGFileMemberActionIndividualResultSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGFileMemberActionIndividualResult *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isSuccess]) {
        if (valueObj.success) {
            jsonDict = [[DBXSHARINGAccessLevelSerializer serialize:valueObj.success] mutableCopy];
        }
        jsonDict[@".tag"] = @"success";
    }
    else if ([valueObj isMemberError]) {
        jsonDict = [[DBXSHARINGFileMemberActionErrorSerializer serialize:valueObj.memberError] mutableCopy];
        jsonDict[@".tag"] = @"member_error";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGFileMemberActionIndividualResult *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"success"]) {
        DBXSHARINGAccessLevel *success = valueDict[@"success"] ? [DBXSHARINGAccessLevelSerializer deserialize:valueDict[@"success"]] : nil;
        return [[DBXSHARINGFileMemberActionIndividualResult alloc] initWithSuccess:success];
    }
    else if ([tag isEqualToString:@"member_error"]) {
        DBXSHARINGFileMemberActionError *memberError = [DBXSHARINGFileMemberActionErrorSerializer deserialize:valueDict[@"member_error"]];
        return [[DBXSHARINGFileMemberActionIndividualResult alloc] initWithMemberError:memberError];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
