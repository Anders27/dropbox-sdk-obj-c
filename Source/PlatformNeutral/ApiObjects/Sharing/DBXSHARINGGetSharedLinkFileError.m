///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGGetSharedLinkFileError.h"
#import "DBXSHARINGSharedLinkError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGGetSharedLinkFileError 

- (instancetype)initWithSharedLinkNotFound {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGGetSharedLinkFileErrorSharedLinkNotFound;
    }
    return self;
}

- (instancetype)initWithSharedLinkAccessDenied {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGGetSharedLinkFileErrorSharedLinkAccessDenied;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGGetSharedLinkFileErrorOther;
    }
    return self;
}

- (instancetype)initWithSharedLinkIsDirectory {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGGetSharedLinkFileErrorSharedLinkIsDirectory;
    }
    return self;
}

- (BOOL)isSharedLinkNotFound {
    return _tag == DBXSHARINGGetSharedLinkFileErrorSharedLinkNotFound;
}

- (BOOL)isSharedLinkAccessDenied {
    return _tag == DBXSHARINGGetSharedLinkFileErrorSharedLinkAccessDenied;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGGetSharedLinkFileErrorOther;
}

- (BOOL)isSharedLinkIsDirectory {
    return _tag == DBXSHARINGGetSharedLinkFileErrorSharedLinkIsDirectory;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGGetSharedLinkFileErrorSharedLinkNotFound:
           return @"DBXSHARINGGetSharedLinkFileErrorSharedLinkNotFound";
        case DBXSHARINGGetSharedLinkFileErrorSharedLinkAccessDenied:
           return @"DBXSHARINGGetSharedLinkFileErrorSharedLinkAccessDenied";
        case DBXSHARINGGetSharedLinkFileErrorOther:
           return @"DBXSHARINGGetSharedLinkFileErrorOther";
        case DBXSHARINGGetSharedLinkFileErrorSharedLinkIsDirectory:
           return @"DBXSHARINGGetSharedLinkFileErrorSharedLinkIsDirectory";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGGetSharedLinkFileErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGGetSharedLinkFileErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGGetSharedLinkFileErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGGetSharedLinkFileErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGGetSharedLinkFileError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isSharedLinkNotFound]) {
        jsonDict[@".tag"] = @"shared_link_not_found";
    }
    else if ([valueObj isSharedLinkAccessDenied]) {
        jsonDict[@".tag"] = @"shared_link_access_denied";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isSharedLinkIsDirectory]) {
        jsonDict[@".tag"] = @"shared_link_is_directory";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGGetSharedLinkFileError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"shared_link_not_found"]) {
        return [[DBXSHARINGGetSharedLinkFileError alloc] initWithSharedLinkNotFound];
    }
    else if ([tag isEqualToString:@"shared_link_access_denied"]) {
        return [[DBXSHARINGGetSharedLinkFileError alloc] initWithSharedLinkAccessDenied];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGGetSharedLinkFileError alloc] initWithOther];
    }
    else if ([tag isEqualToString:@"shared_link_is_directory"]) {
        return [[DBXSHARINGGetSharedLinkFileError alloc] initWithSharedLinkIsDirectory];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
