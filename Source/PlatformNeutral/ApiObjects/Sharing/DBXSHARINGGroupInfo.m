///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGGroupInfo.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMCOMMONGroupManagementType.h"
#import "DBXTEAMCOMMONGroupSummary.h"
#import "DBXTEAMCOMMONGroupType.h"

@implementation DBXSHARINGGroupInfo 

- (instancetype)initWithGroupName:(NSString *)groupName groupId:(NSString *)groupId groupManagementType:(DBXTEAMCOMMONGroupManagementType *)groupManagementType groupType:(DBXTEAMCOMMONGroupType *)groupType isOwner:(NSNumber *)isOwner sameTeam:(NSNumber *)sameTeam groupExternalId:(NSString *)groupExternalId memberCount:(NSNumber *)memberCount {

    self = [super initWithGroupName:groupName groupId:groupId groupManagementType:groupManagementType groupExternalId:groupExternalId memberCount:memberCount];
    if (self) {
        _groupType = groupType;
        _isOwner = isOwner;
        _sameTeam = sameTeam;
    }
    return self;
}

- (instancetype)initWithGroupName:(NSString *)groupName groupId:(NSString *)groupId groupManagementType:(DBXTEAMCOMMONGroupManagementType *)groupManagementType groupType:(DBXTEAMCOMMONGroupType *)groupType isOwner:(NSNumber *)isOwner sameTeam:(NSNumber *)sameTeam {
    return [self initWithGroupName:groupName groupId:groupId groupManagementType:groupManagementType groupType:groupType isOwner:isOwner sameTeam:sameTeam groupExternalId:nil memberCount:nil];
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGGroupInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGGroupInfoSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGGroupInfoSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGGroupInfoSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGGroupInfo *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    jsonDict[@"group_name"] = valueObj.groupName;
    jsonDict[@"group_id"] = valueObj.groupId;
    jsonDict[@"group_management_type"] = [DBXTEAMCOMMONGroupManagementTypeSerializer serialize:valueObj.groupManagementType];
    jsonDict[@"group_type"] = [DBXTEAMCOMMONGroupTypeSerializer serialize:valueObj.groupType];
    jsonDict[@"is_owner"] = valueObj.isOwner;
    jsonDict[@"same_team"] = valueObj.sameTeam;
    if (valueObj.groupExternalId) {
        jsonDict[@"group_external_id"] = valueObj.groupExternalId;
    }
    if (valueObj.memberCount) {
        jsonDict[@"member_count"] = valueObj.memberCount;
    }

    return jsonDict;
}

+ (DBXSHARINGGroupInfo *)deserialize:(NSDictionary *)valueDict {
    NSString *groupName = valueDict[@"group_name"];
    NSString *groupId = valueDict[@"group_id"];
    DBXTEAMCOMMONGroupManagementType *groupManagementType = [DBXTEAMCOMMONGroupManagementTypeSerializer deserialize:valueDict[@"group_management_type"]];
    DBXTEAMCOMMONGroupType *groupType = [DBXTEAMCOMMONGroupTypeSerializer deserialize:valueDict[@"group_type"]];
    NSNumber *isOwner = valueDict[@"is_owner"];
    NSNumber *sameTeam = valueDict[@"same_team"];
    NSString *groupExternalId = valueDict[@"group_external_id"] ?: nil;
    NSNumber *memberCount = valueDict[@"member_count"] ?: nil;

    return [[DBXSHARINGGroupInfo alloc] initWithGroupName:groupName groupId:groupId groupManagementType:groupManagementType groupType:groupType isOwner:isOwner sameTeam:sameTeam groupExternalId:groupExternalId memberCount:memberCount];
}

@end
