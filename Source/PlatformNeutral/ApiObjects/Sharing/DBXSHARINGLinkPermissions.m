///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGLinkPermissions.h"
#import "DBXSHARINGRequestedVisibility.h"
#import "DBXSHARINGResolvedVisibility.h"
#import "DBXSHARINGSharedLinkAccessFailureReason.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGLinkPermissions 

- (instancetype)initWithCanRevoke:(NSNumber *)canRevoke resolvedVisibility:(DBXSHARINGResolvedVisibility *)resolvedVisibility requestedVisibility:(DBXSHARINGRequestedVisibility *)requestedVisibility revokeFailureReason:(DBXSHARINGSharedLinkAccessFailureReason *)revokeFailureReason {

    self = [super init];
    if (self) {
        _resolvedVisibility = resolvedVisibility;
        _requestedVisibility = requestedVisibility;
        _canRevoke = canRevoke;
        _revokeFailureReason = revokeFailureReason;
    }
    return self;
}

- (instancetype)initWithCanRevoke:(NSNumber *)canRevoke {
    return [self initWithCanRevoke:canRevoke resolvedVisibility:nil requestedVisibility:nil revokeFailureReason:nil];
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGLinkPermissionsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGLinkPermissionsSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGLinkPermissionsSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGLinkPermissionsSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGLinkPermissions *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    jsonDict[@"can_revoke"] = valueObj.canRevoke;
    if (valueObj.resolvedVisibility) {
        jsonDict[@"resolved_visibility"] = [DBXSHARINGResolvedVisibilitySerializer serialize:valueObj.resolvedVisibility];
    }
    if (valueObj.requestedVisibility) {
        jsonDict[@"requested_visibility"] = [DBXSHARINGRequestedVisibilitySerializer serialize:valueObj.requestedVisibility];
    }
    if (valueObj.revokeFailureReason) {
        jsonDict[@"revoke_failure_reason"] = [DBXSHARINGSharedLinkAccessFailureReasonSerializer serialize:valueObj.revokeFailureReason];
    }

    return jsonDict;
}

+ (DBXSHARINGLinkPermissions *)deserialize:(NSDictionary *)valueDict {
    NSNumber *canRevoke = valueDict[@"can_revoke"];
    DBXSHARINGResolvedVisibility *resolvedVisibility = valueDict[@"resolved_visibility"] ? [DBXSHARINGResolvedVisibilitySerializer deserialize:valueDict[@"resolved_visibility"]] : nil;
    DBXSHARINGRequestedVisibility *requestedVisibility = valueDict[@"requested_visibility"] ? [DBXSHARINGRequestedVisibilitySerializer deserialize:valueDict[@"requested_visibility"]] : nil;
    DBXSHARINGSharedLinkAccessFailureReason *revokeFailureReason = valueDict[@"revoke_failure_reason"] ? [DBXSHARINGSharedLinkAccessFailureReasonSerializer deserialize:valueDict[@"revoke_failure_reason"]] : nil;

    return [[DBXSHARINGLinkPermissions alloc] initWithCanRevoke:canRevoke resolvedVisibility:resolvedVisibility requestedVisibility:requestedVisibility revokeFailureReason:revokeFailureReason];
}

@end
