///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGListFileMembersError.h"
#import "DBXSHARINGSharingFileAccessError.h"
#import "DBXSHARINGSharingUserError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGListFileMembersError 

@synthesize userError = _userError;
@synthesize accessError = _accessError;

- (instancetype)initWithUserError:(DBXSHARINGSharingUserError *)userError {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGListFileMembersErrorUserError;
        _userError = userError;
    }
    return self;
}

- (instancetype)initWithAccessError:(DBXSHARINGSharingFileAccessError *)accessError {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGListFileMembersErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGListFileMembersErrorOther;
    }
    return self;
}

- (BOOL)isUserError {
    return _tag == DBXSHARINGListFileMembersErrorUserError;
}

- (BOOL)isAccessError {
    return _tag == DBXSHARINGListFileMembersErrorAccessError;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGListFileMembersErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGListFileMembersErrorUserError:
           return @"DBXSHARINGListFileMembersErrorUserError";
        case DBXSHARINGListFileMembersErrorAccessError:
           return @"DBXSHARINGListFileMembersErrorAccessError";
        case DBXSHARINGListFileMembersErrorOther:
           return @"DBXSHARINGListFileMembersErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharingUserError *)userError {
    if (![self isUserError]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGListFileMembersErrorUserError`, but was %@.", [self getTagName]];
    }
    return _userError;
}

- (DBXSHARINGSharingFileAccessError *)accessError {
    if (![self isAccessError]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGListFileMembersErrorAccessError`, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGListFileMembersErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGListFileMembersErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGListFileMembersErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGListFileMembersErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGListFileMembersError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserError]) {
        jsonDict = [[DBXSHARINGSharingUserErrorSerializer serialize:valueObj.userError] mutableCopy];
        jsonDict[@".tag"] = @"user_error";
    }
    else if ([valueObj isAccessError]) {
        jsonDict = [[DBXSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGListFileMembersError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_error"]) {
        DBXSHARINGSharingUserError *userError = [DBXSHARINGSharingUserErrorSerializer deserialize:valueDict[@"user_error"]];
        return [[DBXSHARINGListFileMembersError alloc] initWithUserError:userError];
    }
    else if ([tag isEqualToString:@"access_error"]) {
        DBXSHARINGSharingFileAccessError *accessError = [DBXSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DBXSHARINGListFileMembersError alloc] initWithAccessError:accessError];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGListFileMembersError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
