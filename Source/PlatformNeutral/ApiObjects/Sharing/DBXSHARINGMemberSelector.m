///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGMemberSelector.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGMemberSelector 

@synthesize dropboxId = _dropboxId;
@synthesize email = _email;

- (instancetype)initWithDropboxId:(NSString *)dropboxId {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGMemberSelectorDropboxId;
        _dropboxId = dropboxId;
    }
    return self;
}

- (instancetype)initWithEmail:(NSString *)email {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGMemberSelectorEmail;
        _email = email;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGMemberSelectorOther;
    }
    return self;
}

- (BOOL)isDropboxId {
    return _tag == DBXSHARINGMemberSelectorDropboxId;
}

- (BOOL)isEmail {
    return _tag == DBXSHARINGMemberSelectorEmail;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGMemberSelectorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGMemberSelectorDropboxId:
           return @"DBXSHARINGMemberSelectorDropboxId";
        case DBXSHARINGMemberSelectorEmail:
           return @"DBXSHARINGMemberSelectorEmail";
        case DBXSHARINGMemberSelectorOther:
           return @"DBXSHARINGMemberSelectorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSString *)dropboxId {
    if (![self isDropboxId]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGMemberSelectorDropboxId`, but was %@.", [self getTagName]];
    }
    return _dropboxId;
}

- (NSString *)email {
    if (![self isEmail]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGMemberSelectorEmail`, but was %@.", [self getTagName]];
    }
    return _email;
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGMemberSelectorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGMemberSelectorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGMemberSelectorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGMemberSelectorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGMemberSelector *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isDropboxId]) {
        jsonDict[@"dropbox_id"] = valueObj.dropboxId;
        jsonDict[@".tag"] = @"dropbox_id";
    }
    else if ([valueObj isEmail]) {
        jsonDict[@"email"] = valueObj.email;
        jsonDict[@".tag"] = @"email";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGMemberSelector *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"dropbox_id"]) {
        NSString *dropboxId = valueDict[@"dropbox_id"];
        return [[DBXSHARINGMemberSelector alloc] initWithDropboxId:dropboxId];
    }
    else if ([tag isEqualToString:@"email"]) {
        NSString *email = valueDict[@"email"];
        return [[DBXSHARINGMemberSelector alloc] initWithEmail:email];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGMemberSelector alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
