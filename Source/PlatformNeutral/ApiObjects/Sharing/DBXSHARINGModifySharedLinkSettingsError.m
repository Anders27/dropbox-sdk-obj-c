///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGModifySharedLinkSettingsError.h"
#import "DBXSHARINGSharedLinkError.h"
#import "DBXSHARINGSharedLinkSettingsError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGModifySharedLinkSettingsError 

@synthesize settingsError = _settingsError;

- (instancetype)initWithSharedLinkNotFound {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGModifySharedLinkSettingsErrorSharedLinkNotFound;
    }
    return self;
}

- (instancetype)initWithSharedLinkAccessDenied {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGModifySharedLinkSettingsErrorSharedLinkAccessDenied;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGModifySharedLinkSettingsErrorOther;
    }
    return self;
}

- (instancetype)initWithSettingsError:(DBXSHARINGSharedLinkSettingsError *)settingsError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGModifySharedLinkSettingsErrorSettingsError;
        _settingsError = settingsError;
    }
    return self;
}

- (instancetype)initWithEmailNotVerified {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGModifySharedLinkSettingsErrorEmailNotVerified;
    }
    return self;
}

- (BOOL)isSharedLinkNotFound {
    return _tag == DBXSHARINGModifySharedLinkSettingsErrorSharedLinkNotFound;
}

- (BOOL)isSharedLinkAccessDenied {
    return _tag == DBXSHARINGModifySharedLinkSettingsErrorSharedLinkAccessDenied;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGModifySharedLinkSettingsErrorOther;
}

- (BOOL)isSettingsError {
    return _tag == DBXSHARINGModifySharedLinkSettingsErrorSettingsError;
}

- (BOOL)isEmailNotVerified {
    return _tag == DBXSHARINGModifySharedLinkSettingsErrorEmailNotVerified;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGModifySharedLinkSettingsErrorSharedLinkNotFound:
           return @"DBXSHARINGModifySharedLinkSettingsErrorSharedLinkNotFound";
        case DBXSHARINGModifySharedLinkSettingsErrorSharedLinkAccessDenied:
           return @"DBXSHARINGModifySharedLinkSettingsErrorSharedLinkAccessDenied";
        case DBXSHARINGModifySharedLinkSettingsErrorOther:
           return @"DBXSHARINGModifySharedLinkSettingsErrorOther";
        case DBXSHARINGModifySharedLinkSettingsErrorSettingsError:
           return @"DBXSHARINGModifySharedLinkSettingsErrorSettingsError";
        case DBXSHARINGModifySharedLinkSettingsErrorEmailNotVerified:
           return @"DBXSHARINGModifySharedLinkSettingsErrorEmailNotVerified";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharedLinkSettingsError *)settingsError {
    if (_tag != DBXSHARINGModifySharedLinkSettingsErrorSettingsError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGModifySharedLinkSettingsErrorSettingsError`, but was %@.", [self getTagName]];
    }
    return _settingsError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGModifySharedLinkSettingsErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGModifySharedLinkSettingsErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGModifySharedLinkSettingsErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGModifySharedLinkSettingsErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGModifySharedLinkSettingsError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isSharedLinkNotFound]) {
        jsonDict[@".tag"] = @"shared_link_not_found";
    }
    else if ([valueObj isSharedLinkAccessDenied]) {
        jsonDict[@".tag"] = @"shared_link_access_denied";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isSettingsError]) {
        jsonDict = [[DBXSHARINGSharedLinkSettingsErrorSerializer serialize:valueObj.settingsError] mutableCopy];
        jsonDict[@".tag"] = @"settings_error";
    }
    else if ([valueObj isEmailNotVerified]) {
        jsonDict[@".tag"] = @"email_not_verified";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGModifySharedLinkSettingsError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"shared_link_not_found"]) {
        return [[DBXSHARINGModifySharedLinkSettingsError alloc] initWithSharedLinkNotFound];
    }
    else if ([tag isEqualToString:@"shared_link_access_denied"]) {
        return [[DBXSHARINGModifySharedLinkSettingsError alloc] initWithSharedLinkAccessDenied];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGModifySharedLinkSettingsError alloc] initWithOther];
    }
    else if ([tag isEqualToString:@"settings_error"]) {
        DBXSHARINGSharedLinkSettingsError *settingsError = [DBXSHARINGSharedLinkSettingsErrorSerializer deserialize:valueDict[@"settings_error"]];
        return [[DBXSHARINGModifySharedLinkSettingsError alloc] initWithSettingsError:settingsError];
    }
    else if ([tag isEqualToString:@"email_not_verified"]) {
        return [[DBXSHARINGModifySharedLinkSettingsError alloc] initWithEmailNotVerified];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
