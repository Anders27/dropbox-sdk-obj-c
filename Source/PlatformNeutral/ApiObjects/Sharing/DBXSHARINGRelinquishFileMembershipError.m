///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGRelinquishFileMembershipError.h"
#import "DBXSHARINGSharingFileAccessError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGRelinquishFileMembershipError 

@synthesize accessError = _accessError;

- (instancetype)initWithAccessError:(DBXSHARINGSharingFileAccessError *)accessError {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRelinquishFileMembershipErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithGroupAccess {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRelinquishFileMembershipErrorGroupAccess;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRelinquishFileMembershipErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRelinquishFileMembershipErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == DBXSHARINGRelinquishFileMembershipErrorAccessError;
}

- (BOOL)isGroupAccess {
    return _tag == DBXSHARINGRelinquishFileMembershipErrorGroupAccess;
}

- (BOOL)isNoPermission {
    return _tag == DBXSHARINGRelinquishFileMembershipErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGRelinquishFileMembershipErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGRelinquishFileMembershipErrorAccessError:
           return @"DBXSHARINGRelinquishFileMembershipErrorAccessError";
        case DBXSHARINGRelinquishFileMembershipErrorGroupAccess:
           return @"DBXSHARINGRelinquishFileMembershipErrorGroupAccess";
        case DBXSHARINGRelinquishFileMembershipErrorNoPermission:
           return @"DBXSHARINGRelinquishFileMembershipErrorNoPermission";
        case DBXSHARINGRelinquishFileMembershipErrorOther:
           return @"DBXSHARINGRelinquishFileMembershipErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharingFileAccessError *)accessError {
    if (![self isAccessError]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGRelinquishFileMembershipErrorAccessError`, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGRelinquishFileMembershipErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGRelinquishFileMembershipErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGRelinquishFileMembershipErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGRelinquishFileMembershipErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGRelinquishFileMembershipError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DBXSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isGroupAccess]) {
        jsonDict[@".tag"] = @"group_access";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGRelinquishFileMembershipError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DBXSHARINGSharingFileAccessError *accessError = [DBXSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DBXSHARINGRelinquishFileMembershipError alloc] initWithAccessError:accessError];
    }
    else if ([tag isEqualToString:@"group_access"]) {
        return [[DBXSHARINGRelinquishFileMembershipError alloc] initWithGroupAccess];
    }
    else if ([tag isEqualToString:@"no_permission"]) {
        return [[DBXSHARINGRelinquishFileMembershipError alloc] initWithNoPermission];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGRelinquishFileMembershipError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
