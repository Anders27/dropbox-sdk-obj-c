///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGRelinquishFolderMembershipError.h"
#import "DBXSHARINGSharedFolderAccessError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGRelinquishFolderMembershipError 

@synthesize accessError = _accessError;

- (instancetype)initWithAccessError:(DBXSHARINGSharedFolderAccessError *)accessError {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRelinquishFolderMembershipErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithFolderOwner {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRelinquishFolderMembershipErrorFolderOwner;
    }
    return self;
}

- (instancetype)initWithMounted {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRelinquishFolderMembershipErrorMounted;
    }
    return self;
}

- (instancetype)initWithGroupAccess {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRelinquishFolderMembershipErrorGroupAccess;
    }
    return self;
}

- (instancetype)initWithTeamFolder {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRelinquishFolderMembershipErrorTeamFolder;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRelinquishFolderMembershipErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRelinquishFolderMembershipErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == DBXSHARINGRelinquishFolderMembershipErrorAccessError;
}

- (BOOL)isFolderOwner {
    return _tag == DBXSHARINGRelinquishFolderMembershipErrorFolderOwner;
}

- (BOOL)isMounted {
    return _tag == DBXSHARINGRelinquishFolderMembershipErrorMounted;
}

- (BOOL)isGroupAccess {
    return _tag == DBXSHARINGRelinquishFolderMembershipErrorGroupAccess;
}

- (BOOL)isTeamFolder {
    return _tag == DBXSHARINGRelinquishFolderMembershipErrorTeamFolder;
}

- (BOOL)isNoPermission {
    return _tag == DBXSHARINGRelinquishFolderMembershipErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGRelinquishFolderMembershipErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGRelinquishFolderMembershipErrorAccessError:
           return @"DBXSHARINGRelinquishFolderMembershipErrorAccessError";
        case DBXSHARINGRelinquishFolderMembershipErrorFolderOwner:
           return @"DBXSHARINGRelinquishFolderMembershipErrorFolderOwner";
        case DBXSHARINGRelinquishFolderMembershipErrorMounted:
           return @"DBXSHARINGRelinquishFolderMembershipErrorMounted";
        case DBXSHARINGRelinquishFolderMembershipErrorGroupAccess:
           return @"DBXSHARINGRelinquishFolderMembershipErrorGroupAccess";
        case DBXSHARINGRelinquishFolderMembershipErrorTeamFolder:
           return @"DBXSHARINGRelinquishFolderMembershipErrorTeamFolder";
        case DBXSHARINGRelinquishFolderMembershipErrorNoPermission:
           return @"DBXSHARINGRelinquishFolderMembershipErrorNoPermission";
        case DBXSHARINGRelinquishFolderMembershipErrorOther:
           return @"DBXSHARINGRelinquishFolderMembershipErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharedFolderAccessError *)accessError {
    if (![self isAccessError]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGRelinquishFolderMembershipErrorAccessError`, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGRelinquishFolderMembershipErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGRelinquishFolderMembershipErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGRelinquishFolderMembershipErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGRelinquishFolderMembershipErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGRelinquishFolderMembershipError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DBXSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isFolderOwner]) {
        jsonDict[@".tag"] = @"folder_owner";
    }
    else if ([valueObj isMounted]) {
        jsonDict[@".tag"] = @"mounted";
    }
    else if ([valueObj isGroupAccess]) {
        jsonDict[@".tag"] = @"group_access";
    }
    else if ([valueObj isTeamFolder]) {
        jsonDict[@".tag"] = @"team_folder";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGRelinquishFolderMembershipError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DBXSHARINGSharedFolderAccessError *accessError = [DBXSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DBXSHARINGRelinquishFolderMembershipError alloc] initWithAccessError:accessError];
    }
    else if ([tag isEqualToString:@"folder_owner"]) {
        return [[DBXSHARINGRelinquishFolderMembershipError alloc] initWithFolderOwner];
    }
    else if ([tag isEqualToString:@"mounted"]) {
        return [[DBXSHARINGRelinquishFolderMembershipError alloc] initWithMounted];
    }
    else if ([tag isEqualToString:@"group_access"]) {
        return [[DBXSHARINGRelinquishFolderMembershipError alloc] initWithGroupAccess];
    }
    else if ([tag isEqualToString:@"team_folder"]) {
        return [[DBXSHARINGRelinquishFolderMembershipError alloc] initWithTeamFolder];
    }
    else if ([tag isEqualToString:@"no_permission"]) {
        return [[DBXSHARINGRelinquishFolderMembershipError alloc] initWithNoPermission];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGRelinquishFolderMembershipError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
