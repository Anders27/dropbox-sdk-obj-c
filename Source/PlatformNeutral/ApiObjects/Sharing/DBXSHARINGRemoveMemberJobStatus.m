///
/// Auto-generated by Stone, do not modify.
///

#import "DBXASYNCPollResultBase.h"
#import "DBXSHARINGMemberAccessLevelResult.h"
#import "DBXSHARINGRemoveFolderMemberError.h"
#import "DBXSHARINGRemoveMemberJobStatus.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGRemoveMemberJobStatus 

@synthesize complete = _complete;
@synthesize failed = _failed;

- (instancetype)initWithInProgress {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRemoveMemberJobStatusInProgress;
    }
    return self;
}

- (instancetype)initWithComplete:(DBXSHARINGMemberAccessLevelResult *)complete {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRemoveMemberJobStatusComplete;
        _complete = complete;
    }
    return self;
}

- (instancetype)initWithFailed:(DBXSHARINGRemoveFolderMemberError *)failed {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRemoveMemberJobStatusFailed;
        _failed = failed;
    }
    return self;
}

- (BOOL)isInProgress {
    return _tag == DBXSHARINGRemoveMemberJobStatusInProgress;
}

- (BOOL)isComplete {
    return _tag == DBXSHARINGRemoveMemberJobStatusComplete;
}

- (BOOL)isFailed {
    return _tag == DBXSHARINGRemoveMemberJobStatusFailed;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGRemoveMemberJobStatusInProgress:
           return @"DBXSHARINGRemoveMemberJobStatusInProgress";
        case DBXSHARINGRemoveMemberJobStatusComplete:
           return @"DBXSHARINGRemoveMemberJobStatusComplete";
        case DBXSHARINGRemoveMemberJobStatusFailed:
           return @"DBXSHARINGRemoveMemberJobStatusFailed";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGMemberAccessLevelResult *)complete {
    if (![self isComplete]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGRemoveMemberJobStatusComplete`, but was %@.", [self getTagName]];
    }
    return _complete;
}

- (DBXSHARINGRemoveFolderMemberError *)failed {
    if (![self isFailed]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGRemoveMemberJobStatusFailed`, but was %@.", [self getTagName]];
    }
    return _failed;
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGRemoveMemberJobStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGRemoveMemberJobStatusSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGRemoveMemberJobStatusSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGRemoveMemberJobStatusSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGRemoveMemberJobStatus *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInProgress]) {
        jsonDict[@".tag"] = @"in_progress";
    }
    else if ([valueObj isComplete]) {
        jsonDict = [[DBXSHARINGMemberAccessLevelResultSerializer serialize:valueObj.complete] mutableCopy];
        jsonDict[@".tag"] = @"complete";
    }
    else if ([valueObj isFailed]) {
        jsonDict = [[DBXSHARINGRemoveFolderMemberErrorSerializer serialize:valueObj.failed] mutableCopy];
        jsonDict[@".tag"] = @"failed";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGRemoveMemberJobStatus *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"in_progress"]) {
        return [[DBXSHARINGRemoveMemberJobStatus alloc] initWithInProgress];
    }
    else if ([tag isEqualToString:@"complete"]) {
        DBXSHARINGMemberAccessLevelResult *complete = [DBXSHARINGMemberAccessLevelResultSerializer deserialize:valueDict];
        return [[DBXSHARINGRemoveMemberJobStatus alloc] initWithComplete:complete];
    }
    else if ([tag isEqualToString:@"failed"]) {
        DBXSHARINGRemoveFolderMemberError *failed = [DBXSHARINGRemoveFolderMemberErrorSerializer deserialize:valueDict[@"failed"]];
        return [[DBXSHARINGRemoveMemberJobStatus alloc] initWithFailed:failed];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
