///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGRequestedVisibility.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGRequestedVisibility 

- (instancetype)initWithPublic {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRequestedVisibilityPublic;
    }
    return self;
}

- (instancetype)initWithTeamOnly {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRequestedVisibilityTeamOnly;
    }
    return self;
}

- (instancetype)initWithPassword {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGRequestedVisibilityPassword;
    }
    return self;
}

- (BOOL)isPublic {
    return _tag == DBXSHARINGRequestedVisibilityPublic;
}

- (BOOL)isTeamOnly {
    return _tag == DBXSHARINGRequestedVisibilityTeamOnly;
}

- (BOOL)isPassword {
    return _tag == DBXSHARINGRequestedVisibilityPassword;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGRequestedVisibilityPublic:
           return @"DBXSHARINGRequestedVisibilityPublic";
        case DBXSHARINGRequestedVisibilityTeamOnly:
           return @"DBXSHARINGRequestedVisibilityTeamOnly";
        case DBXSHARINGRequestedVisibilityPassword:
           return @"DBXSHARINGRequestedVisibilityPassword";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGRequestedVisibilitySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGRequestedVisibilitySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGRequestedVisibilitySerializer serialize:self] description];
}

@end


@implementation DBXSHARINGRequestedVisibilitySerializer 

+ (NSDictionary *)serialize:(DBXSHARINGRequestedVisibility *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPublic]) {
        jsonDict[@".tag"] = @"public";
    }
    else if ([valueObj isTeamOnly]) {
        jsonDict[@".tag"] = @"team_only";
    }
    else if ([valueObj isPassword]) {
        jsonDict[@".tag"] = @"password";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGRequestedVisibility *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"public"]) {
        return [[DBXSHARINGRequestedVisibility alloc] initWithPublic];
    }
    else if ([tag isEqualToString:@"team_only"]) {
        return [[DBXSHARINGRequestedVisibility alloc] initWithTeamOnly];
    }
    else if ([tag isEqualToString:@"password"]) {
        return [[DBXSHARINGRequestedVisibility alloc] initWithPassword];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
