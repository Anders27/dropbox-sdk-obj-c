///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGRequestedVisibility.h"
#import "DBXSHARINGResolvedVisibility.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGResolvedVisibility 

- (instancetype)initWithPublic {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGResolvedVisibilityPublic;
    }
    return self;
}

- (instancetype)initWithTeamOnly {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGResolvedVisibilityTeamOnly;
    }
    return self;
}

- (instancetype)initWithPassword {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGResolvedVisibilityPassword;
    }
    return self;
}

- (instancetype)initWithTeamAndPassword {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGResolvedVisibilityTeamAndPassword;
    }
    return self;
}

- (instancetype)initWithSharedFolderOnly {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGResolvedVisibilitySharedFolderOnly;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGResolvedVisibilityOther;
    }
    return self;
}

- (BOOL)isPublic {
    return _tag == DBXSHARINGResolvedVisibilityPublic;
}

- (BOOL)isTeamOnly {
    return _tag == DBXSHARINGResolvedVisibilityTeamOnly;
}

- (BOOL)isPassword {
    return _tag == DBXSHARINGResolvedVisibilityPassword;
}

- (BOOL)isTeamAndPassword {
    return _tag == DBXSHARINGResolvedVisibilityTeamAndPassword;
}

- (BOOL)isSharedFolderOnly {
    return _tag == DBXSHARINGResolvedVisibilitySharedFolderOnly;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGResolvedVisibilityOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGResolvedVisibilityPublic:
           return @"DBXSHARINGResolvedVisibilityPublic";
        case DBXSHARINGResolvedVisibilityTeamOnly:
           return @"DBXSHARINGResolvedVisibilityTeamOnly";
        case DBXSHARINGResolvedVisibilityPassword:
           return @"DBXSHARINGResolvedVisibilityPassword";
        case DBXSHARINGResolvedVisibilityTeamAndPassword:
           return @"DBXSHARINGResolvedVisibilityTeamAndPassword";
        case DBXSHARINGResolvedVisibilitySharedFolderOnly:
           return @"DBXSHARINGResolvedVisibilitySharedFolderOnly";
        case DBXSHARINGResolvedVisibilityOther:
           return @"DBXSHARINGResolvedVisibilityOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGResolvedVisibilitySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGResolvedVisibilitySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGResolvedVisibilitySerializer serialize:self] description];
}

@end


@implementation DBXSHARINGResolvedVisibilitySerializer 

+ (NSDictionary *)serialize:(DBXSHARINGResolvedVisibility *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPublic]) {
        jsonDict[@".tag"] = @"public";
    }
    else if ([valueObj isTeamOnly]) {
        jsonDict[@".tag"] = @"team_only";
    }
    else if ([valueObj isPassword]) {
        jsonDict[@".tag"] = @"password";
    }
    else if ([valueObj isTeamAndPassword]) {
        jsonDict[@".tag"] = @"team_and_password";
    }
    else if ([valueObj isSharedFolderOnly]) {
        jsonDict[@".tag"] = @"shared_folder_only";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGResolvedVisibility *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"public"]) {
        return [[DBXSHARINGResolvedVisibility alloc] initWithPublic];
    }
    else if ([tag isEqualToString:@"team_only"]) {
        return [[DBXSHARINGResolvedVisibility alloc] initWithTeamOnly];
    }
    else if ([tag isEqualToString:@"password"]) {
        return [[DBXSHARINGResolvedVisibility alloc] initWithPassword];
    }
    else if ([tag isEqualToString:@"team_and_password"]) {
        return [[DBXSHARINGResolvedVisibility alloc] initWithTeamAndPassword];
    }
    else if ([tag isEqualToString:@"shared_folder_only"]) {
        return [[DBXSHARINGResolvedVisibility alloc] initWithSharedFolderOnly];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGResolvedVisibility alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
