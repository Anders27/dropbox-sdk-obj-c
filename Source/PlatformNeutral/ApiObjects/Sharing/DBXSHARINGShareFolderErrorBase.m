///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGShareFolderErrorBase.h"
#import "DBXSHARINGSharePathError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGShareFolderErrorBase 

- (instancetype)initWithEmailUnverified {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGShareFolderErrorBaseEmailUnverified;
    }
    return self;
}

- (instancetype)initWithBadPath:(DBXSHARINGSharePathError *)badPath {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGShareFolderErrorBaseBadPath;
        _badPath = badPath;
    }
    return self;
}

- (instancetype)initWithTeamPolicyDisallowsMemberPolicy {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGShareFolderErrorBaseTeamPolicyDisallowsMemberPolicy;
    }
    return self;
}

- (instancetype)initWithDisallowedSharedLinkPolicy {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGShareFolderErrorBaseDisallowedSharedLinkPolicy;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGShareFolderErrorBaseOther;
    }
    return self;
}

- (BOOL)isEmailUnverified {
    return _tag == DBXSHARINGShareFolderErrorBaseEmailUnverified;
}

- (BOOL)isBadPath {
    return _tag == DBXSHARINGShareFolderErrorBaseBadPath;
}

- (BOOL)isTeamPolicyDisallowsMemberPolicy {
    return _tag == DBXSHARINGShareFolderErrorBaseTeamPolicyDisallowsMemberPolicy;
}

- (BOOL)isDisallowedSharedLinkPolicy {
    return _tag == DBXSHARINGShareFolderErrorBaseDisallowedSharedLinkPolicy;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGShareFolderErrorBaseOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGShareFolderErrorBaseEmailUnverified:
           return @"DBXSHARINGShareFolderErrorBaseEmailUnverified";
        case DBXSHARINGShareFolderErrorBaseBadPath:
           return @"DBXSHARINGShareFolderErrorBaseBadPath";
        case DBXSHARINGShareFolderErrorBaseTeamPolicyDisallowsMemberPolicy:
           return @"DBXSHARINGShareFolderErrorBaseTeamPolicyDisallowsMemberPolicy";
        case DBXSHARINGShareFolderErrorBaseDisallowedSharedLinkPolicy:
           return @"DBXSHARINGShareFolderErrorBaseDisallowedSharedLinkPolicy";
        case DBXSHARINGShareFolderErrorBaseOther:
           return @"DBXSHARINGShareFolderErrorBaseOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharePathError *)badPath {
    if (_tag != DBXSHARINGShareFolderErrorBaseBadPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGShareFolderErrorBaseBadPath`, but was %@.", [self getTagName]];
    }
    return _badPath;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGShareFolderErrorBaseSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGShareFolderErrorBaseSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGShareFolderErrorBaseSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGShareFolderErrorBaseSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGShareFolderErrorBase *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isEmailUnverified]) {
        jsonDict[@".tag"] = @"email_unverified";
    }
    else if ([valueObj isBadPath]) {
        jsonDict = [[DBXSHARINGSharePathErrorSerializer serialize:valueObj.badPath] mutableCopy];
        jsonDict[@".tag"] = @"bad_path";
    }
    else if ([valueObj isTeamPolicyDisallowsMemberPolicy]) {
        jsonDict[@".tag"] = @"team_policy_disallows_member_policy";
    }
    else if ([valueObj isDisallowedSharedLinkPolicy]) {
        jsonDict[@".tag"] = @"disallowed_shared_link_policy";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGShareFolderErrorBase *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"email_unverified"]) {
        return [[DBXSHARINGShareFolderErrorBase alloc] initWithEmailUnverified];
    }
    else if ([tag isEqualToString:@"bad_path"]) {
        DBXSHARINGSharePathError *badPath = [DBXSHARINGSharePathErrorSerializer deserialize:valueDict[@"bad_path"]];
        return [[DBXSHARINGShareFolderErrorBase alloc] initWithBadPath:badPath];
    }
    else if ([tag isEqualToString:@"team_policy_disallows_member_policy"]) {
        return [[DBXSHARINGShareFolderErrorBase alloc] initWithTeamPolicyDisallowsMemberPolicy];
    }
    else if ([tag isEqualToString:@"disallowed_shared_link_policy"]) {
        return [[DBXSHARINGShareFolderErrorBase alloc] initWithDisallowedSharedLinkPolicy];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGShareFolderErrorBase alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
