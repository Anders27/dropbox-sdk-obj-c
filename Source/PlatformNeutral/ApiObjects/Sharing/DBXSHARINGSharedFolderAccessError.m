///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGSharedFolderAccessError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGSharedFolderAccessError 

- (instancetype)initWithInvalidId {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedFolderAccessErrorInvalidId;
    }
    return self;
}

- (instancetype)initWithNotAMember {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedFolderAccessErrorNotAMember;
    }
    return self;
}

- (instancetype)initWithEmailUnverified {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedFolderAccessErrorEmailUnverified;
    }
    return self;
}

- (instancetype)initWithUnmounted {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedFolderAccessErrorUnmounted;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedFolderAccessErrorOther;
    }
    return self;
}

- (BOOL)isInvalidId {
    return _tag == DBXSHARINGSharedFolderAccessErrorInvalidId;
}

- (BOOL)isNotAMember {
    return _tag == DBXSHARINGSharedFolderAccessErrorNotAMember;
}

- (BOOL)isEmailUnverified {
    return _tag == DBXSHARINGSharedFolderAccessErrorEmailUnverified;
}

- (BOOL)isUnmounted {
    return _tag == DBXSHARINGSharedFolderAccessErrorUnmounted;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGSharedFolderAccessErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGSharedFolderAccessErrorInvalidId:
           return @"DBXSHARINGSharedFolderAccessErrorInvalidId";
        case DBXSHARINGSharedFolderAccessErrorNotAMember:
           return @"DBXSHARINGSharedFolderAccessErrorNotAMember";
        case DBXSHARINGSharedFolderAccessErrorEmailUnverified:
           return @"DBXSHARINGSharedFolderAccessErrorEmailUnverified";
        case DBXSHARINGSharedFolderAccessErrorUnmounted:
           return @"DBXSHARINGSharedFolderAccessErrorUnmounted";
        case DBXSHARINGSharedFolderAccessErrorOther:
           return @"DBXSHARINGSharedFolderAccessErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGSharedFolderAccessErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGSharedFolderAccessErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGSharedFolderAccessErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGSharedFolderAccessErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGSharedFolderAccessError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInvalidId]) {
        jsonDict[@".tag"] = @"invalid_id";
    }
    else if ([valueObj isNotAMember]) {
        jsonDict[@".tag"] = @"not_a_member";
    }
    else if ([valueObj isEmailUnverified]) {
        jsonDict[@".tag"] = @"email_unverified";
    }
    else if ([valueObj isUnmounted]) {
        jsonDict[@".tag"] = @"unmounted";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGSharedFolderAccessError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"invalid_id"]) {
        return [[DBXSHARINGSharedFolderAccessError alloc] initWithInvalidId];
    }
    else if ([tag isEqualToString:@"not_a_member"]) {
        return [[DBXSHARINGSharedFolderAccessError alloc] initWithNotAMember];
    }
    else if ([tag isEqualToString:@"email_unverified"]) {
        return [[DBXSHARINGSharedFolderAccessError alloc] initWithEmailUnverified];
    }
    else if ([tag isEqualToString:@"unmounted"]) {
        return [[DBXSHARINGSharedFolderAccessError alloc] initWithUnmounted];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGSharedFolderAccessError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
