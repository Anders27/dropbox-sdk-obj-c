///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGMemberAccessLevelResult.h"
#import "DBXSHARINGSharedFolderMemberError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGSharedFolderMemberError 

@synthesize noExplicitAccess = _noExplicitAccess;

- (instancetype)initWithInvalidDropboxId {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedFolderMemberErrorInvalidDropboxId;
    }
    return self;
}

- (instancetype)initWithNotAMember {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedFolderMemberErrorNotAMember;
    }
    return self;
}

- (instancetype)initWithNoExplicitAccess:(DBXSHARINGMemberAccessLevelResult *)noExplicitAccess {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedFolderMemberErrorNoExplicitAccess;
        _noExplicitAccess = noExplicitAccess;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedFolderMemberErrorOther;
    }
    return self;
}

- (BOOL)isInvalidDropboxId {
    return _tag == DBXSHARINGSharedFolderMemberErrorInvalidDropboxId;
}

- (BOOL)isNotAMember {
    return _tag == DBXSHARINGSharedFolderMemberErrorNotAMember;
}

- (BOOL)isNoExplicitAccess {
    return _tag == DBXSHARINGSharedFolderMemberErrorNoExplicitAccess;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGSharedFolderMemberErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGSharedFolderMemberErrorInvalidDropboxId:
           return @"DBXSHARINGSharedFolderMemberErrorInvalidDropboxId";
        case DBXSHARINGSharedFolderMemberErrorNotAMember:
           return @"DBXSHARINGSharedFolderMemberErrorNotAMember";
        case DBXSHARINGSharedFolderMemberErrorNoExplicitAccess:
           return @"DBXSHARINGSharedFolderMemberErrorNoExplicitAccess";
        case DBXSHARINGSharedFolderMemberErrorOther:
           return @"DBXSHARINGSharedFolderMemberErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGMemberAccessLevelResult *)noExplicitAccess {
    if (_tag != DBXSHARINGSharedFolderMemberErrorNoExplicitAccess) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGSharedFolderMemberErrorNoExplicitAccess`, but was %@.", [self getTagName]];
    }
    return _noExplicitAccess;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGSharedFolderMemberErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGSharedFolderMemberErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGSharedFolderMemberErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGSharedFolderMemberErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGSharedFolderMemberError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInvalidDropboxId]) {
        jsonDict[@".tag"] = @"invalid_dropbox_id";
    }
    else if ([valueObj isNotAMember]) {
        jsonDict[@".tag"] = @"not_a_member";
    }
    else if ([valueObj isNoExplicitAccess]) {
        jsonDict = [[DBXSHARINGMemberAccessLevelResultSerializer serialize:valueObj.noExplicitAccess] mutableCopy];
        jsonDict[@".tag"] = @"no_explicit_access";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGSharedFolderMemberError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"invalid_dropbox_id"]) {
        return [[DBXSHARINGSharedFolderMemberError alloc] initWithInvalidDropboxId];
    }
    else if ([tag isEqualToString:@"not_a_member"]) {
        return [[DBXSHARINGSharedFolderMemberError alloc] initWithNotAMember];
    }
    else if ([tag isEqualToString:@"no_explicit_access"]) {
        DBXSHARINGMemberAccessLevelResult *noExplicitAccess = [DBXSHARINGMemberAccessLevelResultSerializer deserialize:valueDict];
        return [[DBXSHARINGSharedFolderMemberError alloc] initWithNoExplicitAccess:noExplicitAccess];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGSharedFolderMemberError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
