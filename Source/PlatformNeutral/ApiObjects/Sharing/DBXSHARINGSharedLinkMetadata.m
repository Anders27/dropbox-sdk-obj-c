///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGFileLinkMetadata.h"
#import "DBXSHARINGFolderLinkMetadata.h"
#import "DBXSHARINGLinkPermissions.h"
#import "DBXSHARINGSharedLinkMetadata.h"
#import "DBXSHARINGTeamMemberInfo.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXUSERSTeam.h"

@implementation DBXSHARINGSharedLinkMetadata 

- (instancetype)initWithUrl:(NSString *)url name:(NSString *)name linkPermissions:(DBXSHARINGLinkPermissions *)linkPermissions id_:(NSString *)id_ expires:(NSDate *)expires pathLower:(NSString *)pathLower teamMemberInfo:(DBXSHARINGTeamMemberInfo *)teamMemberInfo contentOwnerTeamInfo:(DBXUSERSTeam *)contentOwnerTeamInfo {
    [DBXStoneValidators nullableValidator:[DBXStoneValidators stringValidator:@(1) maxLength:nil pattern:nil]](id_);

    self = [super init];
    if (self) {
        _url = url;
        _id_ = id_;
        _name = name;
        _expires = expires;
        _pathLower = pathLower;
        _linkPermissions = linkPermissions;
        _teamMemberInfo = teamMemberInfo;
        _contentOwnerTeamInfo = contentOwnerTeamInfo;
    }
    return self;
}

- (instancetype)initWithUrl:(NSString *)url name:(NSString *)name linkPermissions:(DBXSHARINGLinkPermissions *)linkPermissions {
    return [self initWithUrl:url name:name linkPermissions:linkPermissions id_:nil expires:nil pathLower:nil teamMemberInfo:nil contentOwnerTeamInfo:nil];
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGSharedLinkMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGSharedLinkMetadataSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGSharedLinkMetadataSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGSharedLinkMetadataSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGSharedLinkMetadata *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    jsonDict[@"url"] = valueObj.url;
    jsonDict[@"name"] = valueObj.name;
    jsonDict[@"link_permissions"] = [DBXSHARINGLinkPermissionsSerializer serialize:valueObj.linkPermissions];
    if (valueObj.id_) {
        jsonDict[@"id"] = valueObj.id_;
    }
    if (valueObj.expires) {
        jsonDict[@"expires"] = [DBXNSDateSerializer serialize:valueObj.expires dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
    }
    if (valueObj.pathLower) {
        jsonDict[@"path_lower"] = valueObj.pathLower;
    }
    if (valueObj.teamMemberInfo) {
        jsonDict[@"team_member_info"] = [DBXSHARINGTeamMemberInfoSerializer serialize:valueObj.teamMemberInfo];
    }
    if (valueObj.contentOwnerTeamInfo) {
        jsonDict[@"content_owner_team_info"] = [DBXUSERSTeamSerializer serialize:valueObj.contentOwnerTeamInfo];
    }

    if ([valueObj isKindOfClass:[DBXSHARINGFileLinkMetadata class]]) {
        NSDictionary *subTypeFields = [DBXSHARINGFileLinkMetadataSerializer serialize:(DBXSHARINGFileLinkMetadata *)valueObj];
        for (NSString* key in subTypeFields) {
            jsonDict[key] = subTypeFields[key];
        }
        jsonDict[@".tag"] = @"file";
    }
    else if ([valueObj isKindOfClass:[DBXSHARINGFolderLinkMetadata class]]) {
        NSDictionary *subTypeFields = [DBXSHARINGFolderLinkMetadataSerializer serialize:(DBXSHARINGFolderLinkMetadata *)valueObj];
        for (NSString* key in subTypeFields) {
            jsonDict[key] = subTypeFields[key];
        }
        jsonDict[@".tag"] = @"folder";
    }

    return jsonDict;
}

+ (DBXSHARINGSharedLinkMetadata *)deserialize:(NSDictionary *)valueDict {
    if ([valueDict[@".tag"] isEqualToString:@"file"]) {
        return [DBXSHARINGFileLinkMetadataSerializer deserialize:valueDict];
    }
    if ([valueDict[@".tag"] isEqualToString:@"folder"]) {
        return [DBXSHARINGFolderLinkMetadataSerializer deserialize:valueDict];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
