///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGSharedLinkPolicy.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGSharedLinkPolicy 

- (instancetype)initWithAnyone {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGSharedLinkPolicyAnyone;
    }
    return self;
}

- (instancetype)initWithMembers {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGSharedLinkPolicyMembers;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGSharedLinkPolicyOther;
    }
    return self;
}

- (BOOL)isAnyone {
    return _tag == DBXSHARINGSharedLinkPolicyAnyone;
}

- (BOOL)isMembers {
    return _tag == DBXSHARINGSharedLinkPolicyMembers;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGSharedLinkPolicyOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGSharedLinkPolicyAnyone:
           return @"DBXSHARINGSharedLinkPolicyAnyone";
        case DBXSHARINGSharedLinkPolicyMembers:
           return @"DBXSHARINGSharedLinkPolicyMembers";
        case DBXSHARINGSharedLinkPolicyOther:
           return @"DBXSHARINGSharedLinkPolicyOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGSharedLinkPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGSharedLinkPolicySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGSharedLinkPolicySerializer serialize:self] description];
}

@end


@implementation DBXSHARINGSharedLinkPolicySerializer 

+ (NSDictionary *)serialize:(DBXSHARINGSharedLinkPolicy *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAnyone]) {
        jsonDict[@".tag"] = @"anyone";
    }
    else if ([valueObj isMembers]) {
        jsonDict[@".tag"] = @"members";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGSharedLinkPolicy *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"anyone"]) {
        return [[DBXSHARINGSharedLinkPolicy alloc] initWithAnyone];
    }
    else if ([tag isEqualToString:@"members"]) {
        return [[DBXSHARINGSharedLinkPolicy alloc] initWithMembers];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGSharedLinkPolicy alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
