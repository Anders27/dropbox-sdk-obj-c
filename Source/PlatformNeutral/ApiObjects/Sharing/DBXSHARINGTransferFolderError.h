///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>
#import "DBXSerializableProtocol.h"

@class DBXSHARINGSharedFolderAccessError;
@class DBXSHARINGTransferFolderError;

/// 
/// The TransferFolderError union.
/// 
/// This class implements the `DBXSerializable` protocol (`serialize` and
/// `deserialize` instance methods), which is required for all Obj-C SDK API
/// route objects.
/// 
@interface DBXSHARINGTransferFolderError : NSObject <DBXSerializable> 

/// The `DBXSHARINGTransferFolderErrorTag` enum type represents the possible tag
/// states with which the `DBXSHARINGTransferFolderError` union can exist.
typedef NS_ENUM(NSInteger, DBXSHARINGTransferFolderErrorTag) {
    /// (no description).
    DBXSHARINGTransferFolderErrorAccessError,

    /// toDropboxId in TransferFolderArg is invalid.
    DBXSHARINGTransferFolderErrorInvalidDropboxId,

    /// The new designated owner is not currently a member of the shared folder.
    DBXSHARINGTransferFolderErrorDNewOwnerNotAMember,

    /// The new designated owner has not added the folder to their Dropbox.
    DBXSHARINGTransferFolderErrorDNewOwnerUnmounted,

    /// The new designated owner's e-mail address is unverified.
    DBXSHARINGTransferFolderErrorDNewOwnerEmailUnverified,

    /// This action cannot be performed on a team shared folder.
    DBXSHARINGTransferFolderErrorTeamFolder,

    /// The current user does not have permission to perform this action.
    DBXSHARINGTransferFolderErrorNoPermission,

    /// (no description).
    DBXSHARINGTransferFolderErrorOther,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBXSHARINGTransferFolderErrorTag tag;

/// (no description).
@property (nonatomic, readonly) DBXSHARINGSharedFolderAccessError * _Nonnull accessError;

/// 
/// Initializes union class with tag state of `AccessError`.
/// 
/// - parameter accessError: (no description).
/// 
/// - returns: An initialized `DBXSHARINGTransferFolderError` instance.
/// 
- (nonnull instancetype)initWithAccessError:(DBXSHARINGSharedFolderAccessError * _Nonnull)accessError;

/// 
/// Initializes union class with tag state of `InvalidDropboxId`.
/// 
/// About the `InvalidDropboxId` tag state:
/// :field:`TransferFolderArg.to_dropbox_id` is invalid.
/// 
/// - returns: An initialized `DBXSHARINGTransferFolderError` instance.
/// 
- (nonnull instancetype)initWithInvalidDropboxId;

/// 
/// Initializes union class with tag state of `DNewOwnerNotAMember`.
/// 
/// About the `DNewOwnerNotAMember` tag state: The new designated owner is not
/// currently a member of the shared folder.
/// 
/// - returns: An initialized `DBXSHARINGTransferFolderError` instance.
/// 
- (nonnull instancetype)initWithDNewOwnerNotAMember;

/// 
/// Initializes union class with tag state of `DNewOwnerUnmounted`.
/// 
/// About the `DNewOwnerUnmounted` tag state: The new designated owner has not
/// added the folder to their Dropbox.
/// 
/// - returns: An initialized `DBXSHARINGTransferFolderError` instance.
/// 
- (nonnull instancetype)initWithDNewOwnerUnmounted;

/// 
/// Initializes union class with tag state of `DNewOwnerEmailUnverified`.
/// 
/// About the `DNewOwnerEmailUnverified` tag state: The new designated owner's
/// e-mail address is unverified.
/// 
/// - returns: An initialized `DBXSHARINGTransferFolderError` instance.
/// 
- (nonnull instancetype)initWithDNewOwnerEmailUnverified;

/// 
/// Initializes union class with tag state of `TeamFolder`.
/// 
/// About the `TeamFolder` tag state: This action cannot be performed on a team
/// shared folder.
/// 
/// - returns: An initialized `DBXSHARINGTransferFolderError` instance.
/// 
- (nonnull instancetype)initWithTeamFolder;

/// 
/// Initializes union class with tag state of `NoPermission`.
/// 
/// About the `NoPermission` tag state: The current user does not have
/// permission to perform this action.
/// 
/// - returns: An initialized `DBXSHARINGTransferFolderError` instance.
/// 
- (nonnull instancetype)initWithNoPermission;

/// 
/// Initializes union class with tag state of `Other`.
/// 
/// - returns: An initialized `DBXSHARINGTransferFolderError` instance.
/// 
- (nonnull instancetype)initWithOther;

/// 
/// Retrieves whether the union's current tag state has value `AccessError`.
/// 
/// - returns: Whether the union's current tag state has value `AccessError`.
/// 
- (BOOL)isAccessError;

/// 
/// Retrieves whether the union's current tag state has value
/// `InvalidDropboxId`.
/// 
/// - returns: Whether the union's current tag state has value
/// `InvalidDropboxId`.
/// 
- (BOOL)isInvalidDropboxId;

/// 
/// Retrieves whether the union's current tag state has value
/// `DNewOwnerNotAMember`.
/// 
/// - returns: Whether the union's current tag state has value
/// `DNewOwnerNotAMember`.
/// 
- (BOOL)isDNewOwnerNotAMember;

/// 
/// Retrieves whether the union's current tag state has value
/// `DNewOwnerUnmounted`.
/// 
/// - returns: Whether the union's current tag state has value
/// `DNewOwnerUnmounted`.
/// 
- (BOOL)isDNewOwnerUnmounted;

/// 
/// Retrieves whether the union's current tag state has value
/// `DNewOwnerEmailUnverified`.
/// 
/// - returns: Whether the union's current tag state has value
/// `DNewOwnerEmailUnverified`.
/// 
- (BOOL)isDNewOwnerEmailUnverified;

/// 
/// Retrieves whether the union's current tag state has value `TeamFolder`.
/// 
/// - returns: Whether the union's current tag state has value `TeamFolder`.
/// 
- (BOOL)isTeamFolder;

/// 
/// Retrieves whether the union's current tag state has value `NoPermission`.
/// 
/// - returns: Whether the union's current tag state has value `NoPermission`.
/// 
- (BOOL)isNoPermission;

/// 
/// Retrieves whether the union's current tag state has value `Other`.
/// 
/// - returns: Whether the union's current tag state has value `Other`.
/// 
- (BOOL)isOther;

/// 
/// Retrieves string value of union's current tag state.
/// 
/// - returns: A human-readable string representing the union's current tag
/// state.
/// 
- (NSString * _Nonnull)getTagName;

@end


/// 
/// The serialization class for the `DBXSHARINGTransferFolderError` union.
/// 
@interface DBXSHARINGTransferFolderErrorSerializer : NSObject 

/// 
/// Serializes `DBXSHARINGTransferFolderError` instances.
/// 
///  - parameter instance: An instance of the `DBXSHARINGTransferFolderError`
/// API object.
/// 
///  - returns: A json-compatible dictionary representation of the
/// `DBXSHARINGTransferFolderError` API object.
/// 
+ (NSDictionary * _Nonnull)serialize:(DBXSHARINGTransferFolderError * _Nonnull)instance;

/// 
/// Deserializes `DBXSHARINGTransferFolderError` instances.
/// 
///  - parameter dict: A json-compatible dictionary representation of the
/// `DBXSHARINGTransferFolderError` API object.
/// 
///  - returns: An instantiation of the `DBXSHARINGTransferFolderError` object.
/// 
+ (DBXSHARINGTransferFolderError * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
