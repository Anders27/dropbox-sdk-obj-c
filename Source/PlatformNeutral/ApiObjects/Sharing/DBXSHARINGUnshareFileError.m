///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGSharingFileAccessError.h"
#import "DBXSHARINGSharingUserError.h"
#import "DBXSHARINGUnshareFileError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGUnshareFileError 

@synthesize userError = _userError;
@synthesize accessError = _accessError;

- (instancetype)initWithUserError:(DBXSHARINGSharingUserError *)userError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUnshareFileErrorUserError;
        _userError = userError;
    }
    return self;
}

- (instancetype)initWithAccessError:(DBXSHARINGSharingFileAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUnshareFileErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUnshareFileErrorOther;
    }
    return self;
}

- (BOOL)isUserError {
    return _tag == DBXSHARINGUnshareFileErrorUserError;
}

- (BOOL)isAccessError {
    return _tag == DBXSHARINGUnshareFileErrorAccessError;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGUnshareFileErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGUnshareFileErrorUserError:
           return @"DBXSHARINGUnshareFileErrorUserError";
        case DBXSHARINGUnshareFileErrorAccessError:
           return @"DBXSHARINGUnshareFileErrorAccessError";
        case DBXSHARINGUnshareFileErrorOther:
           return @"DBXSHARINGUnshareFileErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharingUserError *)userError {
    if (_tag != DBXSHARINGUnshareFileErrorUserError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGUnshareFileErrorUserError`, but was %@.", [self getTagName]];
    }
    return _userError;
}

- (DBXSHARINGSharingFileAccessError *)accessError {
    if (_tag != DBXSHARINGUnshareFileErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGUnshareFileErrorAccessError`, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGUnshareFileErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGUnshareFileErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGUnshareFileErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGUnshareFileErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGUnshareFileError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserError]) {
        jsonDict = [[DBXSHARINGSharingUserErrorSerializer serialize:valueObj.userError] mutableCopy];
        jsonDict[@".tag"] = @"user_error";
    }
    else if ([valueObj isAccessError]) {
        jsonDict = [[DBXSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGUnshareFileError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_error"]) {
        DBXSHARINGSharingUserError *userError = [DBXSHARINGSharingUserErrorSerializer deserialize:valueDict[@"user_error"]];
        return [[DBXSHARINGUnshareFileError alloc] initWithUserError:userError];
    }
    else if ([tag isEqualToString:@"access_error"]) {
        DBXSHARINGSharingFileAccessError *accessError = [DBXSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DBXSHARINGUnshareFileError alloc] initWithAccessError:accessError];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGUnshareFileError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
