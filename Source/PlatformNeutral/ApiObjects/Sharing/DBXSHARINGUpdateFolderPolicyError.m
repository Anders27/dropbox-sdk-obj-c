///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGSharedFolderAccessError.h"
#import "DBXSHARINGUpdateFolderPolicyError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGUpdateFolderPolicyError 

- (instancetype)initWithAccessError:(DBXSHARINGSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUpdateFolderPolicyErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithNotOnTeam {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUpdateFolderPolicyErrorNotOnTeam;
    }
    return self;
}

- (instancetype)initWithTeamPolicyDisallowsMemberPolicy {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy;
    }
    return self;
}

- (instancetype)initWithDisallowedSharedLinkPolicy {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUpdateFolderPolicyErrorDisallowedSharedLinkPolicy;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUpdateFolderPolicyErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUpdateFolderPolicyErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == DBXSHARINGUpdateFolderPolicyErrorAccessError;
}

- (BOOL)isNotOnTeam {
    return _tag == DBXSHARINGUpdateFolderPolicyErrorNotOnTeam;
}

- (BOOL)isTeamPolicyDisallowsMemberPolicy {
    return _tag == DBXSHARINGUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy;
}

- (BOOL)isDisallowedSharedLinkPolicy {
    return _tag == DBXSHARINGUpdateFolderPolicyErrorDisallowedSharedLinkPolicy;
}

- (BOOL)isNoPermission {
    return _tag == DBXSHARINGUpdateFolderPolicyErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGUpdateFolderPolicyErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGUpdateFolderPolicyErrorAccessError:
           return @"DBXSHARINGUpdateFolderPolicyErrorAccessError";
        case DBXSHARINGUpdateFolderPolicyErrorNotOnTeam:
           return @"DBXSHARINGUpdateFolderPolicyErrorNotOnTeam";
        case DBXSHARINGUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy:
           return @"DBXSHARINGUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy";
        case DBXSHARINGUpdateFolderPolicyErrorDisallowedSharedLinkPolicy:
           return @"DBXSHARINGUpdateFolderPolicyErrorDisallowedSharedLinkPolicy";
        case DBXSHARINGUpdateFolderPolicyErrorNoPermission:
           return @"DBXSHARINGUpdateFolderPolicyErrorNoPermission";
        case DBXSHARINGUpdateFolderPolicyErrorOther:
           return @"DBXSHARINGUpdateFolderPolicyErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharedFolderAccessError *)accessError {
    if (_tag != DBXSHARINGUpdateFolderPolicyErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGUpdateFolderPolicyErrorAccessError`, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGUpdateFolderPolicyErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGUpdateFolderPolicyErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGUpdateFolderPolicyErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGUpdateFolderPolicyErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGUpdateFolderPolicyError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DBXSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isNotOnTeam]) {
        jsonDict[@".tag"] = @"not_on_team";
    }
    else if ([valueObj isTeamPolicyDisallowsMemberPolicy]) {
        jsonDict[@".tag"] = @"team_policy_disallows_member_policy";
    }
    else if ([valueObj isDisallowedSharedLinkPolicy]) {
        jsonDict[@".tag"] = @"disallowed_shared_link_policy";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGUpdateFolderPolicyError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DBXSHARINGSharedFolderAccessError *accessError = [DBXSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DBXSHARINGUpdateFolderPolicyError alloc] initWithAccessError:accessError];
    }
    else if ([tag isEqualToString:@"not_on_team"]) {
        return [[DBXSHARINGUpdateFolderPolicyError alloc] initWithNotOnTeam];
    }
    else if ([tag isEqualToString:@"team_policy_disallows_member_policy"]) {
        return [[DBXSHARINGUpdateFolderPolicyError alloc] initWithTeamPolicyDisallowsMemberPolicy];
    }
    else if ([tag isEqualToString:@"disallowed_shared_link_policy"]) {
        return [[DBXSHARINGUpdateFolderPolicyError alloc] initWithDisallowedSharedLinkPolicy];
    }
    else if ([tag isEqualToString:@"no_permission"]) {
        return [[DBXSHARINGUpdateFolderPolicyError alloc] initWithNoPermission];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGUpdateFolderPolicyError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
