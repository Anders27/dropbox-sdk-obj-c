///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGVisibility.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGVisibility 

- (instancetype)initWithPublic {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGVisibilityPublic;
    }
    return self;
}

- (instancetype)initWithTeamOnly {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGVisibilityTeamOnly;
    }
    return self;
}

- (instancetype)initWithPassword {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGVisibilityPassword;
    }
    return self;
}

- (instancetype)initWithTeamAndPassword {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGVisibilityTeamAndPassword;
    }
    return self;
}

- (instancetype)initWithSharedFolderOnly {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGVisibilitySharedFolderOnly;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXSHARINGVisibilityOther;
    }
    return self;
}

- (BOOL)isPublic {
    return _tag == DBXSHARINGVisibilityPublic;
}

- (BOOL)isTeamOnly {
    return _tag == DBXSHARINGVisibilityTeamOnly;
}

- (BOOL)isPassword {
    return _tag == DBXSHARINGVisibilityPassword;
}

- (BOOL)isTeamAndPassword {
    return _tag == DBXSHARINGVisibilityTeamAndPassword;
}

- (BOOL)isSharedFolderOnly {
    return _tag == DBXSHARINGVisibilitySharedFolderOnly;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGVisibilityOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGVisibilityPublic:
           return @"DBXSHARINGVisibilityPublic";
        case DBXSHARINGVisibilityTeamOnly:
           return @"DBXSHARINGVisibilityTeamOnly";
        case DBXSHARINGVisibilityPassword:
           return @"DBXSHARINGVisibilityPassword";
        case DBXSHARINGVisibilityTeamAndPassword:
           return @"DBXSHARINGVisibilityTeamAndPassword";
        case DBXSHARINGVisibilitySharedFolderOnly:
           return @"DBXSHARINGVisibilitySharedFolderOnly";
        case DBXSHARINGVisibilityOther:
           return @"DBXSHARINGVisibilityOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXSHARINGVisibilitySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGVisibilitySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGVisibilitySerializer serialize:self] description];
}

@end


@implementation DBXSHARINGVisibilitySerializer 

+ (NSDictionary *)serialize:(DBXSHARINGVisibility *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPublic]) {
        jsonDict[@".tag"] = @"public";
    }
    else if ([valueObj isTeamOnly]) {
        jsonDict[@".tag"] = @"team_only";
    }
    else if ([valueObj isPassword]) {
        jsonDict[@".tag"] = @"password";
    }
    else if ([valueObj isTeamAndPassword]) {
        jsonDict[@".tag"] = @"team_and_password";
    }
    else if ([valueObj isSharedFolderOnly]) {
        jsonDict[@".tag"] = @"shared_folder_only";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGVisibility *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"public"]) {
        return [[DBXSHARINGVisibility alloc] initWithPublic];
    }
    else if ([tag isEqualToString:@"team_only"]) {
        return [[DBXSHARINGVisibility alloc] initWithTeamOnly];
    }
    else if ([tag isEqualToString:@"password"]) {
        return [[DBXSHARINGVisibility alloc] initWithPassword];
    }
    else if ([tag isEqualToString:@"team_and_password"]) {
        return [[DBXSHARINGVisibility alloc] initWithTeamAndPassword];
    }
    else if ([tag isEqualToString:@"shared_folder_only"]) {
        return [[DBXSHARINGVisibility alloc] initWithSharedFolderOnly];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGVisibility alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
