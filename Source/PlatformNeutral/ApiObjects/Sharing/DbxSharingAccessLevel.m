///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingAccessLevel.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingAccessLevel 

- (instancetype)initWithOwner {
    self = [super init];
    if (self != nil) {
        _tag = SharingAccessLevelOwner;
    }
    return self;
}

- (instancetype)initWithEditor {
    self = [super init];
    if (self != nil) {
        _tag = SharingAccessLevelEditor;
    }
    return self;
}

- (instancetype)initWithViewer {
    self = [super init];
    if (self != nil) {
        _tag = SharingAccessLevelViewer;
    }
    return self;
}

- (instancetype)initWithViewerNoComment {
    self = [super init];
    if (self != nil) {
        _tag = SharingAccessLevelViewerNoComment;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingAccessLevelOther;
    }
    return self;
}

- (BOOL)isOwner {
    return _tag == SharingAccessLevelOwner;
}

- (BOOL)isEditor {
    return _tag == SharingAccessLevelEditor;
}

- (BOOL)isViewer {
    return _tag == SharingAccessLevelViewer;
}

- (BOOL)isViewerNoComment {
    return _tag == SharingAccessLevelViewerNoComment;
}

- (BOOL)isOther {
    return _tag == SharingAccessLevelOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingAccessLevelOwner:
           return @"SharingAccessLevelOwner";
        case SharingAccessLevelEditor:
           return @"SharingAccessLevelEditor";
        case SharingAccessLevelViewer:
           return @"SharingAccessLevelViewer";
        case SharingAccessLevelViewerNoComment:
           return @"SharingAccessLevelViewerNoComment";
        case SharingAccessLevelOther:
           return @"SharingAccessLevelOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingAccessLevelSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingAccessLevelSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingAccessLevelSerializer serialize:self] description];
}

@end


@implementation DbxSharingAccessLevelSerializer 

+ (NSDictionary *)serialize:(DbxSharingAccessLevel *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isOwner]) {
        jsonDict[@".tag"] = @"owner";
    }
    else if ([valueObj isEditor]) {
        jsonDict[@".tag"] = @"editor";
    }
    else if ([valueObj isViewer]) {
        jsonDict[@".tag"] = @"viewer";
    }
    else if ([valueObj isViewerNoComment]) {
        jsonDict[@".tag"] = @"viewer_no_comment";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingAccessLevel *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"owner"]) {
        return [[DbxSharingAccessLevel alloc] initWithOwner];
    }
    if ([tag isEqualToString:@"editor"]) {
        return [[DbxSharingAccessLevel alloc] initWithEditor];
    }
    if ([tag isEqualToString:@"viewer"]) {
        return [[DbxSharingAccessLevel alloc] initWithViewer];
    }
    if ([tag isEqualToString:@"viewer_no_comment"]) {
        return [[DbxSharingAccessLevel alloc] initWithViewerNoComment];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingAccessLevel alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
