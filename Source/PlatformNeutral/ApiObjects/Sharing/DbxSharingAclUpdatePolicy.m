///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingAclUpdatePolicy.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingAclUpdatePolicy 

- (instancetype)initWithOwner {
    self = [super init];
    if (self != nil) {
        _tag = SharingAclUpdatePolicyOwner;
    }
    return self;
}

- (instancetype)initWithEditors {
    self = [super init];
    if (self != nil) {
        _tag = SharingAclUpdatePolicyEditors;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingAclUpdatePolicyOther;
    }
    return self;
}

- (BOOL)isOwner {
    return _tag == SharingAclUpdatePolicyOwner;
}

- (BOOL)isEditors {
    return _tag == SharingAclUpdatePolicyEditors;
}

- (BOOL)isOther {
    return _tag == SharingAclUpdatePolicyOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingAclUpdatePolicyOwner:
           return @"SharingAclUpdatePolicyOwner";
        case SharingAclUpdatePolicyEditors:
           return @"SharingAclUpdatePolicyEditors";
        case SharingAclUpdatePolicyOther:
           return @"SharingAclUpdatePolicyOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingAclUpdatePolicySerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingAclUpdatePolicySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingAclUpdatePolicySerializer serialize:self] description];
}

@end


@implementation DbxSharingAclUpdatePolicySerializer 

+ (NSDictionary *)serialize:(DbxSharingAclUpdatePolicy *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isOwner]) {
        jsonDict[@".tag"] = @"owner";
    }
    else if ([valueObj isEditors]) {
        jsonDict[@".tag"] = @"editors";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingAclUpdatePolicy *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"owner"]) {
        return [[DbxSharingAclUpdatePolicy alloc] initWithOwner];
    }
    if ([tag isEqualToString:@"editors"]) {
        return [[DbxSharingAclUpdatePolicy alloc] initWithEditors];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingAclUpdatePolicy alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
