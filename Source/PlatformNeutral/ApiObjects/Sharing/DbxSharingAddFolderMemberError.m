///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingAddFolderMemberError.h"
#import "DbxSharingAddMemberSelectorError.h"
#import "DbxSharingSharedFolderAccessError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingAddFolderMemberError 

- (instancetype)initWithAccessError:(DbxSharingSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithEmailUnverified {
    self = [super init];
    if (self != nil) {
        _tag = (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorEmailUnverified;
    }
    return self;
}

- (instancetype)initWithBadMember:(DbxSharingAddMemberSelectorError *)badMember {
    self = [super init];
    if (self != nil) {
        _tag = (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorBadMember;
        _badMember = badMember;
    }
    return self;
}

- (instancetype)initWithCantShareOutsideTeam {
    self = [super init];
    if (self != nil) {
        _tag = (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorCantShareOutsideTeam;
    }
    return self;
}

- (instancetype)initWithTooManyMembers:(NSNumber *)tooManyMembers {
    self = [super init];
    if (self != nil) {
        _tag = (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyMembers;
        _tooManyMembers = tooManyMembers;
    }
    return self;
}

- (instancetype)initWithTooManyPendingInvites:(NSNumber *)tooManyPendingInvites {
    self = [super init];
    if (self != nil) {
        _tag = (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyPendingInvites;
        _tooManyPendingInvites = tooManyPendingInvites;
    }
    return self;
}

- (instancetype)initWithRateLimit {
    self = [super init];
    if (self != nil) {
        _tag = (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorRateLimit;
    }
    return self;
}

- (instancetype)initWithTooManyInvitees {
    self = [super init];
    if (self != nil) {
        _tag = (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyInvitees;
    }
    return self;
}

- (instancetype)initWithInsufficientPlan {
    self = [super init];
    if (self != nil) {
        _tag = (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorInsufficientPlan;
    }
    return self;
}

- (instancetype)initWithTeamFolder {
    self = [super init];
    if (self != nil) {
        _tag = (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTeamFolder;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorAccessError;
}

- (BOOL)isEmailUnverified {
    return _tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorEmailUnverified;
}

- (BOOL)isBadMember {
    return _tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorBadMember;
}

- (BOOL)isCantShareOutsideTeam {
    return _tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorCantShareOutsideTeam;
}

- (BOOL)isTooManyMembers {
    return _tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyMembers;
}

- (BOOL)isTooManyPendingInvites {
    return _tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyPendingInvites;
}

- (BOOL)isRateLimit {
    return _tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorRateLimit;
}

- (BOOL)isTooManyInvitees {
    return _tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyInvitees;
}

- (BOOL)isInsufficientPlan {
    return _tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorInsufficientPlan;
}

- (BOOL)isTeamFolder {
    return _tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTeamFolder;
}

- (BOOL)isNoPermission {
    return _tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorAccessError) {
        return @"(SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorAccessError";
    }
    if (_tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorEmailUnverified) {
        return @"(SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorEmailUnverified";
    }
    if (_tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorBadMember) {
        return @"(SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorBadMember";
    }
    if (_tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorCantShareOutsideTeam) {
        return @"(SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorCantShareOutsideTeam";
    }
    if (_tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyMembers) {
        return @"(SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyMembers";
    }
    if (_tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyPendingInvites) {
        return @"(SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyPendingInvites";
    }
    if (_tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorRateLimit) {
        return @"(SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorRateLimit";
    }
    if (_tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyInvitees) {
        return @"(SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyInvitees";
    }
    if (_tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorInsufficientPlan) {
        return @"(SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorInsufficientPlan";
    }
    if (_tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTeamFolder) {
        return @"(SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTeamFolder";
    }
    if (_tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorNoPermission) {
        return @"(SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorNoPermission";
    }
    if (_tag == (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorOther) {
        return @"(SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharedFolderAccessError *)accessError {
    if (_tag != (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorAccessError, but was %@.", [self getTagName]];
    }
    return _accessError;
}

- (DbxSharingAddMemberSelectorError *)badMember {
    if (_tag != (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorBadMember) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorBadMember, but was %@.", [self getTagName]];
    }
    return _badMember;
}

- (NSNumber *)tooManyMembers {
    if (_tag != (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyMembers) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyMembers, but was %@.", [self getTagName]];
    }
    return _tooManyMembers;
}

- (NSNumber *)tooManyPendingInvites {
    if (_tag != (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyPendingInvites) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingAddFolderMemberErrorTag)SharingAddFolderMemberErrorTooManyPendingInvites, but was %@.", [self getTagName]];
    }
    return _tooManyPendingInvites;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingAddFolderMemberErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingAddFolderMemberErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingAddFolderMemberErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingAddFolderMemberErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingAddFolderMemberError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict[@"access_error"] = [DbxSharingSharedFolderAccessErrorSerializer serialize:valueObj.accessError];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isEmailUnverified]) {
        jsonDict[@".tag"] = @"email_unverified";
    }
    else if ([valueObj isBadMember]) {
        jsonDict[@"bad_member"] = [DbxSharingAddMemberSelectorErrorSerializer serialize:valueObj.badMember];
        jsonDict[@".tag"] = @"bad_member";
    }
    else if ([valueObj isCantShareOutsideTeam]) {
        jsonDict[@".tag"] = @"cant_share_outside_team";
    }
    else if ([valueObj isTooManyMembers]) {
        jsonDict[@"too_many_members"] = [DbxNSNumberSerializer serialize:valueObj.tooManyMembers];
        jsonDict[@".tag"] = @"too_many_members";
    }
    else if ([valueObj isTooManyPendingInvites]) {
        jsonDict[@"too_many_pending_invites"] = [DbxNSNumberSerializer serialize:valueObj.tooManyPendingInvites];
        jsonDict[@".tag"] = @"too_many_pending_invites";
    }
    else if ([valueObj isRateLimit]) {
        jsonDict[@".tag"] = @"rate_limit";
    }
    else if ([valueObj isTooManyInvitees]) {
        jsonDict[@".tag"] = @"too_many_invitees";
    }
    else if ([valueObj isInsufficientPlan]) {
        jsonDict[@".tag"] = @"insufficient_plan";
    }
    else if ([valueObj isTeamFolder]) {
        jsonDict[@".tag"] = @"team_folder";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingAddFolderMemberError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DbxSharingSharedFolderAccessError *accessError = [DbxSharingSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DbxSharingAddFolderMemberError alloc] initWithAccessError:accessError];
    }
    if ([tag isEqualToString:@"email_unverified"]) {
        return [[DbxSharingAddFolderMemberError alloc] initWithEmailUnverified];
    }
    if ([tag isEqualToString:@"bad_member"]) {
        DbxSharingAddMemberSelectorError *badMember = [DbxSharingAddMemberSelectorErrorSerializer deserialize:valueDict[@"bad_member"]];
        return [[DbxSharingAddFolderMemberError alloc] initWithBadMember:badMember];
    }
    if ([tag isEqualToString:@"cant_share_outside_team"]) {
        return [[DbxSharingAddFolderMemberError alloc] initWithCantShareOutsideTeam];
    }
    if ([tag isEqualToString:@"too_many_members"]) {
        NSNumber *tooManyMembers = [DbxNSNumberSerializer deserialize:valueDict[@"too_many_members"]];
        return [[DbxSharingAddFolderMemberError alloc] initWithTooManyMembers:tooManyMembers];
    }
    if ([tag isEqualToString:@"too_many_pending_invites"]) {
        NSNumber *tooManyPendingInvites = [DbxNSNumberSerializer deserialize:valueDict[@"too_many_pending_invites"]];
        return [[DbxSharingAddFolderMemberError alloc] initWithTooManyPendingInvites:tooManyPendingInvites];
    }
    if ([tag isEqualToString:@"rate_limit"]) {
        return [[DbxSharingAddFolderMemberError alloc] initWithRateLimit];
    }
    if ([tag isEqualToString:@"too_many_invitees"]) {
        return [[DbxSharingAddFolderMemberError alloc] initWithTooManyInvitees];
    }
    if ([tag isEqualToString:@"insufficient_plan"]) {
        return [[DbxSharingAddFolderMemberError alloc] initWithInsufficientPlan];
    }
    if ([tag isEqualToString:@"team_folder"]) {
        return [[DbxSharingAddFolderMemberError alloc] initWithTeamFolder];
    }
    if ([tag isEqualToString:@"no_permission"]) {
        return [[DbxSharingAddFolderMemberError alloc] initWithNoPermission];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingAddFolderMemberError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
