///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingFileErrorResult.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingFileErrorResult 

- (instancetype)initWithFileNotFoundError:(NSString *)fileNotFoundError {
    self = [super init];
    if (self != nil) {
        _tag = SharingFileErrorResultFileNotFoundError;
        _fileNotFoundError = fileNotFoundError;
    }
    return self;
}

- (instancetype)initWithInvalidFileActionError:(NSString *)invalidFileActionError {
    self = [super init];
    if (self != nil) {
        _tag = SharingFileErrorResultInvalidFileActionError;
        _invalidFileActionError = invalidFileActionError;
    }
    return self;
}

- (instancetype)initWithPermissionDeniedError:(NSString *)permissionDeniedError {
    self = [super init];
    if (self != nil) {
        _tag = SharingFileErrorResultPermissionDeniedError;
        _permissionDeniedError = permissionDeniedError;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingFileErrorResultOther;
    }
    return self;
}

- (BOOL)isFileNotFoundError {
    return _tag == SharingFileErrorResultFileNotFoundError;
}

- (BOOL)isInvalidFileActionError {
    return _tag == SharingFileErrorResultInvalidFileActionError;
}

- (BOOL)isPermissionDeniedError {
    return _tag == SharingFileErrorResultPermissionDeniedError;
}

- (BOOL)isOther {
    return _tag == SharingFileErrorResultOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingFileErrorResultFileNotFoundError:
           return @"SharingFileErrorResultFileNotFoundError";
        case SharingFileErrorResultInvalidFileActionError:
           return @"SharingFileErrorResultInvalidFileActionError";
        case SharingFileErrorResultPermissionDeniedError:
           return @"SharingFileErrorResultPermissionDeniedError";
        case SharingFileErrorResultOther:
           return @"SharingFileErrorResultOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)fileNotFoundError {
    if (_tag != SharingFileErrorResultFileNotFoundError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingFileErrorResultFileNotFoundError, but was %@.", [self getTagName]];
    }
    return _fileNotFoundError;
}

- (NSString *)invalidFileActionError {
    if (_tag != SharingFileErrorResultInvalidFileActionError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingFileErrorResultInvalidFileActionError, but was %@.", [self getTagName]];
    }
    return _invalidFileActionError;
}

- (NSString *)permissionDeniedError {
    if (_tag != SharingFileErrorResultPermissionDeniedError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingFileErrorResultPermissionDeniedError, but was %@.", [self getTagName]];
    }
    return _permissionDeniedError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingFileErrorResultSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingFileErrorResultSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingFileErrorResultSerializer serialize:self] description];
}

@end


@implementation DbxSharingFileErrorResultSerializer 

+ (NSDictionary *)serialize:(DbxSharingFileErrorResult *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isFileNotFoundError]) {
        jsonDict[@"file_not_found_error"] = valueObj.fileNotFoundError;
        jsonDict[@".tag"] = @"file_not_found_error";
    }
    else if ([valueObj isInvalidFileActionError]) {
        jsonDict[@"invalid_file_action_error"] = valueObj.invalidFileActionError;
        jsonDict[@".tag"] = @"invalid_file_action_error";
    }
    else if ([valueObj isPermissionDeniedError]) {
        jsonDict[@"permission_denied_error"] = valueObj.permissionDeniedError;
        jsonDict[@".tag"] = @"permission_denied_error";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingFileErrorResult *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"file_not_found_error"]) {
        NSString *fileNotFoundError = valueDict[@"file_not_found_error"];
        return [[DbxSharingFileErrorResult alloc] initWithFileNotFoundError:fileNotFoundError];
    }
    if ([tag isEqualToString:@"invalid_file_action_error"]) {
        NSString *invalidFileActionError = valueDict[@"invalid_file_action_error"];
        return [[DbxSharingFileErrorResult alloc] initWithInvalidFileActionError:invalidFileActionError];
    }
    if ([tag isEqualToString:@"permission_denied_error"]) {
        NSString *permissionDeniedError = valueDict[@"permission_denied_error"];
        return [[DbxSharingFileErrorResult alloc] initWithPermissionDeniedError:permissionDeniedError];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingFileErrorResult alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
