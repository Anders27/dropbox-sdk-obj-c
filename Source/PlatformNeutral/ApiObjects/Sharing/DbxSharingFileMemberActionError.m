///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingFileMemberActionError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingFileMemberActionError 

- (instancetype)initWithInvalidMember {
    self = [super init];
    if (self != nil) {
        _tag = SharingFileMemberActionErrorInvalidMember;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = SharingFileMemberActionErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingFileMemberActionErrorOther;
    }
    return self;
}

- (BOOL)isInvalidMember {
    return _tag == SharingFileMemberActionErrorInvalidMember;
}

- (BOOL)isNoPermission {
    return _tag == SharingFileMemberActionErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == SharingFileMemberActionErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingFileMemberActionErrorInvalidMember:
           return @"SharingFileMemberActionErrorInvalidMember";
        case SharingFileMemberActionErrorNoPermission:
           return @"SharingFileMemberActionErrorNoPermission";
        case SharingFileMemberActionErrorOther:
           return @"SharingFileMemberActionErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingFileMemberActionErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingFileMemberActionErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingFileMemberActionErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingFileMemberActionErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingFileMemberActionError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInvalidMember]) {
        jsonDict[@".tag"] = @"invalid_member";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingFileMemberActionError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"invalid_member"]) {
        return [[DbxSharingFileMemberActionError alloc] initWithInvalidMember];
    }
    if ([tag isEqualToString:@"no_permission"]) {
        return [[DbxSharingFileMemberActionError alloc] initWithNoPermission];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingFileMemberActionError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
