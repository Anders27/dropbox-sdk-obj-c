///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingAccessLevel.h"
#import "DbxSharingFileMemberActionError.h"
#import "DbxSharingFileMemberActionIndividualResult.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingFileMemberActionIndividualResult 

- (instancetype)initWithSuccess:(DbxSharingAccessLevel *)success {
    self = [super init];
    if (self != nil) {
        _tag = (SharingFileMemberActionIndividualResultTag)SharingFileMemberActionIndividualResultSuccess;
        _success = success;
    }
    return self;
}

- (instancetype)initWithMemberError:(DbxSharingFileMemberActionError *)memberError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingFileMemberActionIndividualResultTag)SharingFileMemberActionIndividualResultMemberError;
        _memberError = memberError;
    }
    return self;
}

- (BOOL)isSuccess {
    return _tag == (SharingFileMemberActionIndividualResultTag)SharingFileMemberActionIndividualResultSuccess;
}

- (BOOL)isMemberError {
    return _tag == (SharingFileMemberActionIndividualResultTag)SharingFileMemberActionIndividualResultMemberError;
}

- (NSString *)getTagName {
    if (_tag == (SharingFileMemberActionIndividualResultTag)SharingFileMemberActionIndividualResultSuccess) {
        return @"(SharingFileMemberActionIndividualResultTag)SharingFileMemberActionIndividualResultSuccess";
    }
    if (_tag == (SharingFileMemberActionIndividualResultTag)SharingFileMemberActionIndividualResultMemberError) {
        return @"(SharingFileMemberActionIndividualResultTag)SharingFileMemberActionIndividualResultMemberError";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingAccessLevel *)success {
    if (_tag != (SharingFileMemberActionIndividualResultTag)SharingFileMemberActionIndividualResultSuccess) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingFileMemberActionIndividualResultTag)SharingFileMemberActionIndividualResultSuccess, but was %@.", [self getTagName]];
    }
    return _success;
}

- (DbxSharingFileMemberActionError *)memberError {
    if (_tag != (SharingFileMemberActionIndividualResultTag)SharingFileMemberActionIndividualResultMemberError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingFileMemberActionIndividualResultTag)SharingFileMemberActionIndividualResultMemberError, but was %@.", [self getTagName]];
    }
    return _memberError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingFileMemberActionIndividualResultSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingFileMemberActionIndividualResultSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingFileMemberActionIndividualResultSerializer serialize:self] description];
}

@end


@implementation DbxSharingFileMemberActionIndividualResultSerializer 

+ (NSDictionary *)serialize:(DbxSharingFileMemberActionIndividualResult *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isSuccess]) {
        if (valueObj.success) {
            jsonDict[@"success"] = [DbxSharingAccessLevelSerializer serialize:valueObj.success];
        }
        jsonDict[@".tag"] = @"success";
    }
    else if ([valueObj isMemberError]) {
        jsonDict = [[DbxSharingFileMemberActionErrorSerializer serialize:valueObj.memberError] mutableCopy];
        jsonDict[@".tag"] = @"member_error";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingFileMemberActionIndividualResult *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"success"]) {
        DbxSharingAccessLevel *success = valueDict[@"success"] ? [DbxSharingAccessLevelSerializer deserialize:valueDict[@"success"]] : nil;
        return [[DbxSharingFileMemberActionIndividualResult alloc] initWithSuccess:success];
    }
    if ([tag isEqualToString:@"member_error"]) {
        DbxSharingFileMemberActionError *memberError = [DbxSharingFileMemberActionErrorSerializer deserialize:valueDict[@"member_error"]];
        return [[DbxSharingFileMemberActionIndividualResult alloc] initWithMemberError:memberError];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
