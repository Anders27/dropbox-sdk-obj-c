///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingFileMemberActionError.h"
#import "DbxSharingFileMemberRemoveActionResult.h"
#import "DbxSharingMemberAccessLevelResult.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingFileMemberRemoveActionResult 

- (instancetype)initWithSuccess:(DbxSharingMemberAccessLevelResult *)success {
    self = [super init];
    if (self != nil) {
        _tag = SharingFileMemberRemoveActionResultSuccess;
        _success = success;
    }
    return self;
}

- (instancetype)initWithMemberError:(DbxSharingFileMemberActionError *)memberError {
    self = [super init];
    if (self != nil) {
        _tag = SharingFileMemberRemoveActionResultMemberError;
        _memberError = memberError;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingFileMemberRemoveActionResultOther;
    }
    return self;
}

- (BOOL)isSuccess {
    return _tag == SharingFileMemberRemoveActionResultSuccess;
}

- (BOOL)isMemberError {
    return _tag == SharingFileMemberRemoveActionResultMemberError;
}

- (BOOL)isOther {
    return _tag == SharingFileMemberRemoveActionResultOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingFileMemberRemoveActionResultSuccess:
           return @"SharingFileMemberRemoveActionResultSuccess";
        case SharingFileMemberRemoveActionResultMemberError:
           return @"SharingFileMemberRemoveActionResultMemberError";
        case SharingFileMemberRemoveActionResultOther:
           return @"SharingFileMemberRemoveActionResultOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingMemberAccessLevelResult *)success {
    if (_tag != SharingFileMemberRemoveActionResultSuccess) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingFileMemberRemoveActionResultSuccess, but was %@.", [self getTagName]];
    }
    return _success;
}

- (DbxSharingFileMemberActionError *)memberError {
    if (_tag != SharingFileMemberRemoveActionResultMemberError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingFileMemberRemoveActionResultMemberError, but was %@.", [self getTagName]];
    }
    return _memberError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingFileMemberRemoveActionResultSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingFileMemberRemoveActionResultSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingFileMemberRemoveActionResultSerializer serialize:self] description];
}

@end


@implementation DbxSharingFileMemberRemoveActionResultSerializer 

+ (NSDictionary *)serialize:(DbxSharingFileMemberRemoveActionResult *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isSuccess]) {
        jsonDict = [[DbxSharingMemberAccessLevelResultSerializer serialize:valueObj.success] mutableCopy];
        jsonDict[@".tag"] = @"success";
    }
    else if ([valueObj isMemberError]) {
        jsonDict = [[DbxSharingFileMemberActionErrorSerializer serialize:valueObj.memberError] mutableCopy];
        jsonDict[@".tag"] = @"member_error";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingFileMemberRemoveActionResult *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"success"]) {
        DbxSharingMemberAccessLevelResult *success = [DbxSharingMemberAccessLevelResultSerializer deserialize:valueDict];
        return [[DbxSharingFileMemberRemoveActionResult alloc] initWithSuccess:success];
    }
    if ([tag isEqualToString:@"member_error"]) {
        DbxSharingFileMemberActionError *memberError = [DbxSharingFileMemberActionErrorSerializer deserialize:valueDict[@"member_error"]];
        return [[DbxSharingFileMemberRemoveActionResult alloc] initWithMemberError:memberError];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingFileMemberRemoveActionResult alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
