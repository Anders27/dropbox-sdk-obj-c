///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingGetFileMetadataError.h"
#import "DbxSharingSharingFileAccessError.h"
#import "DbxSharingSharingUserError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingGetFileMetadataError 

- (instancetype)initWithUserError:(DbxSharingSharingUserError *)userError {
    self = [super init];
    if (self != nil) {
        _tag = SharingGetFileMetadataErrorUserError;
        _userError = userError;
    }
    return self;
}

- (instancetype)initWithAccessError:(DbxSharingSharingFileAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = SharingGetFileMetadataErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingGetFileMetadataErrorOther;
    }
    return self;
}

- (BOOL)isUserError {
    return _tag == SharingGetFileMetadataErrorUserError;
}

- (BOOL)isAccessError {
    return _tag == SharingGetFileMetadataErrorAccessError;
}

- (BOOL)isOther {
    return _tag == SharingGetFileMetadataErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingGetFileMetadataErrorUserError:
           return @"SharingGetFileMetadataErrorUserError";
        case SharingGetFileMetadataErrorAccessError:
           return @"SharingGetFileMetadataErrorAccessError";
        case SharingGetFileMetadataErrorOther:
           return @"SharingGetFileMetadataErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharingUserError *)userError {
    if (_tag != SharingGetFileMetadataErrorUserError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingGetFileMetadataErrorUserError, but was %@.", [self getTagName]];
    }
    return _userError;
}

- (DbxSharingSharingFileAccessError *)accessError {
    if (_tag != SharingGetFileMetadataErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingGetFileMetadataErrorAccessError, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingGetFileMetadataErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingGetFileMetadataErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingGetFileMetadataErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingGetFileMetadataErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingGetFileMetadataError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserError]) {
        jsonDict = [[DbxSharingSharingUserErrorSerializer serialize:valueObj.userError] mutableCopy];
        jsonDict[@".tag"] = @"user_error";
    }
    else if ([valueObj isAccessError]) {
        jsonDict = [[DbxSharingSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingGetFileMetadataError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_error"]) {
        DbxSharingSharingUserError *userError = [DbxSharingSharingUserErrorSerializer deserialize:valueDict[@"user_error"]];
        return [[DbxSharingGetFileMetadataError alloc] initWithUserError:userError];
    }
    if ([tag isEqualToString:@"access_error"]) {
        DbxSharingSharingFileAccessError *accessError = [DbxSharingSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DbxSharingGetFileMetadataError alloc] initWithAccessError:accessError];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingGetFileMetadataError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
