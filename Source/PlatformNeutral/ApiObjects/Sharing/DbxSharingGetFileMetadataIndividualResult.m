///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGGetFileMetadataIndividualResult.h"
#import "DBXSHARINGSharedFileMetadata.h"
#import "DBXSHARINGSharingFileAccessError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGGetFileMetadataIndividualResult 

- (instancetype)initWithMetadata:(DBXSHARINGSharedFileMetadata *)metadata {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGGetFileMetadataIndividualResultMetadata;
        _metadata = metadata;
    }
    return self;
}

- (instancetype)initWithAccessError:(DBXSHARINGSharingFileAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGGetFileMetadataIndividualResultAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGGetFileMetadataIndividualResultOther;
    }
    return self;
}

- (BOOL)isMetadata {
    return _tag == DBXSHARINGGetFileMetadataIndividualResultMetadata;
}

- (BOOL)isAccessError {
    return _tag == DBXSHARINGGetFileMetadataIndividualResultAccessError;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGGetFileMetadataIndividualResultOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGGetFileMetadataIndividualResultMetadata:
           return @"DBXSHARINGGetFileMetadataIndividualResultMetadata";
        case DBXSHARINGGetFileMetadataIndividualResultAccessError:
           return @"DBXSHARINGGetFileMetadataIndividualResultAccessError";
        case DBXSHARINGGetFileMetadataIndividualResultOther:
           return @"DBXSHARINGGetFileMetadataIndividualResultOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharedFileMetadata *)metadata {
    if (_tag != DBXSHARINGGetFileMetadataIndividualResultMetadata) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGGetFileMetadataIndividualResultMetadata`, but was %@.", [self getTagName]];
    }
    return _metadata;
}

- (DBXSHARINGSharingFileAccessError *)accessError {
    if (_tag != DBXSHARINGGetFileMetadataIndividualResultAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGGetFileMetadataIndividualResultAccessError`, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGGetFileMetadataIndividualResultSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGGetFileMetadataIndividualResultSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGGetFileMetadataIndividualResultSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGGetFileMetadataIndividualResultSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGGetFileMetadataIndividualResult *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isMetadata]) {
        jsonDict = [[DBXSHARINGSharedFileMetadataSerializer serialize:valueObj.metadata] mutableCopy];
        jsonDict[@".tag"] = @"metadata";
    }
    else if ([valueObj isAccessError]) {
        jsonDict = [[DBXSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGGetFileMetadataIndividualResult *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"metadata"]) {
        DBXSHARINGSharedFileMetadata *metadata = [DBXSHARINGSharedFileMetadataSerializer deserialize:valueDict];
        return [[DBXSHARINGGetFileMetadataIndividualResult alloc] initWithMetadata:metadata];
    }
    else if ([tag isEqualToString:@"access_error"]) {
        DBXSHARINGSharingFileAccessError *accessError = [DBXSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DBXSHARINGGetFileMetadataIndividualResult alloc] initWithAccessError:accessError];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGGetFileMetadataIndividualResult alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
