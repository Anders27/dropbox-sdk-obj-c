///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingInviteeInfo.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingInviteeInfo 

- (instancetype)initWithEmail:(NSString *)email {
    self = [super init];
    if (self != nil) {
        _tag = (SharingInviteeInfoTag)SharingInviteeInfoEmail;
        _email = email;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingInviteeInfoTag)SharingInviteeInfoOther;
    }
    return self;
}

- (BOOL)isEmail {
    return _tag == (SharingInviteeInfoTag)SharingInviteeInfoEmail;
}

- (BOOL)isOther {
    return _tag == (SharingInviteeInfoTag)SharingInviteeInfoOther;
}

- (NSString *)getTagName {
    if (_tag == (SharingInviteeInfoTag)SharingInviteeInfoEmail) {
        return @"(SharingInviteeInfoTag)SharingInviteeInfoEmail";
    }
    if (_tag == (SharingInviteeInfoTag)SharingInviteeInfoOther) {
        return @"(SharingInviteeInfoTag)SharingInviteeInfoOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)email {
    if (_tag != (SharingInviteeInfoTag)SharingInviteeInfoEmail) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingInviteeInfoTag)SharingInviteeInfoEmail, but was %@.", [self getTagName]];
    }
    return _email;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingInviteeInfoSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingInviteeInfoSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingInviteeInfoSerializer serialize:self] description];
}

@end


@implementation DbxSharingInviteeInfoSerializer 

+ (NSDictionary *)serialize:(DbxSharingInviteeInfo *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isEmail]) {
        jsonDict[@"email"] = valueObj.email;
        jsonDict[@".tag"] = @"email";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingInviteeInfo *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"email"]) {
        NSString *email = valueDict[@"email"];
        return [[DbxSharingInviteeInfo alloc] initWithEmail:email];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingInviteeInfo alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
