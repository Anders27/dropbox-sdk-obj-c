///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingJobError.h"
#import "DbxSharingRelinquishFolderMembershipError.h"
#import "DbxSharingRemoveFolderMemberError.h"
#import "DbxSharingUnshareFolderError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingJobError 

- (instancetype)initWithUnshareFolderError:(DbxSharingUnshareFolderError *)unshareFolderError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingJobErrorTag)SharingJobErrorUnshareFolderError;
        _unshareFolderError = unshareFolderError;
    }
    return self;
}

- (instancetype)initWithRemoveFolderMemberError:(DbxSharingRemoveFolderMemberError *)removeFolderMemberError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingJobErrorTag)SharingJobErrorRemoveFolderMemberError;
        _removeFolderMemberError = removeFolderMemberError;
    }
    return self;
}

- (instancetype)initWithRelinquishFolderMembershipError:(DbxSharingRelinquishFolderMembershipError *)relinquishFolderMembershipError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingJobErrorTag)SharingJobErrorRelinquishFolderMembershipError;
        _relinquishFolderMembershipError = relinquishFolderMembershipError;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingJobErrorTag)SharingJobErrorOther;
    }
    return self;
}

- (BOOL)isUnshareFolderError {
    return _tag == (SharingJobErrorTag)SharingJobErrorUnshareFolderError;
}

- (BOOL)isRemoveFolderMemberError {
    return _tag == (SharingJobErrorTag)SharingJobErrorRemoveFolderMemberError;
}

- (BOOL)isRelinquishFolderMembershipError {
    return _tag == (SharingJobErrorTag)SharingJobErrorRelinquishFolderMembershipError;
}

- (BOOL)isOther {
    return _tag == (SharingJobErrorTag)SharingJobErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (SharingJobErrorTag)SharingJobErrorUnshareFolderError) {
        return @"(SharingJobErrorTag)SharingJobErrorUnshareFolderError";
    }
    if (_tag == (SharingJobErrorTag)SharingJobErrorRemoveFolderMemberError) {
        return @"(SharingJobErrorTag)SharingJobErrorRemoveFolderMemberError";
    }
    if (_tag == (SharingJobErrorTag)SharingJobErrorRelinquishFolderMembershipError) {
        return @"(SharingJobErrorTag)SharingJobErrorRelinquishFolderMembershipError";
    }
    if (_tag == (SharingJobErrorTag)SharingJobErrorOther) {
        return @"(SharingJobErrorTag)SharingJobErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingUnshareFolderError *)unshareFolderError {
    if (_tag != (SharingJobErrorTag)SharingJobErrorUnshareFolderError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingJobErrorTag)SharingJobErrorUnshareFolderError, but was %@.", [self getTagName]];
    }
    return _unshareFolderError;
}

- (DbxSharingRemoveFolderMemberError *)removeFolderMemberError {
    if (_tag != (SharingJobErrorTag)SharingJobErrorRemoveFolderMemberError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingJobErrorTag)SharingJobErrorRemoveFolderMemberError, but was %@.", [self getTagName]];
    }
    return _removeFolderMemberError;
}

- (DbxSharingRelinquishFolderMembershipError *)relinquishFolderMembershipError {
    if (_tag != (SharingJobErrorTag)SharingJobErrorRelinquishFolderMembershipError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingJobErrorTag)SharingJobErrorRelinquishFolderMembershipError, but was %@.", [self getTagName]];
    }
    return _relinquishFolderMembershipError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingJobErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingJobErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingJobErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingJobErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingJobError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUnshareFolderError]) {
        jsonDict[@"unshare_folder_error"] = [DbxSharingUnshareFolderErrorSerializer serialize:valueObj.unshareFolderError];
        jsonDict[@".tag"] = @"unshare_folder_error";
    }
    else if ([valueObj isRemoveFolderMemberError]) {
        jsonDict[@"remove_folder_member_error"] = [DbxSharingRemoveFolderMemberErrorSerializer serialize:valueObj.removeFolderMemberError];
        jsonDict[@".tag"] = @"remove_folder_member_error";
    }
    else if ([valueObj isRelinquishFolderMembershipError]) {
        jsonDict[@"relinquish_folder_membership_error"] = [DbxSharingRelinquishFolderMembershipErrorSerializer serialize:valueObj.relinquishFolderMembershipError];
        jsonDict[@".tag"] = @"relinquish_folder_membership_error";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingJobError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"unshare_folder_error"]) {
        DbxSharingUnshareFolderError *unshareFolderError = [DbxSharingUnshareFolderErrorSerializer deserialize:valueDict[@"unshare_folder_error"]];
        return [[DbxSharingJobError alloc] initWithUnshareFolderError:unshareFolderError];
    }
    if ([tag isEqualToString:@"remove_folder_member_error"]) {
        DbxSharingRemoveFolderMemberError *removeFolderMemberError = [DbxSharingRemoveFolderMemberErrorSerializer deserialize:valueDict[@"remove_folder_member_error"]];
        return [[DbxSharingJobError alloc] initWithRemoveFolderMemberError:removeFolderMemberError];
    }
    if ([tag isEqualToString:@"relinquish_folder_membership_error"]) {
        DbxSharingRelinquishFolderMembershipError *relinquishFolderMembershipError = [DbxSharingRelinquishFolderMembershipErrorSerializer deserialize:valueDict[@"relinquish_folder_membership_error"]];
        return [[DbxSharingJobError alloc] initWithRelinquishFolderMembershipError:relinquishFolderMembershipError];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingJobError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
