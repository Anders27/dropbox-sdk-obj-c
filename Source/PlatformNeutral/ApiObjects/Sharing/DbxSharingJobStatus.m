///
/// Auto-generated by Stone, do not modify.
///

#import "DBXASYNCPollResultBase.h"
#import "DBXSHARINGJobError.h"
#import "DBXSHARINGJobStatus.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGJobStatus 

- (instancetype)initWithInProgress {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGJobStatusInProgress;
    }
    return self;
}

- (instancetype)initWithComplete {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGJobStatusComplete;
    }
    return self;
}

- (instancetype)initWithFailed:(DBXSHARINGJobError *)failed {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGJobStatusFailed;
        _failed = failed;
    }
    return self;
}

- (BOOL)isInProgress {
    return _tag == DBXSHARINGJobStatusInProgress;
}

- (BOOL)isComplete {
    return _tag == DBXSHARINGJobStatusComplete;
}

- (BOOL)isFailed {
    return _tag == DBXSHARINGJobStatusFailed;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGJobStatusInProgress:
           return @"DBXSHARINGJobStatusInProgress";
        case DBXSHARINGJobStatusComplete:
           return @"DBXSHARINGJobStatusComplete";
        case DBXSHARINGJobStatusFailed:
           return @"DBXSHARINGJobStatusFailed";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGJobError *)failed {
    if (_tag != DBXSHARINGJobStatusFailed) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGJobStatusFailed`, but was %@.", [self getTagName]];
    }
    return _failed;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGJobStatusSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGJobStatusSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGJobStatusSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGJobStatusSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGJobStatus *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInProgress]) {
        jsonDict[@".tag"] = @"in_progress";
    }
    else if ([valueObj isComplete]) {
        jsonDict[@".tag"] = @"complete";
    }
    else if ([valueObj isFailed]) {
        jsonDict = [[DBXSHARINGJobErrorSerializer serialize:valueObj.failed] mutableCopy];
        jsonDict[@".tag"] = @"failed";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGJobStatus *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"in_progress"]) {
        return [[DBXSHARINGJobStatus alloc] initWithInProgress];
    }
    else if ([tag isEqualToString:@"complete"]) {
        return [[DBXSHARINGJobStatus alloc] initWithComplete];
    }
    else if ([tag isEqualToString:@"failed"]) {
        DBXSHARINGJobError *failed = [DBXSHARINGJobErrorSerializer deserialize:valueDict[@"failed"]];
        return [[DBXSHARINGJobStatus alloc] initWithFailed:failed];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
