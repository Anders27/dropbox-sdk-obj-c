///
/// Auto-generated by Stone, do not modify.
///

#import "DbxAsyncPollResultBase.h"
#import "DbxSharingJobError.h"
#import "DbxSharingJobStatus.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingJobStatus 

- (instancetype)initWithInProgress {
    self = [super init];
    if (self != nil) {
        _tag = SharingJobStatusInProgress;
    }
    return self;
}

- (instancetype)initWithComplete {
    self = [super init];
    if (self != nil) {
        _tag = SharingJobStatusComplete;
    }
    return self;
}

- (instancetype)initWithFailed:(DbxSharingJobError *)failed {
    self = [super init];
    if (self != nil) {
        _tag = SharingJobStatusFailed;
        _failed = failed;
    }
    return self;
}

- (BOOL)isInProgress {
    return _tag == SharingJobStatusInProgress;
}

- (BOOL)isComplete {
    return _tag == SharingJobStatusComplete;
}

- (BOOL)isFailed {
    return _tag == SharingJobStatusFailed;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingJobStatusInProgress:
           return @"SharingJobStatusInProgress";
        case SharingJobStatusComplete:
           return @"SharingJobStatusComplete";
        case SharingJobStatusFailed:
           return @"SharingJobStatusFailed";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingJobError *)failed {
    if (_tag != SharingJobStatusFailed) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingJobStatusFailed, but was %@.", [self getTagName]];
    }
    return _failed;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingJobStatusSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingJobStatusSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingJobStatusSerializer serialize:self] description];
}

@end


@implementation DbxSharingJobStatusSerializer 

+ (NSDictionary *)serialize:(DbxSharingJobStatus *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInProgress]) {
        jsonDict[@".tag"] = @"in_progress";
    }
    else if ([valueObj isComplete]) {
        jsonDict[@".tag"] = @"complete";
    }
    else if ([valueObj isFailed]) {
        jsonDict = [[DbxSharingJobErrorSerializer serialize:valueObj.failed] mutableCopy];
        jsonDict[@".tag"] = @"failed";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingJobStatus *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"in_progress"]) {
        return [[DbxSharingJobStatus alloc] initWithInProgress];
    }
    if ([tag isEqualToString:@"complete"]) {
        return [[DbxSharingJobStatus alloc] initWithComplete];
    }
    if ([tag isEqualToString:@"failed"]) {
        DbxSharingJobError *failed = [DbxSharingJobErrorSerializer deserialize:valueDict[@"failed"]];
        return [[DbxSharingJobStatus alloc] initWithFailed:failed];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
