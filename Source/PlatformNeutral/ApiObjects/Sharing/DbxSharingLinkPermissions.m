///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingLinkPermissions.h"
#import "DbxSharingRequestedVisibility.h"
#import "DbxSharingResolvedVisibility.h"
#import "DbxSharingSharedLinkAccessFailureReason.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingLinkPermissions 

- (instancetype)initWithCanRevoke:(NSNumber *)canRevoke resolvedVisibility:(DbxSharingResolvedVisibility *)resolvedVisibility requestedVisibility:(DbxSharingRequestedVisibility *)requestedVisibility revokeFailureReason:(DbxSharingSharedLinkAccessFailureReason *)revokeFailureReason {

    self = [super init];
    if (self != nil) {
        _resolvedVisibility = resolvedVisibility;
        _requestedVisibility = requestedVisibility;
        _canRevoke = canRevoke;
        _revokeFailureReason = revokeFailureReason;
    }
    return self;
}

- (instancetype)initWithCanRevoke:(NSNumber *)canRevoke {
    return [self initWithCanRevoke:canRevoke resolvedVisibility:nil requestedVisibility:nil revokeFailureReason:nil];
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingLinkPermissionsSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingLinkPermissionsSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingLinkPermissionsSerializer serialize:self] description];
}

@end


@implementation DbxSharingLinkPermissionsSerializer 

+ (NSDictionary *)serialize:(DbxSharingLinkPermissions *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    jsonDict[@"can_revoke"] = [DbxBoolSerializer serialize:valueObj.canRevoke];
    if (valueObj.resolvedVisibility != nil) {
        jsonDict[@"resolved_visibility"] = [DbxSharingResolvedVisibilitySerializer serialize:valueObj.resolvedVisibility];
    }
    if (valueObj.requestedVisibility != nil) {
        jsonDict[@"requested_visibility"] = [DbxSharingRequestedVisibilitySerializer serialize:valueObj.requestedVisibility];
    }
    if (valueObj.revokeFailureReason != nil) {
        jsonDict[@"revoke_failure_reason"] = [DbxSharingSharedLinkAccessFailureReasonSerializer serialize:valueObj.revokeFailureReason];
    }

    return jsonDict;
}

+ (DbxSharingLinkPermissions *)deserialize:(NSDictionary *)valueDict {
    NSNumber *canRevoke = [DbxBoolSerializer deserialize:valueDict[@"can_revoke"]];
    DbxSharingResolvedVisibility *resolvedVisibility = valueDict[@"resolved_visibility"] != nil ? [DbxSharingResolvedVisibilitySerializer deserialize:valueDict[@"resolved_visibility"]] : nil;
    DbxSharingRequestedVisibility *requestedVisibility = valueDict[@"requested_visibility"] != nil ? [DbxSharingRequestedVisibilitySerializer deserialize:valueDict[@"requested_visibility"]] : nil;
    DbxSharingSharedLinkAccessFailureReason *revokeFailureReason = valueDict[@"revoke_failure_reason"] != nil ? [DbxSharingSharedLinkAccessFailureReasonSerializer deserialize:valueDict[@"revoke_failure_reason"]] : nil;

    return [[DbxSharingLinkPermissions alloc] initWithCanRevoke:canRevoke resolvedVisibility:resolvedVisibility requestedVisibility:requestedVisibility revokeFailureReason:revokeFailureReason];
}

@end
