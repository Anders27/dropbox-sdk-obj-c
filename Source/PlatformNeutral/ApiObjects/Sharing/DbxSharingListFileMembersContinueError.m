///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingListFileMembersContinueError.h"
#import "DbxSharingSharingFileAccessError.h"
#import "DbxSharingSharingUserError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingListFileMembersContinueError 

- (instancetype)initWithUserError:(DbxSharingSharingUserError *)userError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorUserError;
        _userError = userError;
    }
    return self;
}

- (instancetype)initWithAccessError:(DbxSharingSharingFileAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithInvalidCursor {
    self = [super init];
    if (self != nil) {
        _tag = (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorInvalidCursor;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorOther;
    }
    return self;
}

- (BOOL)isUserError {
    return _tag == (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorUserError;
}

- (BOOL)isAccessError {
    return _tag == (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorAccessError;
}

- (BOOL)isInvalidCursor {
    return _tag == (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorInvalidCursor;
}

- (BOOL)isOther {
    return _tag == (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorUserError) {
        return @"(SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorUserError";
    }
    if (_tag == (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorAccessError) {
        return @"(SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorAccessError";
    }
    if (_tag == (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorInvalidCursor) {
        return @"(SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorInvalidCursor";
    }
    if (_tag == (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorOther) {
        return @"(SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharingUserError *)userError {
    if (_tag != (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorUserError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorUserError, but was %@.", [self getTagName]];
    }
    return _userError;
}

- (DbxSharingSharingFileAccessError *)accessError {
    if (_tag != (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingListFileMembersContinueErrorTag)SharingListFileMembersContinueErrorAccessError, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingListFileMembersContinueErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingListFileMembersContinueErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingListFileMembersContinueErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingListFileMembersContinueErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingListFileMembersContinueError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserError]) {
        jsonDict = [[DbxSharingSharingUserErrorSerializer serialize:valueObj.userError] mutableCopy];
        jsonDict[@".tag"] = @"user_error";
    }
    else if ([valueObj isAccessError]) {
        jsonDict = [[DbxSharingSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isInvalidCursor]) {
        jsonDict[@".tag"] = @"invalid_cursor";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingListFileMembersContinueError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_error"]) {
        DbxSharingSharingUserError *userError = [DbxSharingSharingUserErrorSerializer deserialize:valueDict[@"user_error"]];
        return [[DbxSharingListFileMembersContinueError alloc] initWithUserError:userError];
    }
    if ([tag isEqualToString:@"access_error"]) {
        DbxSharingSharingFileAccessError *accessError = [DbxSharingSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DbxSharingListFileMembersContinueError alloc] initWithAccessError:accessError];
    }
    if ([tag isEqualToString:@"invalid_cursor"]) {
        return [[DbxSharingListFileMembersContinueError alloc] initWithInvalidCursor];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingListFileMembersContinueError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
