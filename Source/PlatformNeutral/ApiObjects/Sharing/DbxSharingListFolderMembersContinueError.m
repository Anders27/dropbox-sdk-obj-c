///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGListFolderMembersContinueError.h"
#import "DBXSHARINGSharedFolderAccessError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGListFolderMembersContinueError 

- (instancetype)initWithAccessError:(DBXSHARINGSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGListFolderMembersContinueErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithInvalidCursor {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGListFolderMembersContinueErrorInvalidCursor;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGListFolderMembersContinueErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == DBXSHARINGListFolderMembersContinueErrorAccessError;
}

- (BOOL)isInvalidCursor {
    return _tag == DBXSHARINGListFolderMembersContinueErrorInvalidCursor;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGListFolderMembersContinueErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGListFolderMembersContinueErrorAccessError:
           return @"DBXSHARINGListFolderMembersContinueErrorAccessError";
        case DBXSHARINGListFolderMembersContinueErrorInvalidCursor:
           return @"DBXSHARINGListFolderMembersContinueErrorInvalidCursor";
        case DBXSHARINGListFolderMembersContinueErrorOther:
           return @"DBXSHARINGListFolderMembersContinueErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharedFolderAccessError *)accessError {
    if (_tag != DBXSHARINGListFolderMembersContinueErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGListFolderMembersContinueErrorAccessError`, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGListFolderMembersContinueErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGListFolderMembersContinueErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGListFolderMembersContinueErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGListFolderMembersContinueErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGListFolderMembersContinueError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DBXSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isInvalidCursor]) {
        jsonDict[@".tag"] = @"invalid_cursor";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGListFolderMembersContinueError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DBXSHARINGSharedFolderAccessError *accessError = [DBXSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DBXSHARINGListFolderMembersContinueError alloc] initWithAccessError:accessError];
    }
    else if ([tag isEqualToString:@"invalid_cursor"]) {
        return [[DBXSHARINGListFolderMembersContinueError alloc] initWithInvalidCursor];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGListFolderMembersContinueError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
