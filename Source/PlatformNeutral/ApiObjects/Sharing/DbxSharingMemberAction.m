///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingMemberAction.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingMemberAction 

- (instancetype)initWithLeaveACopy {
    self = [super init];
    if (self != nil) {
        _tag = SharingMemberActionLeaveACopy;
    }
    return self;
}

- (instancetype)initWithMakeEditor {
    self = [super init];
    if (self != nil) {
        _tag = SharingMemberActionMakeEditor;
    }
    return self;
}

- (instancetype)initWithMakeOwner {
    self = [super init];
    if (self != nil) {
        _tag = SharingMemberActionMakeOwner;
    }
    return self;
}

- (instancetype)initWithMakeViewer {
    self = [super init];
    if (self != nil) {
        _tag = SharingMemberActionMakeViewer;
    }
    return self;
}

- (instancetype)initWithMakeViewerNoComment {
    self = [super init];
    if (self != nil) {
        _tag = SharingMemberActionMakeViewerNoComment;
    }
    return self;
}

- (instancetype)initWithRemove {
    self = [super init];
    if (self != nil) {
        _tag = SharingMemberActionRemove;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingMemberActionOther;
    }
    return self;
}

- (BOOL)isLeaveACopy {
    return _tag == SharingMemberActionLeaveACopy;
}

- (BOOL)isMakeEditor {
    return _tag == SharingMemberActionMakeEditor;
}

- (BOOL)isMakeOwner {
    return _tag == SharingMemberActionMakeOwner;
}

- (BOOL)isMakeViewer {
    return _tag == SharingMemberActionMakeViewer;
}

- (BOOL)isMakeViewerNoComment {
    return _tag == SharingMemberActionMakeViewerNoComment;
}

- (BOOL)isRemove {
    return _tag == SharingMemberActionRemove;
}

- (BOOL)isOther {
    return _tag == SharingMemberActionOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingMemberActionLeaveACopy:
           return @"SharingMemberActionLeaveACopy";
        case SharingMemberActionMakeEditor:
           return @"SharingMemberActionMakeEditor";
        case SharingMemberActionMakeOwner:
           return @"SharingMemberActionMakeOwner";
        case SharingMemberActionMakeViewer:
           return @"SharingMemberActionMakeViewer";
        case SharingMemberActionMakeViewerNoComment:
           return @"SharingMemberActionMakeViewerNoComment";
        case SharingMemberActionRemove:
           return @"SharingMemberActionRemove";
        case SharingMemberActionOther:
           return @"SharingMemberActionOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingMemberActionSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingMemberActionSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingMemberActionSerializer serialize:self] description];
}

@end


@implementation DbxSharingMemberActionSerializer 

+ (NSDictionary *)serialize:(DbxSharingMemberAction *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isLeaveACopy]) {
        jsonDict[@".tag"] = @"leave_a_copy";
    }
    else if ([valueObj isMakeEditor]) {
        jsonDict[@".tag"] = @"make_editor";
    }
    else if ([valueObj isMakeOwner]) {
        jsonDict[@".tag"] = @"make_owner";
    }
    else if ([valueObj isMakeViewer]) {
        jsonDict[@".tag"] = @"make_viewer";
    }
    else if ([valueObj isMakeViewerNoComment]) {
        jsonDict[@".tag"] = @"make_viewer_no_comment";
    }
    else if ([valueObj isRemove]) {
        jsonDict[@".tag"] = @"remove";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingMemberAction *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"leave_a_copy"]) {
        return [[DbxSharingMemberAction alloc] initWithLeaveACopy];
    }
    if ([tag isEqualToString:@"make_editor"]) {
        return [[DbxSharingMemberAction alloc] initWithMakeEditor];
    }
    if ([tag isEqualToString:@"make_owner"]) {
        return [[DbxSharingMemberAction alloc] initWithMakeOwner];
    }
    if ([tag isEqualToString:@"make_viewer"]) {
        return [[DbxSharingMemberAction alloc] initWithMakeViewer];
    }
    if ([tag isEqualToString:@"make_viewer_no_comment"]) {
        return [[DbxSharingMemberAction alloc] initWithMakeViewerNoComment];
    }
    if ([tag isEqualToString:@"remove"]) {
        return [[DbxSharingMemberAction alloc] initWithRemove];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingMemberAction alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
