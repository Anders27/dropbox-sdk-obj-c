///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingModifySharedLinkSettingsError.h"
#import "DbxSharingSharedLinkError.h"
#import "DbxSharingSharedLinkSettingsError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingModifySharedLinkSettingsError 

- (instancetype)initWithSharedLinkNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSharedLinkNotFound;
    }
    return self;
}

- (instancetype)initWithSharedLinkAccessDenied {
    self = [super init];
    if (self != nil) {
        _tag = (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSharedLinkAccessDenied;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorOther;
    }
    return self;
}

- (instancetype)initWithSettingsError:(DbxSharingSharedLinkSettingsError *)settingsError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSettingsError;
        _settingsError = settingsError;
    }
    return self;
}

- (instancetype)initWithEmailNotVerified {
    self = [super init];
    if (self != nil) {
        _tag = (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorEmailNotVerified;
    }
    return self;
}

- (BOOL)isSharedLinkNotFound {
    return _tag == (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSharedLinkNotFound;
}

- (BOOL)isSharedLinkAccessDenied {
    return _tag == (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSharedLinkAccessDenied;
}

- (BOOL)isOther {
    return _tag == (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorOther;
}

- (BOOL)isSettingsError {
    return _tag == (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSettingsError;
}

- (BOOL)isEmailNotVerified {
    return _tag == (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorEmailNotVerified;
}

- (NSString *)getTagName {
    if (_tag == (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSharedLinkNotFound) {
        return @"(SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSharedLinkNotFound";
    }
    if (_tag == (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSharedLinkAccessDenied) {
        return @"(SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSharedLinkAccessDenied";
    }
    if (_tag == (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorOther) {
        return @"(SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorOther";
    }
    if (_tag == (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSettingsError) {
        return @"(SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSettingsError";
    }
    if (_tag == (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorEmailNotVerified) {
        return @"(SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorEmailNotVerified";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharedLinkSettingsError *)settingsError {
    if (_tag != (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSettingsError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingModifySharedLinkSettingsErrorTag)SharingModifySharedLinkSettingsErrorSettingsError, but was %@.", [self getTagName]];
    }
    return _settingsError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingModifySharedLinkSettingsErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingModifySharedLinkSettingsErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingModifySharedLinkSettingsErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingModifySharedLinkSettingsErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingModifySharedLinkSettingsError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isSharedLinkNotFound]) {
        jsonDict[@".tag"] = @"shared_link_not_found";
    }
    else if ([valueObj isSharedLinkAccessDenied]) {
        jsonDict[@".tag"] = @"shared_link_access_denied";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isSettingsError]) {
        jsonDict[@"settings_error"] = [DbxSharingSharedLinkSettingsErrorSerializer serialize:valueObj.settingsError];
        jsonDict[@".tag"] = @"settings_error";
    }
    else if ([valueObj isEmailNotVerified]) {
        jsonDict[@".tag"] = @"email_not_verified";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingModifySharedLinkSettingsError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"shared_link_not_found"]) {
        return [[DbxSharingModifySharedLinkSettingsError alloc] initWithSharedLinkNotFound];
    }
    if ([tag isEqualToString:@"shared_link_access_denied"]) {
        return [[DbxSharingModifySharedLinkSettingsError alloc] initWithSharedLinkAccessDenied];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingModifySharedLinkSettingsError alloc] initWithOther];
    }
    if ([tag isEqualToString:@"settings_error"]) {
        DbxSharingSharedLinkSettingsError *settingsError = [DbxSharingSharedLinkSettingsErrorSerializer deserialize:valueDict[@"settings_error"]];
        return [[DbxSharingModifySharedLinkSettingsError alloc] initWithSettingsError:settingsError];
    }
    if ([tag isEqualToString:@"email_not_verified"]) {
        return [[DbxSharingModifySharedLinkSettingsError alloc] initWithEmailNotVerified];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
