///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingInsufficientQuotaAmounts.h"
#import "DbxSharingMountFolderError.h"
#import "DbxSharingSharedFolderAccessError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingMountFolderError 

- (instancetype)initWithAccessError:(DbxSharingSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingMountFolderErrorTag)SharingMountFolderErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithInsideSharedFolder {
    self = [super init];
    if (self != nil) {
        _tag = (SharingMountFolderErrorTag)SharingMountFolderErrorInsideSharedFolder;
    }
    return self;
}

- (instancetype)initWithInsufficientQuota:(DbxSharingInsufficientQuotaAmounts *)insufficientQuota {
    self = [super init];
    if (self != nil) {
        _tag = (SharingMountFolderErrorTag)SharingMountFolderErrorInsufficientQuota;
        _insufficientQuota = insufficientQuota;
    }
    return self;
}

- (instancetype)initWithAlreadyMounted {
    self = [super init];
    if (self != nil) {
        _tag = (SharingMountFolderErrorTag)SharingMountFolderErrorAlreadyMounted;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = (SharingMountFolderErrorTag)SharingMountFolderErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithNotMountable {
    self = [super init];
    if (self != nil) {
        _tag = (SharingMountFolderErrorTag)SharingMountFolderErrorNotMountable;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingMountFolderErrorTag)SharingMountFolderErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == (SharingMountFolderErrorTag)SharingMountFolderErrorAccessError;
}

- (BOOL)isInsideSharedFolder {
    return _tag == (SharingMountFolderErrorTag)SharingMountFolderErrorInsideSharedFolder;
}

- (BOOL)isInsufficientQuota {
    return _tag == (SharingMountFolderErrorTag)SharingMountFolderErrorInsufficientQuota;
}

- (BOOL)isAlreadyMounted {
    return _tag == (SharingMountFolderErrorTag)SharingMountFolderErrorAlreadyMounted;
}

- (BOOL)isNoPermission {
    return _tag == (SharingMountFolderErrorTag)SharingMountFolderErrorNoPermission;
}

- (BOOL)isNotMountable {
    return _tag == (SharingMountFolderErrorTag)SharingMountFolderErrorNotMountable;
}

- (BOOL)isOther {
    return _tag == (SharingMountFolderErrorTag)SharingMountFolderErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (SharingMountFolderErrorTag)SharingMountFolderErrorAccessError) {
        return @"(SharingMountFolderErrorTag)SharingMountFolderErrorAccessError";
    }
    if (_tag == (SharingMountFolderErrorTag)SharingMountFolderErrorInsideSharedFolder) {
        return @"(SharingMountFolderErrorTag)SharingMountFolderErrorInsideSharedFolder";
    }
    if (_tag == (SharingMountFolderErrorTag)SharingMountFolderErrorInsufficientQuota) {
        return @"(SharingMountFolderErrorTag)SharingMountFolderErrorInsufficientQuota";
    }
    if (_tag == (SharingMountFolderErrorTag)SharingMountFolderErrorAlreadyMounted) {
        return @"(SharingMountFolderErrorTag)SharingMountFolderErrorAlreadyMounted";
    }
    if (_tag == (SharingMountFolderErrorTag)SharingMountFolderErrorNoPermission) {
        return @"(SharingMountFolderErrorTag)SharingMountFolderErrorNoPermission";
    }
    if (_tag == (SharingMountFolderErrorTag)SharingMountFolderErrorNotMountable) {
        return @"(SharingMountFolderErrorTag)SharingMountFolderErrorNotMountable";
    }
    if (_tag == (SharingMountFolderErrorTag)SharingMountFolderErrorOther) {
        return @"(SharingMountFolderErrorTag)SharingMountFolderErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharedFolderAccessError *)accessError {
    if (_tag != (SharingMountFolderErrorTag)SharingMountFolderErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingMountFolderErrorTag)SharingMountFolderErrorAccessError, but was %@.", [self getTagName]];
    }
    return _accessError;
}

- (DbxSharingInsufficientQuotaAmounts *)insufficientQuota {
    if (_tag != (SharingMountFolderErrorTag)SharingMountFolderErrorInsufficientQuota) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingMountFolderErrorTag)SharingMountFolderErrorInsufficientQuota, but was %@.", [self getTagName]];
    }
    return _insufficientQuota;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingMountFolderErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingMountFolderErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingMountFolderErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingMountFolderErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingMountFolderError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DbxSharingSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isInsideSharedFolder]) {
        jsonDict[@".tag"] = @"inside_shared_folder";
    }
    else if ([valueObj isInsufficientQuota]) {
        jsonDict = [[DbxSharingInsufficientQuotaAmountsSerializer serialize:valueObj.insufficientQuota] mutableCopy];
        jsonDict[@".tag"] = @"insufficient_quota";
    }
    else if ([valueObj isAlreadyMounted]) {
        jsonDict[@".tag"] = @"already_mounted";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isNotMountable]) {
        jsonDict[@".tag"] = @"not_mountable";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingMountFolderError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DbxSharingSharedFolderAccessError *accessError = [DbxSharingSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DbxSharingMountFolderError alloc] initWithAccessError:accessError];
    }
    if ([tag isEqualToString:@"inside_shared_folder"]) {
        return [[DbxSharingMountFolderError alloc] initWithInsideSharedFolder];
    }
    if ([tag isEqualToString:@"insufficient_quota"]) {
        DbxSharingInsufficientQuotaAmounts *insufficientQuota = [DbxSharingInsufficientQuotaAmountsSerializer deserialize:valueDict];
        return [[DbxSharingMountFolderError alloc] initWithInsufficientQuota:insufficientQuota];
    }
    if ([tag isEqualToString:@"already_mounted"]) {
        return [[DbxSharingMountFolderError alloc] initWithAlreadyMounted];
    }
    if ([tag isEqualToString:@"no_permission"]) {
        return [[DbxSharingMountFolderError alloc] initWithNoPermission];
    }
    if ([tag isEqualToString:@"not_mountable"]) {
        return [[DbxSharingMountFolderError alloc] initWithNotMountable];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingMountFolderError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
