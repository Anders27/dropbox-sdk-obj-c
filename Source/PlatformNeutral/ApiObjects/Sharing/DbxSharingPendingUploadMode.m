///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingPendingUploadMode.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingPendingUploadMode 

- (instancetype)initWithFile {
    self = [super init];
    if (self != nil) {
        _tag = (SharingPendingUploadModeTag)SharingPendingUploadModeFile;
    }
    return self;
}

- (instancetype)initWithFolder {
    self = [super init];
    if (self != nil) {
        _tag = (SharingPendingUploadModeTag)SharingPendingUploadModeFolder;
    }
    return self;
}

- (BOOL)isFile {
    return _tag == (SharingPendingUploadModeTag)SharingPendingUploadModeFile;
}

- (BOOL)isFolder {
    return _tag == (SharingPendingUploadModeTag)SharingPendingUploadModeFolder;
}

- (NSString *)getTagName {
    if (_tag == (SharingPendingUploadModeTag)SharingPendingUploadModeFile) {
        return @"(SharingPendingUploadModeTag)SharingPendingUploadModeFile";
    }
    if (_tag == (SharingPendingUploadModeTag)SharingPendingUploadModeFolder) {
        return @"(SharingPendingUploadModeTag)SharingPendingUploadModeFolder";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingPendingUploadModeSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingPendingUploadModeSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingPendingUploadModeSerializer serialize:self] description];
}

@end


@implementation DbxSharingPendingUploadModeSerializer 

+ (NSDictionary *)serialize:(DbxSharingPendingUploadMode *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isFile]) {
        jsonDict[@".tag"] = @"file";
    }
    else if ([valueObj isFolder]) {
        jsonDict[@".tag"] = @"folder";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingPendingUploadMode *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"file"]) {
        return [[DbxSharingPendingUploadMode alloc] initWithFile];
    }
    if ([tag isEqualToString:@"folder"]) {
        return [[DbxSharingPendingUploadMode alloc] initWithFolder];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
