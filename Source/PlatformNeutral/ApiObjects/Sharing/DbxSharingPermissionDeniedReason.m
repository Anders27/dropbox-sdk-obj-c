///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingPermissionDeniedReason.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingPermissionDeniedReason 

- (instancetype)initWithUserNotSameTeamAsOwner {
    self = [super init];
    if (self != nil) {
        _tag = (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonUserNotSameTeamAsOwner;
    }
    return self;
}

- (instancetype)initWithUserNotAllowedByOwner {
    self = [super init];
    if (self != nil) {
        _tag = (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonUserNotAllowedByOwner;
    }
    return self;
}

- (instancetype)initWithTargetIsIndirectMember {
    self = [super init];
    if (self != nil) {
        _tag = (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetIsIndirectMember;
    }
    return self;
}

- (instancetype)initWithTargetIsOwner {
    self = [super init];
    if (self != nil) {
        _tag = (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetIsOwner;
    }
    return self;
}

- (instancetype)initWithTargetIsSelf {
    self = [super init];
    if (self != nil) {
        _tag = (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetIsSelf;
    }
    return self;
}

- (instancetype)initWithTargetNotActive {
    self = [super init];
    if (self != nil) {
        _tag = (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetNotActive;
    }
    return self;
}

- (instancetype)initWithFolderIsLimitedTeamFolder {
    self = [super init];
    if (self != nil) {
        _tag = (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonFolderIsLimitedTeamFolder;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonOther;
    }
    return self;
}

- (BOOL)isUserNotSameTeamAsOwner {
    return _tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonUserNotSameTeamAsOwner;
}

- (BOOL)isUserNotAllowedByOwner {
    return _tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonUserNotAllowedByOwner;
}

- (BOOL)isTargetIsIndirectMember {
    return _tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetIsIndirectMember;
}

- (BOOL)isTargetIsOwner {
    return _tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetIsOwner;
}

- (BOOL)isTargetIsSelf {
    return _tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetIsSelf;
}

- (BOOL)isTargetNotActive {
    return _tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetNotActive;
}

- (BOOL)isFolderIsLimitedTeamFolder {
    return _tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonFolderIsLimitedTeamFolder;
}

- (BOOL)isOther {
    return _tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonOther;
}

- (NSString *)getTagName {
    if (_tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonUserNotSameTeamAsOwner) {
        return @"(SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonUserNotSameTeamAsOwner";
    }
    if (_tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonUserNotAllowedByOwner) {
        return @"(SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonUserNotAllowedByOwner";
    }
    if (_tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetIsIndirectMember) {
        return @"(SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetIsIndirectMember";
    }
    if (_tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetIsOwner) {
        return @"(SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetIsOwner";
    }
    if (_tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetIsSelf) {
        return @"(SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetIsSelf";
    }
    if (_tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetNotActive) {
        return @"(SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonTargetNotActive";
    }
    if (_tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonFolderIsLimitedTeamFolder) {
        return @"(SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonFolderIsLimitedTeamFolder";
    }
    if (_tag == (SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonOther) {
        return @"(SharingPermissionDeniedReasonTag)SharingPermissionDeniedReasonOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingPermissionDeniedReasonSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingPermissionDeniedReasonSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingPermissionDeniedReasonSerializer serialize:self] description];
}

@end


@implementation DbxSharingPermissionDeniedReasonSerializer 

+ (NSDictionary *)serialize:(DbxSharingPermissionDeniedReason *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserNotSameTeamAsOwner]) {
        jsonDict[@".tag"] = @"user_not_same_team_as_owner";
    }
    else if ([valueObj isUserNotAllowedByOwner]) {
        jsonDict[@".tag"] = @"user_not_allowed_by_owner";
    }
    else if ([valueObj isTargetIsIndirectMember]) {
        jsonDict[@".tag"] = @"target_is_indirect_member";
    }
    else if ([valueObj isTargetIsOwner]) {
        jsonDict[@".tag"] = @"target_is_owner";
    }
    else if ([valueObj isTargetIsSelf]) {
        jsonDict[@".tag"] = @"target_is_self";
    }
    else if ([valueObj isTargetNotActive]) {
        jsonDict[@".tag"] = @"target_not_active";
    }
    else if ([valueObj isFolderIsLimitedTeamFolder]) {
        jsonDict[@".tag"] = @"folder_is_limited_team_folder";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingPermissionDeniedReason *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_not_same_team_as_owner"]) {
        return [[DbxSharingPermissionDeniedReason alloc] initWithUserNotSameTeamAsOwner];
    }
    if ([tag isEqualToString:@"user_not_allowed_by_owner"]) {
        return [[DbxSharingPermissionDeniedReason alloc] initWithUserNotAllowedByOwner];
    }
    if ([tag isEqualToString:@"target_is_indirect_member"]) {
        return [[DbxSharingPermissionDeniedReason alloc] initWithTargetIsIndirectMember];
    }
    if ([tag isEqualToString:@"target_is_owner"]) {
        return [[DbxSharingPermissionDeniedReason alloc] initWithTargetIsOwner];
    }
    if ([tag isEqualToString:@"target_is_self"]) {
        return [[DbxSharingPermissionDeniedReason alloc] initWithTargetIsSelf];
    }
    if ([tag isEqualToString:@"target_not_active"]) {
        return [[DbxSharingPermissionDeniedReason alloc] initWithTargetNotActive];
    }
    if ([tag isEqualToString:@"folder_is_limited_team_folder"]) {
        return [[DbxSharingPermissionDeniedReason alloc] initWithFolderIsLimitedTeamFolder];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingPermissionDeniedReason alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
