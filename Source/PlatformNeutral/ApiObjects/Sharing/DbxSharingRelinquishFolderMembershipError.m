///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingRelinquishFolderMembershipError.h"
#import "DbxSharingSharedFolderAccessError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingRelinquishFolderMembershipError 

- (instancetype)initWithAccessError:(DbxSharingSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithFolderOwner {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorFolderOwner;
    }
    return self;
}

- (instancetype)initWithMounted {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorMounted;
    }
    return self;
}

- (instancetype)initWithGroupAccess {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorGroupAccess;
    }
    return self;
}

- (instancetype)initWithTeamFolder {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorTeamFolder;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorAccessError;
}

- (BOOL)isFolderOwner {
    return _tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorFolderOwner;
}

- (BOOL)isMounted {
    return _tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorMounted;
}

- (BOOL)isGroupAccess {
    return _tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorGroupAccess;
}

- (BOOL)isTeamFolder {
    return _tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorTeamFolder;
}

- (BOOL)isNoPermission {
    return _tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorAccessError) {
        return @"(SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorAccessError";
    }
    if (_tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorFolderOwner) {
        return @"(SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorFolderOwner";
    }
    if (_tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorMounted) {
        return @"(SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorMounted";
    }
    if (_tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorGroupAccess) {
        return @"(SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorGroupAccess";
    }
    if (_tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorTeamFolder) {
        return @"(SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorTeamFolder";
    }
    if (_tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorNoPermission) {
        return @"(SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorNoPermission";
    }
    if (_tag == (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorOther) {
        return @"(SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharedFolderAccessError *)accessError {
    if (_tag != (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingRelinquishFolderMembershipErrorTag)SharingRelinquishFolderMembershipErrorAccessError, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingRelinquishFolderMembershipErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingRelinquishFolderMembershipErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingRelinquishFolderMembershipErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingRelinquishFolderMembershipErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingRelinquishFolderMembershipError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DbxSharingSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isFolderOwner]) {
        jsonDict[@".tag"] = @"folder_owner";
    }
    else if ([valueObj isMounted]) {
        jsonDict[@".tag"] = @"mounted";
    }
    else if ([valueObj isGroupAccess]) {
        jsonDict[@".tag"] = @"group_access";
    }
    else if ([valueObj isTeamFolder]) {
        jsonDict[@".tag"] = @"team_folder";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingRelinquishFolderMembershipError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DbxSharingSharedFolderAccessError *accessError = [DbxSharingSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DbxSharingRelinquishFolderMembershipError alloc] initWithAccessError:accessError];
    }
    if ([tag isEqualToString:@"folder_owner"]) {
        return [[DbxSharingRelinquishFolderMembershipError alloc] initWithFolderOwner];
    }
    if ([tag isEqualToString:@"mounted"]) {
        return [[DbxSharingRelinquishFolderMembershipError alloc] initWithMounted];
    }
    if ([tag isEqualToString:@"group_access"]) {
        return [[DbxSharingRelinquishFolderMembershipError alloc] initWithGroupAccess];
    }
    if ([tag isEqualToString:@"team_folder"]) {
        return [[DbxSharingRelinquishFolderMembershipError alloc] initWithTeamFolder];
    }
    if ([tag isEqualToString:@"no_permission"]) {
        return [[DbxSharingRelinquishFolderMembershipError alloc] initWithNoPermission];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingRelinquishFolderMembershipError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
