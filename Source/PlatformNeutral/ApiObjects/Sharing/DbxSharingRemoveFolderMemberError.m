///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingRemoveFolderMemberError.h"
#import "DbxSharingSharedFolderAccessError.h"
#import "DbxSharingSharedFolderMemberError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingRemoveFolderMemberError 

- (instancetype)initWithAccessError:(DbxSharingSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = SharingRemoveFolderMemberErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithMemberError:(DbxSharingSharedFolderMemberError *)memberError {
    self = [super init];
    if (self != nil) {
        _tag = SharingRemoveFolderMemberErrorMemberError;
        _memberError = memberError;
    }
    return self;
}

- (instancetype)initWithFolderOwner {
    self = [super init];
    if (self != nil) {
        _tag = SharingRemoveFolderMemberErrorFolderOwner;
    }
    return self;
}

- (instancetype)initWithGroupAccess {
    self = [super init];
    if (self != nil) {
        _tag = SharingRemoveFolderMemberErrorGroupAccess;
    }
    return self;
}

- (instancetype)initWithTeamFolder {
    self = [super init];
    if (self != nil) {
        _tag = SharingRemoveFolderMemberErrorTeamFolder;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = SharingRemoveFolderMemberErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingRemoveFolderMemberErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == SharingRemoveFolderMemberErrorAccessError;
}

- (BOOL)isMemberError {
    return _tag == SharingRemoveFolderMemberErrorMemberError;
}

- (BOOL)isFolderOwner {
    return _tag == SharingRemoveFolderMemberErrorFolderOwner;
}

- (BOOL)isGroupAccess {
    return _tag == SharingRemoveFolderMemberErrorGroupAccess;
}

- (BOOL)isTeamFolder {
    return _tag == SharingRemoveFolderMemberErrorTeamFolder;
}

- (BOOL)isNoPermission {
    return _tag == SharingRemoveFolderMemberErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == SharingRemoveFolderMemberErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingRemoveFolderMemberErrorAccessError:
           return @"SharingRemoveFolderMemberErrorAccessError";
        case SharingRemoveFolderMemberErrorMemberError:
           return @"SharingRemoveFolderMemberErrorMemberError";
        case SharingRemoveFolderMemberErrorFolderOwner:
           return @"SharingRemoveFolderMemberErrorFolderOwner";
        case SharingRemoveFolderMemberErrorGroupAccess:
           return @"SharingRemoveFolderMemberErrorGroupAccess";
        case SharingRemoveFolderMemberErrorTeamFolder:
           return @"SharingRemoveFolderMemberErrorTeamFolder";
        case SharingRemoveFolderMemberErrorNoPermission:
           return @"SharingRemoveFolderMemberErrorNoPermission";
        case SharingRemoveFolderMemberErrorOther:
           return @"SharingRemoveFolderMemberErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharedFolderAccessError *)accessError {
    if (_tag != SharingRemoveFolderMemberErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingRemoveFolderMemberErrorAccessError, but was %@.", [self getTagName]];
    }
    return _accessError;
}

- (DbxSharingSharedFolderMemberError *)memberError {
    if (_tag != SharingRemoveFolderMemberErrorMemberError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingRemoveFolderMemberErrorMemberError, but was %@.", [self getTagName]];
    }
    return _memberError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingRemoveFolderMemberErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingRemoveFolderMemberErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingRemoveFolderMemberErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingRemoveFolderMemberErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingRemoveFolderMemberError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DbxSharingSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isMemberError]) {
        jsonDict = [[DbxSharingSharedFolderMemberErrorSerializer serialize:valueObj.memberError] mutableCopy];
        jsonDict[@".tag"] = @"member_error";
    }
    else if ([valueObj isFolderOwner]) {
        jsonDict[@".tag"] = @"folder_owner";
    }
    else if ([valueObj isGroupAccess]) {
        jsonDict[@".tag"] = @"group_access";
    }
    else if ([valueObj isTeamFolder]) {
        jsonDict[@".tag"] = @"team_folder";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingRemoveFolderMemberError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DbxSharingSharedFolderAccessError *accessError = [DbxSharingSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DbxSharingRemoveFolderMemberError alloc] initWithAccessError:accessError];
    }
    if ([tag isEqualToString:@"member_error"]) {
        DbxSharingSharedFolderMemberError *memberError = [DbxSharingSharedFolderMemberErrorSerializer deserialize:valueDict[@"member_error"]];
        return [[DbxSharingRemoveFolderMemberError alloc] initWithMemberError:memberError];
    }
    if ([tag isEqualToString:@"folder_owner"]) {
        return [[DbxSharingRemoveFolderMemberError alloc] initWithFolderOwner];
    }
    if ([tag isEqualToString:@"group_access"]) {
        return [[DbxSharingRemoveFolderMemberError alloc] initWithGroupAccess];
    }
    if ([tag isEqualToString:@"team_folder"]) {
        return [[DbxSharingRemoveFolderMemberError alloc] initWithTeamFolder];
    }
    if ([tag isEqualToString:@"no_permission"]) {
        return [[DbxSharingRemoveFolderMemberError alloc] initWithNoPermission];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingRemoveFolderMemberError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
