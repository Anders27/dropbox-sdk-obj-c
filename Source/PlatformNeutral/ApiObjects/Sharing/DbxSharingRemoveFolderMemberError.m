///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGRemoveFolderMemberError.h"
#import "DBXSHARINGSharedFolderAccessError.h"
#import "DBXSHARINGSharedFolderMemberError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGRemoveFolderMemberError 

- (instancetype)initWithAccessError:(DBXSHARINGSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGRemoveFolderMemberErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithMemberError:(DBXSHARINGSharedFolderMemberError *)memberError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGRemoveFolderMemberErrorMemberError;
        _memberError = memberError;
    }
    return self;
}

- (instancetype)initWithFolderOwner {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGRemoveFolderMemberErrorFolderOwner;
    }
    return self;
}

- (instancetype)initWithGroupAccess {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGRemoveFolderMemberErrorGroupAccess;
    }
    return self;
}

- (instancetype)initWithTeamFolder {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGRemoveFolderMemberErrorTeamFolder;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGRemoveFolderMemberErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGRemoveFolderMemberErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == DBXSHARINGRemoveFolderMemberErrorAccessError;
}

- (BOOL)isMemberError {
    return _tag == DBXSHARINGRemoveFolderMemberErrorMemberError;
}

- (BOOL)isFolderOwner {
    return _tag == DBXSHARINGRemoveFolderMemberErrorFolderOwner;
}

- (BOOL)isGroupAccess {
    return _tag == DBXSHARINGRemoveFolderMemberErrorGroupAccess;
}

- (BOOL)isTeamFolder {
    return _tag == DBXSHARINGRemoveFolderMemberErrorTeamFolder;
}

- (BOOL)isNoPermission {
    return _tag == DBXSHARINGRemoveFolderMemberErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGRemoveFolderMemberErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGRemoveFolderMemberErrorAccessError:
           return @"DBXSHARINGRemoveFolderMemberErrorAccessError";
        case DBXSHARINGRemoveFolderMemberErrorMemberError:
           return @"DBXSHARINGRemoveFolderMemberErrorMemberError";
        case DBXSHARINGRemoveFolderMemberErrorFolderOwner:
           return @"DBXSHARINGRemoveFolderMemberErrorFolderOwner";
        case DBXSHARINGRemoveFolderMemberErrorGroupAccess:
           return @"DBXSHARINGRemoveFolderMemberErrorGroupAccess";
        case DBXSHARINGRemoveFolderMemberErrorTeamFolder:
           return @"DBXSHARINGRemoveFolderMemberErrorTeamFolder";
        case DBXSHARINGRemoveFolderMemberErrorNoPermission:
           return @"DBXSHARINGRemoveFolderMemberErrorNoPermission";
        case DBXSHARINGRemoveFolderMemberErrorOther:
           return @"DBXSHARINGRemoveFolderMemberErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharedFolderAccessError *)accessError {
    if (_tag != DBXSHARINGRemoveFolderMemberErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGRemoveFolderMemberErrorAccessError`, but was %@.", [self getTagName]];
    }
    return _accessError;
}

- (DBXSHARINGSharedFolderMemberError *)memberError {
    if (_tag != DBXSHARINGRemoveFolderMemberErrorMemberError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGRemoveFolderMemberErrorMemberError`, but was %@.", [self getTagName]];
    }
    return _memberError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGRemoveFolderMemberErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGRemoveFolderMemberErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGRemoveFolderMemberErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGRemoveFolderMemberErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGRemoveFolderMemberError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DBXSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isMemberError]) {
        jsonDict = [[DBXSHARINGSharedFolderMemberErrorSerializer serialize:valueObj.memberError] mutableCopy];
        jsonDict[@".tag"] = @"member_error";
    }
    else if ([valueObj isFolderOwner]) {
        jsonDict[@".tag"] = @"folder_owner";
    }
    else if ([valueObj isGroupAccess]) {
        jsonDict[@".tag"] = @"group_access";
    }
    else if ([valueObj isTeamFolder]) {
        jsonDict[@".tag"] = @"team_folder";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGRemoveFolderMemberError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DBXSHARINGSharedFolderAccessError *accessError = [DBXSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DBXSHARINGRemoveFolderMemberError alloc] initWithAccessError:accessError];
    }
    else if ([tag isEqualToString:@"member_error"]) {
        DBXSHARINGSharedFolderMemberError *memberError = [DBXSHARINGSharedFolderMemberErrorSerializer deserialize:valueDict[@"member_error"]];
        return [[DBXSHARINGRemoveFolderMemberError alloc] initWithMemberError:memberError];
    }
    else if ([tag isEqualToString:@"folder_owner"]) {
        return [[DBXSHARINGRemoveFolderMemberError alloc] initWithFolderOwner];
    }
    else if ([tag isEqualToString:@"group_access"]) {
        return [[DBXSHARINGRemoveFolderMemberError alloc] initWithGroupAccess];
    }
    else if ([tag isEqualToString:@"team_folder"]) {
        return [[DBXSHARINGRemoveFolderMemberError alloc] initWithTeamFolder];
    }
    else if ([tag isEqualToString:@"no_permission"]) {
        return [[DBXSHARINGRemoveFolderMemberError alloc] initWithNoPermission];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGRemoveFolderMemberError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
