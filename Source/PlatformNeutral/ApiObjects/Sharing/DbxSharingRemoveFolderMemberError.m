///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingRemoveFolderMemberError.h"
#import "DbxSharingSharedFolderAccessError.h"
#import "DbxSharingSharedFolderMemberError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingRemoveFolderMemberError 

- (instancetype)initWithAccessError:(DbxSharingSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithMemberError:(DbxSharingSharedFolderMemberError *)memberError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorMemberError;
        _memberError = memberError;
    }
    return self;
}

- (instancetype)initWithFolderOwner {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorFolderOwner;
    }
    return self;
}

- (instancetype)initWithGroupAccess {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorGroupAccess;
    }
    return self;
}

- (instancetype)initWithTeamFolder {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorTeamFolder;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorAccessError;
}

- (BOOL)isMemberError {
    return _tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorMemberError;
}

- (BOOL)isFolderOwner {
    return _tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorFolderOwner;
}

- (BOOL)isGroupAccess {
    return _tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorGroupAccess;
}

- (BOOL)isTeamFolder {
    return _tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorTeamFolder;
}

- (BOOL)isNoPermission {
    return _tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorAccessError) {
        return @"(SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorAccessError";
    }
    if (_tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorMemberError) {
        return @"(SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorMemberError";
    }
    if (_tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorFolderOwner) {
        return @"(SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorFolderOwner";
    }
    if (_tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorGroupAccess) {
        return @"(SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorGroupAccess";
    }
    if (_tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorTeamFolder) {
        return @"(SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorTeamFolder";
    }
    if (_tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorNoPermission) {
        return @"(SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorNoPermission";
    }
    if (_tag == (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorOther) {
        return @"(SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharedFolderAccessError *)accessError {
    if (_tag != (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorAccessError, but was %@.", [self getTagName]];
    }
    return _accessError;
}

- (DbxSharingSharedFolderMemberError *)memberError {
    if (_tag != (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorMemberError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingRemoveFolderMemberErrorTag)SharingRemoveFolderMemberErrorMemberError, but was %@.", [self getTagName]];
    }
    return _memberError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingRemoveFolderMemberErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingRemoveFolderMemberErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingRemoveFolderMemberErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingRemoveFolderMemberErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingRemoveFolderMemberError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict[@"access_error"] = [DbxSharingSharedFolderAccessErrorSerializer serialize:valueObj.accessError];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isMemberError]) {
        jsonDict[@"member_error"] = [DbxSharingSharedFolderMemberErrorSerializer serialize:valueObj.memberError];
        jsonDict[@".tag"] = @"member_error";
    }
    else if ([valueObj isFolderOwner]) {
        jsonDict[@".tag"] = @"folder_owner";
    }
    else if ([valueObj isGroupAccess]) {
        jsonDict[@".tag"] = @"group_access";
    }
    else if ([valueObj isTeamFolder]) {
        jsonDict[@".tag"] = @"team_folder";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingRemoveFolderMemberError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DbxSharingSharedFolderAccessError *accessError = [DbxSharingSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DbxSharingRemoveFolderMemberError alloc] initWithAccessError:accessError];
    }
    if ([tag isEqualToString:@"member_error"]) {
        DbxSharingSharedFolderMemberError *memberError = [DbxSharingSharedFolderMemberErrorSerializer deserialize:valueDict[@"member_error"]];
        return [[DbxSharingRemoveFolderMemberError alloc] initWithMemberError:memberError];
    }
    if ([tag isEqualToString:@"folder_owner"]) {
        return [[DbxSharingRemoveFolderMemberError alloc] initWithFolderOwner];
    }
    if ([tag isEqualToString:@"group_access"]) {
        return [[DbxSharingRemoveFolderMemberError alloc] initWithGroupAccess];
    }
    if ([tag isEqualToString:@"team_folder"]) {
        return [[DbxSharingRemoveFolderMemberError alloc] initWithTeamFolder];
    }
    if ([tag isEqualToString:@"no_permission"]) {
        return [[DbxSharingRemoveFolderMemberError alloc] initWithNoPermission];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingRemoveFolderMemberError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
