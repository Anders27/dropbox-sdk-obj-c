///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingRequestedVisibility.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingRequestedVisibility 

- (instancetype)initWithPublic {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRequestedVisibilityTag)SharingRequestedVisibilityPublic;
    }
    return self;
}

- (instancetype)initWithTeamOnly {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRequestedVisibilityTag)SharingRequestedVisibilityTeamOnly;
    }
    return self;
}

- (instancetype)initWithPassword {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRequestedVisibilityTag)SharingRequestedVisibilityPassword;
    }
    return self;
}

- (BOOL)isPublic {
    return _tag == (SharingRequestedVisibilityTag)SharingRequestedVisibilityPublic;
}

- (BOOL)isTeamOnly {
    return _tag == (SharingRequestedVisibilityTag)SharingRequestedVisibilityTeamOnly;
}

- (BOOL)isPassword {
    return _tag == (SharingRequestedVisibilityTag)SharingRequestedVisibilityPassword;
}

- (NSString *)getTagName {
    if (_tag == (SharingRequestedVisibilityTag)SharingRequestedVisibilityPublic) {
        return @"(SharingRequestedVisibilityTag)SharingRequestedVisibilityPublic";
    }
    if (_tag == (SharingRequestedVisibilityTag)SharingRequestedVisibilityTeamOnly) {
        return @"(SharingRequestedVisibilityTag)SharingRequestedVisibilityTeamOnly";
    }
    if (_tag == (SharingRequestedVisibilityTag)SharingRequestedVisibilityPassword) {
        return @"(SharingRequestedVisibilityTag)SharingRequestedVisibilityPassword";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingRequestedVisibilitySerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingRequestedVisibilitySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingRequestedVisibilitySerializer serialize:self] description];
}

@end


@implementation DbxSharingRequestedVisibilitySerializer 

+ (NSDictionary *)serialize:(DbxSharingRequestedVisibility *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPublic]) {
        jsonDict[@".tag"] = @"public";
    }
    else if ([valueObj isTeamOnly]) {
        jsonDict[@".tag"] = @"team_only";
    }
    else if ([valueObj isPassword]) {
        jsonDict[@".tag"] = @"password";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingRequestedVisibility *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"public"]) {
        return [[DbxSharingRequestedVisibility alloc] initWithPublic];
    }
    if ([tag isEqualToString:@"team_only"]) {
        return [[DbxSharingRequestedVisibility alloc] initWithTeamOnly];
    }
    if ([tag isEqualToString:@"password"]) {
        return [[DbxSharingRequestedVisibility alloc] initWithPassword];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
