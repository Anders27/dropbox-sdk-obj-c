///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingRequestedVisibility.h"
#import "DbxSharingResolvedVisibility.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingResolvedVisibility 

- (instancetype)initWithPublic {
    self = [super init];
    if (self != nil) {
        _tag = (SharingResolvedVisibilityTag)SharingResolvedVisibilityPublic;
    }
    return self;
}

- (instancetype)initWithTeamOnly {
    self = [super init];
    if (self != nil) {
        _tag = (SharingResolvedVisibilityTag)SharingResolvedVisibilityTeamOnly;
    }
    return self;
}

- (instancetype)initWithPassword {
    self = [super init];
    if (self != nil) {
        _tag = (SharingResolvedVisibilityTag)SharingResolvedVisibilityPassword;
    }
    return self;
}

- (instancetype)initWithTeamAndPassword {
    self = [super init];
    if (self != nil) {
        _tag = (SharingResolvedVisibilityTag)SharingResolvedVisibilityTeamAndPassword;
    }
    return self;
}

- (instancetype)initWithSharedFolderOnly {
    self = [super init];
    if (self != nil) {
        _tag = (SharingResolvedVisibilityTag)SharingResolvedVisibilitySharedFolderOnly;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingResolvedVisibilityTag)SharingResolvedVisibilityOther;
    }
    return self;
}

- (BOOL)isPublic {
    return _tag == (SharingResolvedVisibilityTag)SharingResolvedVisibilityPublic;
}

- (BOOL)isTeamOnly {
    return _tag == (SharingResolvedVisibilityTag)SharingResolvedVisibilityTeamOnly;
}

- (BOOL)isPassword {
    return _tag == (SharingResolvedVisibilityTag)SharingResolvedVisibilityPassword;
}

- (BOOL)isTeamAndPassword {
    return _tag == (SharingResolvedVisibilityTag)SharingResolvedVisibilityTeamAndPassword;
}

- (BOOL)isSharedFolderOnly {
    return _tag == (SharingResolvedVisibilityTag)SharingResolvedVisibilitySharedFolderOnly;
}

- (BOOL)isOther {
    return _tag == (SharingResolvedVisibilityTag)SharingResolvedVisibilityOther;
}

- (NSString *)getTagName {
    if (_tag == (SharingResolvedVisibilityTag)SharingResolvedVisibilityPublic) {
        return @"(SharingResolvedVisibilityTag)SharingResolvedVisibilityPublic";
    }
    if (_tag == (SharingResolvedVisibilityTag)SharingResolvedVisibilityTeamOnly) {
        return @"(SharingResolvedVisibilityTag)SharingResolvedVisibilityTeamOnly";
    }
    if (_tag == (SharingResolvedVisibilityTag)SharingResolvedVisibilityPassword) {
        return @"(SharingResolvedVisibilityTag)SharingResolvedVisibilityPassword";
    }
    if (_tag == (SharingResolvedVisibilityTag)SharingResolvedVisibilityTeamAndPassword) {
        return @"(SharingResolvedVisibilityTag)SharingResolvedVisibilityTeamAndPassword";
    }
    if (_tag == (SharingResolvedVisibilityTag)SharingResolvedVisibilitySharedFolderOnly) {
        return @"(SharingResolvedVisibilityTag)SharingResolvedVisibilitySharedFolderOnly";
    }
    if (_tag == (SharingResolvedVisibilityTag)SharingResolvedVisibilityOther) {
        return @"(SharingResolvedVisibilityTag)SharingResolvedVisibilityOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingResolvedVisibilitySerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingResolvedVisibilitySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingResolvedVisibilitySerializer serialize:self] description];
}

@end


@implementation DbxSharingResolvedVisibilitySerializer 

+ (NSDictionary *)serialize:(DbxSharingResolvedVisibility *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPublic]) {
        jsonDict[@".tag"] = @"public";
    }
    else if ([valueObj isTeamOnly]) {
        jsonDict[@".tag"] = @"team_only";
    }
    else if ([valueObj isPassword]) {
        jsonDict[@".tag"] = @"password";
    }
    else if ([valueObj isTeamAndPassword]) {
        jsonDict[@".tag"] = @"team_and_password";
    }
    else if ([valueObj isSharedFolderOnly]) {
        jsonDict[@".tag"] = @"shared_folder_only";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingResolvedVisibility *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"public"]) {
        return [[DbxSharingResolvedVisibility alloc] initWithPublic];
    }
    if ([tag isEqualToString:@"team_only"]) {
        return [[DbxSharingResolvedVisibility alloc] initWithTeamOnly];
    }
    if ([tag isEqualToString:@"password"]) {
        return [[DbxSharingResolvedVisibility alloc] initWithPassword];
    }
    if ([tag isEqualToString:@"team_and_password"]) {
        return [[DbxSharingResolvedVisibility alloc] initWithTeamAndPassword];
    }
    if ([tag isEqualToString:@"shared_folder_only"]) {
        return [[DbxSharingResolvedVisibility alloc] initWithSharedFolderOnly];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingResolvedVisibility alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
