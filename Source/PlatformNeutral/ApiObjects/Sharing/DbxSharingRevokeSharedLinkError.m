///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingRevokeSharedLinkError.h"
#import "DbxSharingSharedLinkError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingRevokeSharedLinkError 

- (instancetype)initWithSharedLinkNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorSharedLinkNotFound;
    }
    return self;
}

- (instancetype)initWithSharedLinkAccessDenied {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorSharedLinkAccessDenied;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorOther;
    }
    return self;
}

- (instancetype)initWithSharedLinkMalformed {
    self = [super init];
    if (self != nil) {
        _tag = (SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorSharedLinkMalformed;
    }
    return self;
}

- (BOOL)isSharedLinkNotFound {
    return _tag == (SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorSharedLinkNotFound;
}

- (BOOL)isSharedLinkAccessDenied {
    return _tag == (SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorSharedLinkAccessDenied;
}

- (BOOL)isOther {
    return _tag == (SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorOther;
}

- (BOOL)isSharedLinkMalformed {
    return _tag == (SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorSharedLinkMalformed;
}

- (NSString *)getTagName {
    if (_tag == (SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorSharedLinkNotFound) {
        return @"(SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorSharedLinkNotFound";
    }
    if (_tag == (SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorSharedLinkAccessDenied) {
        return @"(SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorSharedLinkAccessDenied";
    }
    if (_tag == (SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorOther) {
        return @"(SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorOther";
    }
    if (_tag == (SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorSharedLinkMalformed) {
        return @"(SharingRevokeSharedLinkErrorTag)SharingRevokeSharedLinkErrorSharedLinkMalformed";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingRevokeSharedLinkErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingRevokeSharedLinkErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingRevokeSharedLinkErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingRevokeSharedLinkErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingRevokeSharedLinkError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isSharedLinkNotFound]) {
        jsonDict[@".tag"] = @"shared_link_not_found";
    }
    else if ([valueObj isSharedLinkAccessDenied]) {
        jsonDict[@".tag"] = @"shared_link_access_denied";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isSharedLinkMalformed]) {
        jsonDict[@".tag"] = @"shared_link_malformed";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingRevokeSharedLinkError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"shared_link_not_found"]) {
        return [[DbxSharingRevokeSharedLinkError alloc] initWithSharedLinkNotFound];
    }
    if ([tag isEqualToString:@"shared_link_access_denied"]) {
        return [[DbxSharingRevokeSharedLinkError alloc] initWithSharedLinkAccessDenied];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingRevokeSharedLinkError alloc] initWithOther];
    }
    if ([tag isEqualToString:@"shared_link_malformed"]) {
        return [[DbxSharingRevokeSharedLinkError alloc] initWithSharedLinkMalformed];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
