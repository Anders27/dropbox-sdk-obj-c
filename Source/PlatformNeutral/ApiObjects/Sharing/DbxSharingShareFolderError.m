///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingShareFolderError.h"
#import "DbxSharingShareFolderErrorBase.h"
#import "DbxSharingSharePathError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingShareFolderError 

- (instancetype)initWithEmailUnverified {
    self = [super init];
    if (self != nil) {
        _tag = (SharingShareFolderErrorTag)SharingShareFolderErrorEmailUnverified;
    }
    return self;
}

- (instancetype)initWithBadPath:(DbxSharingSharePathError *)badPath {
    self = [super init];
    if (self != nil) {
        _tag = (SharingShareFolderErrorTag)SharingShareFolderErrorBadPath;
        _badPath = badPath;
    }
    return self;
}

- (instancetype)initWithTeamPolicyDisallowsMemberPolicy {
    self = [super init];
    if (self != nil) {
        _tag = (SharingShareFolderErrorTag)SharingShareFolderErrorTeamPolicyDisallowsMemberPolicy;
    }
    return self;
}

- (instancetype)initWithDisallowedSharedLinkPolicy {
    self = [super init];
    if (self != nil) {
        _tag = (SharingShareFolderErrorTag)SharingShareFolderErrorDisallowedSharedLinkPolicy;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingShareFolderErrorTag)SharingShareFolderErrorOther;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = (SharingShareFolderErrorTag)SharingShareFolderErrorNoPermission;
    }
    return self;
}

- (BOOL)isEmailUnverified {
    return _tag == (SharingShareFolderErrorTag)SharingShareFolderErrorEmailUnverified;
}

- (BOOL)isBadPath {
    return _tag == (SharingShareFolderErrorTag)SharingShareFolderErrorBadPath;
}

- (BOOL)isTeamPolicyDisallowsMemberPolicy {
    return _tag == (SharingShareFolderErrorTag)SharingShareFolderErrorTeamPolicyDisallowsMemberPolicy;
}

- (BOOL)isDisallowedSharedLinkPolicy {
    return _tag == (SharingShareFolderErrorTag)SharingShareFolderErrorDisallowedSharedLinkPolicy;
}

- (BOOL)isOther {
    return _tag == (SharingShareFolderErrorTag)SharingShareFolderErrorOther;
}

- (BOOL)isNoPermission {
    return _tag == (SharingShareFolderErrorTag)SharingShareFolderErrorNoPermission;
}

- (NSString *)getTagName {
    if (_tag == (SharingShareFolderErrorTag)SharingShareFolderErrorEmailUnverified) {
        return @"(SharingShareFolderErrorTag)SharingShareFolderErrorEmailUnverified";
    }
    if (_tag == (SharingShareFolderErrorTag)SharingShareFolderErrorBadPath) {
        return @"(SharingShareFolderErrorTag)SharingShareFolderErrorBadPath";
    }
    if (_tag == (SharingShareFolderErrorTag)SharingShareFolderErrorTeamPolicyDisallowsMemberPolicy) {
        return @"(SharingShareFolderErrorTag)SharingShareFolderErrorTeamPolicyDisallowsMemberPolicy";
    }
    if (_tag == (SharingShareFolderErrorTag)SharingShareFolderErrorDisallowedSharedLinkPolicy) {
        return @"(SharingShareFolderErrorTag)SharingShareFolderErrorDisallowedSharedLinkPolicy";
    }
    if (_tag == (SharingShareFolderErrorTag)SharingShareFolderErrorOther) {
        return @"(SharingShareFolderErrorTag)SharingShareFolderErrorOther";
    }
    if (_tag == (SharingShareFolderErrorTag)SharingShareFolderErrorNoPermission) {
        return @"(SharingShareFolderErrorTag)SharingShareFolderErrorNoPermission";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharePathError *)badPath {
    if (_tag != (SharingShareFolderErrorTag)SharingShareFolderErrorBadPath) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingShareFolderErrorTag)SharingShareFolderErrorBadPath, but was %@.", [self getTagName]];
    }
    return _badPath;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingShareFolderErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingShareFolderErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingShareFolderErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingShareFolderErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingShareFolderError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isEmailUnverified]) {
        jsonDict[@".tag"] = @"email_unverified";
    }
    else if ([valueObj isBadPath]) {
        jsonDict = [[DbxSharingSharePathErrorSerializer serialize:valueObj.badPath] mutableCopy];
        jsonDict[@".tag"] = @"bad_path";
    }
    else if ([valueObj isTeamPolicyDisallowsMemberPolicy]) {
        jsonDict[@".tag"] = @"team_policy_disallows_member_policy";
    }
    else if ([valueObj isDisallowedSharedLinkPolicy]) {
        jsonDict[@".tag"] = @"disallowed_shared_link_policy";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingShareFolderError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"email_unverified"]) {
        return [[DbxSharingShareFolderError alloc] initWithEmailUnverified];
    }
    if ([tag isEqualToString:@"bad_path"]) {
        DbxSharingSharePathError *badPath = [DbxSharingSharePathErrorSerializer deserialize:valueDict[@"bad_path"]];
        return [[DbxSharingShareFolderError alloc] initWithBadPath:badPath];
    }
    if ([tag isEqualToString:@"team_policy_disallows_member_policy"]) {
        return [[DbxSharingShareFolderError alloc] initWithTeamPolicyDisallowsMemberPolicy];
    }
    if ([tag isEqualToString:@"disallowed_shared_link_policy"]) {
        return [[DbxSharingShareFolderError alloc] initWithDisallowedSharedLinkPolicy];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingShareFolderError alloc] initWithOther];
    }
    if ([tag isEqualToString:@"no_permission"]) {
        return [[DbxSharingShareFolderError alloc] initWithNoPermission];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
