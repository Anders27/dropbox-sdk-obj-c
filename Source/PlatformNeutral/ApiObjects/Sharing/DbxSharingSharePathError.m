///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGSharePathError.h"
#import "DBXSHARINGSharedFolderMetadata.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGSharePathError 

- (instancetype)initWithIsFile {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharePathErrorIsFile;
    }
    return self;
}

- (instancetype)initWithInsideSharedFolder {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharePathErrorInsideSharedFolder;
    }
    return self;
}

- (instancetype)initWithContainsSharedFolder {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharePathErrorContainsSharedFolder;
    }
    return self;
}

- (instancetype)initWithIsAppFolder {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharePathErrorIsAppFolder;
    }
    return self;
}

- (instancetype)initWithInsideAppFolder {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharePathErrorInsideAppFolder;
    }
    return self;
}

- (instancetype)initWithIsPublicFolder {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharePathErrorIsPublicFolder;
    }
    return self;
}

- (instancetype)initWithInsidePublicFolder {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharePathErrorInsidePublicFolder;
    }
    return self;
}

- (instancetype)initWithAlreadyShared:(DBXSHARINGSharedFolderMetadata *)alreadyShared {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharePathErrorAlreadyShared;
        _alreadyShared = alreadyShared;
    }
    return self;
}

- (instancetype)initWithInvalidPath {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharePathErrorInvalidPath;
    }
    return self;
}

- (instancetype)initWithIsOsxPackage {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharePathErrorIsOsxPackage;
    }
    return self;
}

- (instancetype)initWithInsideOsxPackage {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharePathErrorInsideOsxPackage;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharePathErrorOther;
    }
    return self;
}

- (BOOL)isIsFile {
    return _tag == DBXSHARINGSharePathErrorIsFile;
}

- (BOOL)isInsideSharedFolder {
    return _tag == DBXSHARINGSharePathErrorInsideSharedFolder;
}

- (BOOL)isContainsSharedFolder {
    return _tag == DBXSHARINGSharePathErrorContainsSharedFolder;
}

- (BOOL)isIsAppFolder {
    return _tag == DBXSHARINGSharePathErrorIsAppFolder;
}

- (BOOL)isInsideAppFolder {
    return _tag == DBXSHARINGSharePathErrorInsideAppFolder;
}

- (BOOL)isIsPublicFolder {
    return _tag == DBXSHARINGSharePathErrorIsPublicFolder;
}

- (BOOL)isInsidePublicFolder {
    return _tag == DBXSHARINGSharePathErrorInsidePublicFolder;
}

- (BOOL)isAlreadyShared {
    return _tag == DBXSHARINGSharePathErrorAlreadyShared;
}

- (BOOL)isInvalidPath {
    return _tag == DBXSHARINGSharePathErrorInvalidPath;
}

- (BOOL)isIsOsxPackage {
    return _tag == DBXSHARINGSharePathErrorIsOsxPackage;
}

- (BOOL)isInsideOsxPackage {
    return _tag == DBXSHARINGSharePathErrorInsideOsxPackage;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGSharePathErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGSharePathErrorIsFile:
           return @"DBXSHARINGSharePathErrorIsFile";
        case DBXSHARINGSharePathErrorInsideSharedFolder:
           return @"DBXSHARINGSharePathErrorInsideSharedFolder";
        case DBXSHARINGSharePathErrorContainsSharedFolder:
           return @"DBXSHARINGSharePathErrorContainsSharedFolder";
        case DBXSHARINGSharePathErrorIsAppFolder:
           return @"DBXSHARINGSharePathErrorIsAppFolder";
        case DBXSHARINGSharePathErrorInsideAppFolder:
           return @"DBXSHARINGSharePathErrorInsideAppFolder";
        case DBXSHARINGSharePathErrorIsPublicFolder:
           return @"DBXSHARINGSharePathErrorIsPublicFolder";
        case DBXSHARINGSharePathErrorInsidePublicFolder:
           return @"DBXSHARINGSharePathErrorInsidePublicFolder";
        case DBXSHARINGSharePathErrorAlreadyShared:
           return @"DBXSHARINGSharePathErrorAlreadyShared";
        case DBXSHARINGSharePathErrorInvalidPath:
           return @"DBXSHARINGSharePathErrorInvalidPath";
        case DBXSHARINGSharePathErrorIsOsxPackage:
           return @"DBXSHARINGSharePathErrorIsOsxPackage";
        case DBXSHARINGSharePathErrorInsideOsxPackage:
           return @"DBXSHARINGSharePathErrorInsideOsxPackage";
        case DBXSHARINGSharePathErrorOther:
           return @"DBXSHARINGSharePathErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharedFolderMetadata *)alreadyShared {
    if (_tag != DBXSHARINGSharePathErrorAlreadyShared) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGSharePathErrorAlreadyShared`, but was %@.", [self getTagName]];
    }
    return _alreadyShared;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGSharePathErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGSharePathErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGSharePathErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGSharePathErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGSharePathError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isIsFile]) {
        jsonDict[@".tag"] = @"is_file";
    }
    else if ([valueObj isInsideSharedFolder]) {
        jsonDict[@".tag"] = @"inside_shared_folder";
    }
    else if ([valueObj isContainsSharedFolder]) {
        jsonDict[@".tag"] = @"contains_shared_folder";
    }
    else if ([valueObj isIsAppFolder]) {
        jsonDict[@".tag"] = @"is_app_folder";
    }
    else if ([valueObj isInsideAppFolder]) {
        jsonDict[@".tag"] = @"inside_app_folder";
    }
    else if ([valueObj isIsPublicFolder]) {
        jsonDict[@".tag"] = @"is_public_folder";
    }
    else if ([valueObj isInsidePublicFolder]) {
        jsonDict[@".tag"] = @"inside_public_folder";
    }
    else if ([valueObj isAlreadyShared]) {
        jsonDict = [[DBXSHARINGSharedFolderMetadataSerializer serialize:valueObj.alreadyShared] mutableCopy];
        jsonDict[@".tag"] = @"already_shared";
    }
    else if ([valueObj isInvalidPath]) {
        jsonDict[@".tag"] = @"invalid_path";
    }
    else if ([valueObj isIsOsxPackage]) {
        jsonDict[@".tag"] = @"is_osx_package";
    }
    else if ([valueObj isInsideOsxPackage]) {
        jsonDict[@".tag"] = @"inside_osx_package";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGSharePathError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"is_file"]) {
        return [[DBXSHARINGSharePathError alloc] initWithIsFile];
    }
    else if ([tag isEqualToString:@"inside_shared_folder"]) {
        return [[DBXSHARINGSharePathError alloc] initWithInsideSharedFolder];
    }
    else if ([tag isEqualToString:@"contains_shared_folder"]) {
        return [[DBXSHARINGSharePathError alloc] initWithContainsSharedFolder];
    }
    else if ([tag isEqualToString:@"is_app_folder"]) {
        return [[DBXSHARINGSharePathError alloc] initWithIsAppFolder];
    }
    else if ([tag isEqualToString:@"inside_app_folder"]) {
        return [[DBXSHARINGSharePathError alloc] initWithInsideAppFolder];
    }
    else if ([tag isEqualToString:@"is_public_folder"]) {
        return [[DBXSHARINGSharePathError alloc] initWithIsPublicFolder];
    }
    else if ([tag isEqualToString:@"inside_public_folder"]) {
        return [[DBXSHARINGSharePathError alloc] initWithInsidePublicFolder];
    }
    else if ([tag isEqualToString:@"already_shared"]) {
        DBXSHARINGSharedFolderMetadata *alreadyShared = [DBXSHARINGSharedFolderMetadataSerializer deserialize:valueDict];
        return [[DBXSHARINGSharePathError alloc] initWithAlreadyShared:alreadyShared];
    }
    else if ([tag isEqualToString:@"invalid_path"]) {
        return [[DBXSHARINGSharePathError alloc] initWithInvalidPath];
    }
    else if ([tag isEqualToString:@"is_osx_package"]) {
        return [[DBXSHARINGSharePathError alloc] initWithIsOsxPackage];
    }
    else if ([tag isEqualToString:@"inside_osx_package"]) {
        return [[DBXSHARINGSharePathError alloc] initWithInsideOsxPackage];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGSharePathError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
