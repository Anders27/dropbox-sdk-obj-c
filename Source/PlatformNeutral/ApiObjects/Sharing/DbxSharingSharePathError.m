///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingSharePathError.h"
#import "DbxSharingSharedFolderMetadata.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingSharePathError 

- (instancetype)initWithIsFile {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharePathErrorIsFile;
    }
    return self;
}

- (instancetype)initWithInsideSharedFolder {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharePathErrorInsideSharedFolder;
    }
    return self;
}

- (instancetype)initWithContainsSharedFolder {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharePathErrorContainsSharedFolder;
    }
    return self;
}

- (instancetype)initWithIsAppFolder {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharePathErrorIsAppFolder;
    }
    return self;
}

- (instancetype)initWithInsideAppFolder {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharePathErrorInsideAppFolder;
    }
    return self;
}

- (instancetype)initWithIsPublicFolder {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharePathErrorIsPublicFolder;
    }
    return self;
}

- (instancetype)initWithInsidePublicFolder {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharePathErrorInsidePublicFolder;
    }
    return self;
}

- (instancetype)initWithAlreadyShared:(DbxSharingSharedFolderMetadata *)alreadyShared {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharePathErrorAlreadyShared;
        _alreadyShared = alreadyShared;
    }
    return self;
}

- (instancetype)initWithInvalidPath {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharePathErrorInvalidPath;
    }
    return self;
}

- (instancetype)initWithIsOsxPackage {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharePathErrorIsOsxPackage;
    }
    return self;
}

- (instancetype)initWithInsideOsxPackage {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharePathErrorInsideOsxPackage;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharePathErrorOther;
    }
    return self;
}

- (BOOL)isIsFile {
    return _tag == SharingSharePathErrorIsFile;
}

- (BOOL)isInsideSharedFolder {
    return _tag == SharingSharePathErrorInsideSharedFolder;
}

- (BOOL)isContainsSharedFolder {
    return _tag == SharingSharePathErrorContainsSharedFolder;
}

- (BOOL)isIsAppFolder {
    return _tag == SharingSharePathErrorIsAppFolder;
}

- (BOOL)isInsideAppFolder {
    return _tag == SharingSharePathErrorInsideAppFolder;
}

- (BOOL)isIsPublicFolder {
    return _tag == SharingSharePathErrorIsPublicFolder;
}

- (BOOL)isInsidePublicFolder {
    return _tag == SharingSharePathErrorInsidePublicFolder;
}

- (BOOL)isAlreadyShared {
    return _tag == SharingSharePathErrorAlreadyShared;
}

- (BOOL)isInvalidPath {
    return _tag == SharingSharePathErrorInvalidPath;
}

- (BOOL)isIsOsxPackage {
    return _tag == SharingSharePathErrorIsOsxPackage;
}

- (BOOL)isInsideOsxPackage {
    return _tag == SharingSharePathErrorInsideOsxPackage;
}

- (BOOL)isOther {
    return _tag == SharingSharePathErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingSharePathErrorIsFile:
           return @"SharingSharePathErrorIsFile";
        case SharingSharePathErrorInsideSharedFolder:
           return @"SharingSharePathErrorInsideSharedFolder";
        case SharingSharePathErrorContainsSharedFolder:
           return @"SharingSharePathErrorContainsSharedFolder";
        case SharingSharePathErrorIsAppFolder:
           return @"SharingSharePathErrorIsAppFolder";
        case SharingSharePathErrorInsideAppFolder:
           return @"SharingSharePathErrorInsideAppFolder";
        case SharingSharePathErrorIsPublicFolder:
           return @"SharingSharePathErrorIsPublicFolder";
        case SharingSharePathErrorInsidePublicFolder:
           return @"SharingSharePathErrorInsidePublicFolder";
        case SharingSharePathErrorAlreadyShared:
           return @"SharingSharePathErrorAlreadyShared";
        case SharingSharePathErrorInvalidPath:
           return @"SharingSharePathErrorInvalidPath";
        case SharingSharePathErrorIsOsxPackage:
           return @"SharingSharePathErrorIsOsxPackage";
        case SharingSharePathErrorInsideOsxPackage:
           return @"SharingSharePathErrorInsideOsxPackage";
        case SharingSharePathErrorOther:
           return @"SharingSharePathErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharedFolderMetadata *)alreadyShared {
    if (_tag != SharingSharePathErrorAlreadyShared) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingSharePathErrorAlreadyShared, but was %@.", [self getTagName]];
    }
    return _alreadyShared;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingSharePathErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingSharePathErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingSharePathErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingSharePathErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingSharePathError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isIsFile]) {
        jsonDict[@".tag"] = @"is_file";
    }
    else if ([valueObj isInsideSharedFolder]) {
        jsonDict[@".tag"] = @"inside_shared_folder";
    }
    else if ([valueObj isContainsSharedFolder]) {
        jsonDict[@".tag"] = @"contains_shared_folder";
    }
    else if ([valueObj isIsAppFolder]) {
        jsonDict[@".tag"] = @"is_app_folder";
    }
    else if ([valueObj isInsideAppFolder]) {
        jsonDict[@".tag"] = @"inside_app_folder";
    }
    else if ([valueObj isIsPublicFolder]) {
        jsonDict[@".tag"] = @"is_public_folder";
    }
    else if ([valueObj isInsidePublicFolder]) {
        jsonDict[@".tag"] = @"inside_public_folder";
    }
    else if ([valueObj isAlreadyShared]) {
        jsonDict = [[DbxSharingSharedFolderMetadataSerializer serialize:valueObj.alreadyShared] mutableCopy];
        jsonDict[@".tag"] = @"already_shared";
    }
    else if ([valueObj isInvalidPath]) {
        jsonDict[@".tag"] = @"invalid_path";
    }
    else if ([valueObj isIsOsxPackage]) {
        jsonDict[@".tag"] = @"is_osx_package";
    }
    else if ([valueObj isInsideOsxPackage]) {
        jsonDict[@".tag"] = @"inside_osx_package";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingSharePathError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"is_file"]) {
        return [[DbxSharingSharePathError alloc] initWithIsFile];
    }
    if ([tag isEqualToString:@"inside_shared_folder"]) {
        return [[DbxSharingSharePathError alloc] initWithInsideSharedFolder];
    }
    if ([tag isEqualToString:@"contains_shared_folder"]) {
        return [[DbxSharingSharePathError alloc] initWithContainsSharedFolder];
    }
    if ([tag isEqualToString:@"is_app_folder"]) {
        return [[DbxSharingSharePathError alloc] initWithIsAppFolder];
    }
    if ([tag isEqualToString:@"inside_app_folder"]) {
        return [[DbxSharingSharePathError alloc] initWithInsideAppFolder];
    }
    if ([tag isEqualToString:@"is_public_folder"]) {
        return [[DbxSharingSharePathError alloc] initWithIsPublicFolder];
    }
    if ([tag isEqualToString:@"inside_public_folder"]) {
        return [[DbxSharingSharePathError alloc] initWithInsidePublicFolder];
    }
    if ([tag isEqualToString:@"already_shared"]) {
        DbxSharingSharedFolderMetadata *alreadyShared = [DbxSharingSharedFolderMetadataSerializer deserialize:valueDict];
        return [[DbxSharingSharePathError alloc] initWithAlreadyShared:alreadyShared];
    }
    if ([tag isEqualToString:@"invalid_path"]) {
        return [[DbxSharingSharePathError alloc] initWithInvalidPath];
    }
    if ([tag isEqualToString:@"is_osx_package"]) {
        return [[DbxSharingSharePathError alloc] initWithIsOsxPackage];
    }
    if ([tag isEqualToString:@"inside_osx_package"]) {
        return [[DbxSharingSharePathError alloc] initWithInsideOsxPackage];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingSharePathError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
