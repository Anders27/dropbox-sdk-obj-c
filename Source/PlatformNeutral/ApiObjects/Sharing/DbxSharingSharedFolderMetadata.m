///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGAccessLevel.h"
#import "DBXSHARINGFolderPermission.h"
#import "DBXSHARINGFolderPolicy.h"
#import "DBXSHARINGSharedFolderMetadata.h"
#import "DBXSHARINGSharedFolderMetadataBase.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXUSERSTeam.h"

@implementation DBXSHARINGSharedFolderMetadata 

- (instancetype)initWithAccessType:(DBXSHARINGAccessLevel *)accessType isTeamFolder:(NSNumber *)isTeamFolder policy:(DBXSHARINGFolderPolicy *)policy name:(NSString *)name sharedFolderId:(NSString *)sharedFolderId timeInvited:(NSDate *)timeInvited previewUrl:(NSString *)previewUrl ownerTeam:(DBXUSERSTeam *)ownerTeam parentSharedFolderId:(NSString *)parentSharedFolderId pathLower:(NSString *)pathLower permissions:(NSArray<DBXSHARINGFolderPermission *> *)permissions {
    [DBXStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);
    [DBXStoneValidators nullableValidator:[DBXStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](parentSharedFolderId);
    [DBXStoneValidators nullableValidator:[DBXStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](permissions);

    self = [super initWithAccessType:accessType isTeamFolder:isTeamFolder policy:policy ownerTeam:ownerTeam parentSharedFolderId:parentSharedFolderId];
    if (self != nil) {
        _pathLower = pathLower;
        _name = name;
        _sharedFolderId = sharedFolderId;
        _permissions = permissions;
        _timeInvited = timeInvited;
        _previewUrl = previewUrl;
    }
    return self;
}

- (instancetype)initWithAccessType:(DBXSHARINGAccessLevel *)accessType isTeamFolder:(NSNumber *)isTeamFolder policy:(DBXSHARINGFolderPolicy *)policy name:(NSString *)name sharedFolderId:(NSString *)sharedFolderId timeInvited:(NSDate *)timeInvited previewUrl:(NSString *)previewUrl {
    return [self initWithAccessType:accessType isTeamFolder:isTeamFolder policy:policy name:name sharedFolderId:sharedFolderId timeInvited:timeInvited previewUrl:previewUrl ownerTeam:nil parentSharedFolderId:nil pathLower:nil permissions:nil];
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGSharedFolderMetadataSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGSharedFolderMetadataSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGSharedFolderMetadataSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGSharedFolderMetadataSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGSharedFolderMetadata *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    jsonDict[@"access_type"] = [DBXSHARINGAccessLevelSerializer serialize:valueObj.accessType];
    jsonDict[@"is_team_folder"] = valueObj.isTeamFolder;
    jsonDict[@"policy"] = [DBXSHARINGFolderPolicySerializer serialize:valueObj.policy];
    jsonDict[@"name"] = valueObj.name;
    jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
    jsonDict[@"time_invited"] = [DBXNSDateSerializer serialize:valueObj.timeInvited dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
    jsonDict[@"preview_url"] = valueObj.previewUrl;
    if (valueObj.ownerTeam) {
        jsonDict[@"owner_team"] = [DBXUSERSTeamSerializer serialize:valueObj.ownerTeam];
    }
    if (valueObj.parentSharedFolderId) {
        jsonDict[@"parent_shared_folder_id"] = valueObj.parentSharedFolderId;
    }
    if (valueObj.pathLower) {
        jsonDict[@"path_lower"] = valueObj.pathLower;
    }
    if (valueObj.permissions) {
        jsonDict[@"permissions"] = [DBXArraySerializer serialize:valueObj.permissions withBlock:^id(id elem) { return [DBXSHARINGFolderPermissionSerializer serialize:elem]; }];
    }

    return jsonDict;
}

+ (DBXSHARINGSharedFolderMetadata *)deserialize:(NSDictionary *)valueDict {
    DBXSHARINGAccessLevel *accessType = [DBXSHARINGAccessLevelSerializer deserialize:valueDict[@"access_type"]];
    NSNumber *isTeamFolder = valueDict[@"is_team_folder"];
    DBXSHARINGFolderPolicy *policy = [DBXSHARINGFolderPolicySerializer deserialize:valueDict[@"policy"]];
    NSString *name = valueDict[@"name"];
    NSString *sharedFolderId = valueDict[@"shared_folder_id"];
    NSDate *timeInvited = [DBXNSDateSerializer deserialize:valueDict[@"time_invited"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
    NSString *previewUrl = valueDict[@"preview_url"];
    DBXUSERSTeam *ownerTeam = valueDict[@"owner_team"] ? [DBXUSERSTeamSerializer deserialize:valueDict[@"owner_team"]] : nil;
    NSString *parentSharedFolderId = valueDict[@"parent_shared_folder_id"] ?: nil;
    NSString *pathLower = valueDict[@"path_lower"] ?: nil;
    NSArray<DBXSHARINGFolderPermission *> *permissions = valueDict[@"permissions"] ? [DBXArraySerializer deserialize:valueDict[@"permissions"] withBlock:^id(id elem) { return [DBXSHARINGFolderPermissionSerializer deserialize:elem]; }] : nil;

    return [[DBXSHARINGSharedFolderMetadata alloc] initWithAccessType:accessType isTeamFolder:isTeamFolder policy:policy name:name sharedFolderId:sharedFolderId timeInvited:timeInvited previewUrl:previewUrl ownerTeam:ownerTeam parentSharedFolderId:parentSharedFolderId pathLower:pathLower permissions:permissions];
}

@end
