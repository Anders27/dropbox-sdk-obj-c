///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGSharedLinkAccessFailureReason.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGSharedLinkAccessFailureReason 

- (instancetype)initWithLoginRequired {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedLinkAccessFailureReasonLoginRequired;
    }
    return self;
}

- (instancetype)initWithEmailVerifyRequired {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedLinkAccessFailureReasonEmailVerifyRequired;
    }
    return self;
}

- (instancetype)initWithPasswordRequired {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedLinkAccessFailureReasonPasswordRequired;
    }
    return self;
}

- (instancetype)initWithTeamOnly {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedLinkAccessFailureReasonTeamOnly;
    }
    return self;
}

- (instancetype)initWithOwnerOnly {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedLinkAccessFailureReasonOwnerOnly;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedLinkAccessFailureReasonOther;
    }
    return self;
}

- (BOOL)isLoginRequired {
    return _tag == DBXSHARINGSharedLinkAccessFailureReasonLoginRequired;
}

- (BOOL)isEmailVerifyRequired {
    return _tag == DBXSHARINGSharedLinkAccessFailureReasonEmailVerifyRequired;
}

- (BOOL)isPasswordRequired {
    return _tag == DBXSHARINGSharedLinkAccessFailureReasonPasswordRequired;
}

- (BOOL)isTeamOnly {
    return _tag == DBXSHARINGSharedLinkAccessFailureReasonTeamOnly;
}

- (BOOL)isOwnerOnly {
    return _tag == DBXSHARINGSharedLinkAccessFailureReasonOwnerOnly;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGSharedLinkAccessFailureReasonOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGSharedLinkAccessFailureReasonLoginRequired:
           return @"DBXSHARINGSharedLinkAccessFailureReasonLoginRequired";
        case DBXSHARINGSharedLinkAccessFailureReasonEmailVerifyRequired:
           return @"DBXSHARINGSharedLinkAccessFailureReasonEmailVerifyRequired";
        case DBXSHARINGSharedLinkAccessFailureReasonPasswordRequired:
           return @"DBXSHARINGSharedLinkAccessFailureReasonPasswordRequired";
        case DBXSHARINGSharedLinkAccessFailureReasonTeamOnly:
           return @"DBXSHARINGSharedLinkAccessFailureReasonTeamOnly";
        case DBXSHARINGSharedLinkAccessFailureReasonOwnerOnly:
           return @"DBXSHARINGSharedLinkAccessFailureReasonOwnerOnly";
        case DBXSHARINGSharedLinkAccessFailureReasonOther:
           return @"DBXSHARINGSharedLinkAccessFailureReasonOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGSharedLinkAccessFailureReasonSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGSharedLinkAccessFailureReasonSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGSharedLinkAccessFailureReasonSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGSharedLinkAccessFailureReasonSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGSharedLinkAccessFailureReason *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isLoginRequired]) {
        jsonDict[@".tag"] = @"login_required";
    }
    else if ([valueObj isEmailVerifyRequired]) {
        jsonDict[@".tag"] = @"email_verify_required";
    }
    else if ([valueObj isPasswordRequired]) {
        jsonDict[@".tag"] = @"password_required";
    }
    else if ([valueObj isTeamOnly]) {
        jsonDict[@".tag"] = @"team_only";
    }
    else if ([valueObj isOwnerOnly]) {
        jsonDict[@".tag"] = @"owner_only";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGSharedLinkAccessFailureReason *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"login_required"]) {
        return [[DBXSHARINGSharedLinkAccessFailureReason alloc] initWithLoginRequired];
    }
    else if ([tag isEqualToString:@"email_verify_required"]) {
        return [[DBXSHARINGSharedLinkAccessFailureReason alloc] initWithEmailVerifyRequired];
    }
    else if ([tag isEqualToString:@"password_required"]) {
        return [[DBXSHARINGSharedLinkAccessFailureReason alloc] initWithPasswordRequired];
    }
    else if ([tag isEqualToString:@"team_only"]) {
        return [[DBXSHARINGSharedLinkAccessFailureReason alloc] initWithTeamOnly];
    }
    else if ([tag isEqualToString:@"owner_only"]) {
        return [[DBXSHARINGSharedLinkAccessFailureReason alloc] initWithOwnerOnly];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGSharedLinkAccessFailureReason alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
