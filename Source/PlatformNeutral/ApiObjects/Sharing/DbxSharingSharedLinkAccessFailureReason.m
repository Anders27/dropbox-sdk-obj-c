///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingSharedLinkAccessFailureReason.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingSharedLinkAccessFailureReason 

- (instancetype)initWithLoginRequired {
    self = [super init];
    if (self != nil) {
        _tag = (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonLoginRequired;
    }
    return self;
}

- (instancetype)initWithEmailVerifyRequired {
    self = [super init];
    if (self != nil) {
        _tag = (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonEmailVerifyRequired;
    }
    return self;
}

- (instancetype)initWithPasswordRequired {
    self = [super init];
    if (self != nil) {
        _tag = (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonPasswordRequired;
    }
    return self;
}

- (instancetype)initWithTeamOnly {
    self = [super init];
    if (self != nil) {
        _tag = (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonTeamOnly;
    }
    return self;
}

- (instancetype)initWithOwnerOnly {
    self = [super init];
    if (self != nil) {
        _tag = (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonOwnerOnly;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonOther;
    }
    return self;
}

- (BOOL)isLoginRequired {
    return _tag == (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonLoginRequired;
}

- (BOOL)isEmailVerifyRequired {
    return _tag == (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonEmailVerifyRequired;
}

- (BOOL)isPasswordRequired {
    return _tag == (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonPasswordRequired;
}

- (BOOL)isTeamOnly {
    return _tag == (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonTeamOnly;
}

- (BOOL)isOwnerOnly {
    return _tag == (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonOwnerOnly;
}

- (BOOL)isOther {
    return _tag == (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonOther;
}

- (NSString *)getTagName {
    if (_tag == (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonLoginRequired) {
        return @"(SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonLoginRequired";
    }
    if (_tag == (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonEmailVerifyRequired) {
        return @"(SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonEmailVerifyRequired";
    }
    if (_tag == (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonPasswordRequired) {
        return @"(SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonPasswordRequired";
    }
    if (_tag == (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonTeamOnly) {
        return @"(SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonTeamOnly";
    }
    if (_tag == (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonOwnerOnly) {
        return @"(SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonOwnerOnly";
    }
    if (_tag == (SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonOther) {
        return @"(SharingSharedLinkAccessFailureReasonTag)SharingSharedLinkAccessFailureReasonOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingSharedLinkAccessFailureReasonSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingSharedLinkAccessFailureReasonSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingSharedLinkAccessFailureReasonSerializer serialize:self] description];
}

@end


@implementation DbxSharingSharedLinkAccessFailureReasonSerializer 

+ (NSDictionary *)serialize:(DbxSharingSharedLinkAccessFailureReason *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isLoginRequired]) {
        jsonDict[@".tag"] = @"login_required";
    }
    else if ([valueObj isEmailVerifyRequired]) {
        jsonDict[@".tag"] = @"email_verify_required";
    }
    else if ([valueObj isPasswordRequired]) {
        jsonDict[@".tag"] = @"password_required";
    }
    else if ([valueObj isTeamOnly]) {
        jsonDict[@".tag"] = @"team_only";
    }
    else if ([valueObj isOwnerOnly]) {
        jsonDict[@".tag"] = @"owner_only";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingSharedLinkAccessFailureReason *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"login_required"]) {
        return [[DbxSharingSharedLinkAccessFailureReason alloc] initWithLoginRequired];
    }
    if ([tag isEqualToString:@"email_verify_required"]) {
        return [[DbxSharingSharedLinkAccessFailureReason alloc] initWithEmailVerifyRequired];
    }
    if ([tag isEqualToString:@"password_required"]) {
        return [[DbxSharingSharedLinkAccessFailureReason alloc] initWithPasswordRequired];
    }
    if ([tag isEqualToString:@"team_only"]) {
        return [[DbxSharingSharedLinkAccessFailureReason alloc] initWithTeamOnly];
    }
    if ([tag isEqualToString:@"owner_only"]) {
        return [[DbxSharingSharedLinkAccessFailureReason alloc] initWithOwnerOnly];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingSharedLinkAccessFailureReason alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
