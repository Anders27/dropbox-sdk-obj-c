///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGSharedLinkError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGSharedLinkError 

- (instancetype)initWithSharedLinkNotFound {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedLinkErrorSharedLinkNotFound;
    }
    return self;
}

- (instancetype)initWithSharedLinkAccessDenied {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedLinkErrorSharedLinkAccessDenied;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGSharedLinkErrorOther;
    }
    return self;
}

- (BOOL)isSharedLinkNotFound {
    return _tag == DBXSHARINGSharedLinkErrorSharedLinkNotFound;
}

- (BOOL)isSharedLinkAccessDenied {
    return _tag == DBXSHARINGSharedLinkErrorSharedLinkAccessDenied;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGSharedLinkErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGSharedLinkErrorSharedLinkNotFound:
           return @"DBXSHARINGSharedLinkErrorSharedLinkNotFound";
        case DBXSHARINGSharedLinkErrorSharedLinkAccessDenied:
           return @"DBXSHARINGSharedLinkErrorSharedLinkAccessDenied";
        case DBXSHARINGSharedLinkErrorOther:
           return @"DBXSHARINGSharedLinkErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGSharedLinkErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGSharedLinkErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGSharedLinkErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGSharedLinkErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGSharedLinkError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isSharedLinkNotFound]) {
        jsonDict[@".tag"] = @"shared_link_not_found";
    }
    else if ([valueObj isSharedLinkAccessDenied]) {
        jsonDict[@".tag"] = @"shared_link_access_denied";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGSharedLinkError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"shared_link_not_found"]) {
        return [[DBXSHARINGSharedLinkError alloc] initWithSharedLinkNotFound];
    }
    else if ([tag isEqualToString:@"shared_link_access_denied"]) {
        return [[DBXSHARINGSharedLinkError alloc] initWithSharedLinkAccessDenied];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGSharedLinkError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
