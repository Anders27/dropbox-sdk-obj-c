///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingFileLinkMetadata.h"
#import "DbxSharingFolderLinkMetadata.h"
#import "DbxSharingLinkPermissions.h"
#import "DbxSharingSharedLinkMetadata.h"
#import "DbxSharingTeamMemberInfo.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxUsersTeam.h"

@implementation DbxSharingSharedLinkMetadata 

- (instancetype)initWithUrl:(NSString *)url name:(NSString *)name linkPermissions:(DbxSharingLinkPermissions *)linkPermissions id_:(NSString *)id_ expires:(NSDate *)expires pathLower:(NSString *)pathLower teamMemberInfo:(DbxSharingTeamMemberInfo *)teamMemberInfo contentOwnerTeamInfo:(DbxUsersTeam *)contentOwnerTeamInfo {
    [DbxStoneValidators nullableValidator:[DbxStoneValidators stringValidator:[NSNumber numberWithInt:1] maxLength:nil pattern:nil]](id_);

    self = [super init];
    if (self != nil) {
        _url = url;
        _id_ = id_;
        _name = name;
        _expires = expires;
        _pathLower = pathLower;
        _linkPermissions = linkPermissions;
        _teamMemberInfo = teamMemberInfo;
        _contentOwnerTeamInfo = contentOwnerTeamInfo;
    }
    return self;
}

- (instancetype)initWithUrl:(NSString *)url name:(NSString *)name linkPermissions:(DbxSharingLinkPermissions *)linkPermissions {
    return [self initWithUrl:url name:name linkPermissions:linkPermissions id_:nil expires:nil pathLower:nil teamMemberInfo:nil contentOwnerTeamInfo:nil];
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingSharedLinkMetadataSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingSharedLinkMetadataSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingSharedLinkMetadataSerializer serialize:self] description];
}

@end


@implementation DbxSharingSharedLinkMetadataSerializer 

+ (NSDictionary *)serialize:(DbxSharingSharedLinkMetadata *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    jsonDict[@"url"] = [DbxStringSerializer serialize:valueObj.url];
    jsonDict[@"name"] = [DbxStringSerializer serialize:valueObj.name];
    jsonDict[@"link_permissions"] = [DbxSharingLinkPermissionsSerializer serialize:valueObj.linkPermissions];
    if (valueObj.id_ != nil) {
        jsonDict[@"id"] = [DbxStringSerializer serialize:valueObj.id_];
    }
    if (valueObj.expires != nil) {
        jsonDict[@"expires"] = [DbxNSDateSerializer serialize:valueObj.expires dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
    }
    if (valueObj.pathLower != nil) {
        jsonDict[@"path_lower"] = [DbxStringSerializer serialize:valueObj.pathLower];
    }
    if (valueObj.teamMemberInfo != nil) {
        jsonDict[@"team_member_info"] = [DbxSharingTeamMemberInfoSerializer serialize:valueObj.teamMemberInfo];
    }
    if (valueObj.contentOwnerTeamInfo != nil) {
        jsonDict[@"content_owner_team_info"] = [DbxUsersTeamSerializer serialize:valueObj.contentOwnerTeamInfo];
    }

    if ([valueObj isKindOfClass:[DbxSharingFileLinkMetadata class]]) {
        NSDictionary *subTypeFields = [DbxSharingFileLinkMetadataSerializer serialize:(DbxSharingFileLinkMetadata *)valueObj];
        for (NSString* key in subTypeFields) {
            jsonDict[key] = subTypeFields[key];
        }
        jsonDict[@".tag"] = @"file";
    }
    if ([valueObj isKindOfClass:[DbxSharingFolderLinkMetadata class]]) {
        NSDictionary *subTypeFields = [DbxSharingFolderLinkMetadataSerializer serialize:(DbxSharingFolderLinkMetadata *)valueObj];
        for (NSString* key in subTypeFields) {
            jsonDict[key] = subTypeFields[key];
        }
        jsonDict[@".tag"] = @"folder";
    }

    return jsonDict;
}

+ (DbxSharingSharedLinkMetadata *)deserialize:(NSDictionary *)valueDict {
    if ([valueDict[@".tag"] isEqualToString:@"file"]) {
        return [DbxSharingFileLinkMetadataSerializer deserialize:valueDict];
    }
    if ([valueDict[@".tag"] isEqualToString:@"folder"]) {
        return [DbxSharingFolderLinkMetadataSerializer deserialize:valueDict];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
