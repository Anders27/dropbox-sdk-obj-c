///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingSharedLinkSettingsError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingSharedLinkSettingsError 

- (instancetype)initWithInvalidSettings {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharedLinkSettingsErrorInvalidSettings;
    }
    return self;
}

- (instancetype)initWithNotAuthorized {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharedLinkSettingsErrorNotAuthorized;
    }
    return self;
}

- (BOOL)isInvalidSettings {
    return _tag == SharingSharedLinkSettingsErrorInvalidSettings;
}

- (BOOL)isNotAuthorized {
    return _tag == SharingSharedLinkSettingsErrorNotAuthorized;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingSharedLinkSettingsErrorInvalidSettings:
           return @"SharingSharedLinkSettingsErrorInvalidSettings";
        case SharingSharedLinkSettingsErrorNotAuthorized:
           return @"SharingSharedLinkSettingsErrorNotAuthorized";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingSharedLinkSettingsErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingSharedLinkSettingsErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingSharedLinkSettingsErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingSharedLinkSettingsErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingSharedLinkSettingsError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInvalidSettings]) {
        jsonDict[@".tag"] = @"invalid_settings";
    }
    else if ([valueObj isNotAuthorized]) {
        jsonDict[@".tag"] = @"not_authorized";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingSharedLinkSettingsError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"invalid_settings"]) {
        return [[DbxSharingSharedLinkSettingsError alloc] initWithInvalidSettings];
    }
    if ([tag isEqualToString:@"not_authorized"]) {
        return [[DbxSharingSharedLinkSettingsError alloc] initWithNotAuthorized];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
