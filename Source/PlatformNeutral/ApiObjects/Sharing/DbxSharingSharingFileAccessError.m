///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingSharingFileAccessError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingSharingFileAccessError 

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharingFileAccessErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithInvalidFile {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharingFileAccessErrorInvalidFile;
    }
    return self;
}

- (instancetype)initWithIsFolder {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharingFileAccessErrorIsFolder;
    }
    return self;
}

- (instancetype)initWithInsidePublicFolder {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharingFileAccessErrorInsidePublicFolder;
    }
    return self;
}

- (instancetype)initWithInsideOsxPackage {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharingFileAccessErrorInsideOsxPackage;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingSharingFileAccessErrorOther;
    }
    return self;
}

- (BOOL)isNoPermission {
    return _tag == SharingSharingFileAccessErrorNoPermission;
}

- (BOOL)isInvalidFile {
    return _tag == SharingSharingFileAccessErrorInvalidFile;
}

- (BOOL)isIsFolder {
    return _tag == SharingSharingFileAccessErrorIsFolder;
}

- (BOOL)isInsidePublicFolder {
    return _tag == SharingSharingFileAccessErrorInsidePublicFolder;
}

- (BOOL)isInsideOsxPackage {
    return _tag == SharingSharingFileAccessErrorInsideOsxPackage;
}

- (BOOL)isOther {
    return _tag == SharingSharingFileAccessErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingSharingFileAccessErrorNoPermission:
           return @"SharingSharingFileAccessErrorNoPermission";
        case SharingSharingFileAccessErrorInvalidFile:
           return @"SharingSharingFileAccessErrorInvalidFile";
        case SharingSharingFileAccessErrorIsFolder:
           return @"SharingSharingFileAccessErrorIsFolder";
        case SharingSharingFileAccessErrorInsidePublicFolder:
           return @"SharingSharingFileAccessErrorInsidePublicFolder";
        case SharingSharingFileAccessErrorInsideOsxPackage:
           return @"SharingSharingFileAccessErrorInsideOsxPackage";
        case SharingSharingFileAccessErrorOther:
           return @"SharingSharingFileAccessErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingSharingFileAccessErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingSharingFileAccessErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingSharingFileAccessErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingSharingFileAccessErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingSharingFileAccessError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isInvalidFile]) {
        jsonDict[@".tag"] = @"invalid_file";
    }
    else if ([valueObj isIsFolder]) {
        jsonDict[@".tag"] = @"is_folder";
    }
    else if ([valueObj isInsidePublicFolder]) {
        jsonDict[@".tag"] = @"inside_public_folder";
    }
    else if ([valueObj isInsideOsxPackage]) {
        jsonDict[@".tag"] = @"inside_osx_package";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingSharingFileAccessError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"no_permission"]) {
        return [[DbxSharingSharingFileAccessError alloc] initWithNoPermission];
    }
    if ([tag isEqualToString:@"invalid_file"]) {
        return [[DbxSharingSharingFileAccessError alloc] initWithInvalidFile];
    }
    if ([tag isEqualToString:@"is_folder"]) {
        return [[DbxSharingSharingFileAccessError alloc] initWithIsFolder];
    }
    if ([tag isEqualToString:@"inside_public_folder"]) {
        return [[DbxSharingSharingFileAccessError alloc] initWithInsidePublicFolder];
    }
    if ([tag isEqualToString:@"inside_osx_package"]) {
        return [[DbxSharingSharingFileAccessError alloc] initWithInsideOsxPackage];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingSharingFileAccessError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
