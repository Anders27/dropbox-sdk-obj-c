///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingSharedFolderAccessError.h"
#import "DbxSharingTransferFolderError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingTransferFolderError 

- (instancetype)initWithAccessError:(DbxSharingSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = (SharingTransferFolderErrorTag)SharingTransferFolderErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithInvalidDropboxId {
    self = [super init];
    if (self != nil) {
        _tag = (SharingTransferFolderErrorTag)SharingTransferFolderErrorInvalidDropboxId;
    }
    return self;
}

- (instancetype)initWithDNewOwnerNotAMember {
    self = [super init];
    if (self != nil) {
        _tag = (SharingTransferFolderErrorTag)SharingTransferFolderErrorDNewOwnerNotAMember;
    }
    return self;
}

- (instancetype)initWithDNewOwnerUnmounted {
    self = [super init];
    if (self != nil) {
        _tag = (SharingTransferFolderErrorTag)SharingTransferFolderErrorDNewOwnerUnmounted;
    }
    return self;
}

- (instancetype)initWithDNewOwnerEmailUnverified {
    self = [super init];
    if (self != nil) {
        _tag = (SharingTransferFolderErrorTag)SharingTransferFolderErrorDNewOwnerEmailUnverified;
    }
    return self;
}

- (instancetype)initWithTeamFolder {
    self = [super init];
    if (self != nil) {
        _tag = (SharingTransferFolderErrorTag)SharingTransferFolderErrorTeamFolder;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = (SharingTransferFolderErrorTag)SharingTransferFolderErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (SharingTransferFolderErrorTag)SharingTransferFolderErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorAccessError;
}

- (BOOL)isInvalidDropboxId {
    return _tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorInvalidDropboxId;
}

- (BOOL)isDNewOwnerNotAMember {
    return _tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorDNewOwnerNotAMember;
}

- (BOOL)isDNewOwnerUnmounted {
    return _tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorDNewOwnerUnmounted;
}

- (BOOL)isDNewOwnerEmailUnverified {
    return _tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorDNewOwnerEmailUnverified;
}

- (BOOL)isTeamFolder {
    return _tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorTeamFolder;
}

- (BOOL)isNoPermission {
    return _tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorAccessError) {
        return @"(SharingTransferFolderErrorTag)SharingTransferFolderErrorAccessError";
    }
    if (_tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorInvalidDropboxId) {
        return @"(SharingTransferFolderErrorTag)SharingTransferFolderErrorInvalidDropboxId";
    }
    if (_tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorDNewOwnerNotAMember) {
        return @"(SharingTransferFolderErrorTag)SharingTransferFolderErrorDNewOwnerNotAMember";
    }
    if (_tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorDNewOwnerUnmounted) {
        return @"(SharingTransferFolderErrorTag)SharingTransferFolderErrorDNewOwnerUnmounted";
    }
    if (_tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorDNewOwnerEmailUnverified) {
        return @"(SharingTransferFolderErrorTag)SharingTransferFolderErrorDNewOwnerEmailUnverified";
    }
    if (_tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorTeamFolder) {
        return @"(SharingTransferFolderErrorTag)SharingTransferFolderErrorTeamFolder";
    }
    if (_tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorNoPermission) {
        return @"(SharingTransferFolderErrorTag)SharingTransferFolderErrorNoPermission";
    }
    if (_tag == (SharingTransferFolderErrorTag)SharingTransferFolderErrorOther) {
        return @"(SharingTransferFolderErrorTag)SharingTransferFolderErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharedFolderAccessError *)accessError {
    if (_tag != (SharingTransferFolderErrorTag)SharingTransferFolderErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (SharingTransferFolderErrorTag)SharingTransferFolderErrorAccessError, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingTransferFolderErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingTransferFolderErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingTransferFolderErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingTransferFolderErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingTransferFolderError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict[@"access_error"] = [DbxSharingSharedFolderAccessErrorSerializer serialize:valueObj.accessError];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isInvalidDropboxId]) {
        jsonDict[@".tag"] = @"invalid_dropbox_id";
    }
    else if ([valueObj isDNewOwnerNotAMember]) {
        jsonDict[@".tag"] = @"new_owner_not_a_member";
    }
    else if ([valueObj isDNewOwnerUnmounted]) {
        jsonDict[@".tag"] = @"new_owner_unmounted";
    }
    else if ([valueObj isDNewOwnerEmailUnverified]) {
        jsonDict[@".tag"] = @"new_owner_email_unverified";
    }
    else if ([valueObj isTeamFolder]) {
        jsonDict[@".tag"] = @"team_folder";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingTransferFolderError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DbxSharingSharedFolderAccessError *accessError = [DbxSharingSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DbxSharingTransferFolderError alloc] initWithAccessError:accessError];
    }
    if ([tag isEqualToString:@"invalid_dropbox_id"]) {
        return [[DbxSharingTransferFolderError alloc] initWithInvalidDropboxId];
    }
    if ([tag isEqualToString:@"new_owner_not_a_member"]) {
        return [[DbxSharingTransferFolderError alloc] initWithDNewOwnerNotAMember];
    }
    if ([tag isEqualToString:@"new_owner_unmounted"]) {
        return [[DbxSharingTransferFolderError alloc] initWithDNewOwnerUnmounted];
    }
    if ([tag isEqualToString:@"new_owner_email_unverified"]) {
        return [[DbxSharingTransferFolderError alloc] initWithDNewOwnerEmailUnverified];
    }
    if ([tag isEqualToString:@"team_folder"]) {
        return [[DbxSharingTransferFolderError alloc] initWithTeamFolder];
    }
    if ([tag isEqualToString:@"no_permission"]) {
        return [[DbxSharingTransferFolderError alloc] initWithNoPermission];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingTransferFolderError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
