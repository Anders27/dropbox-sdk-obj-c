///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGSharedFolderAccessError.h"
#import "DBXSHARINGTransferFolderError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGTransferFolderError 

- (instancetype)initWithAccessError:(DBXSHARINGSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGTransferFolderErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithInvalidDropboxId {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGTransferFolderErrorInvalidDropboxId;
    }
    return self;
}

- (instancetype)initWithDNewOwnerNotAMember {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGTransferFolderErrorDNewOwnerNotAMember;
    }
    return self;
}

- (instancetype)initWithDNewOwnerUnmounted {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGTransferFolderErrorDNewOwnerUnmounted;
    }
    return self;
}

- (instancetype)initWithDNewOwnerEmailUnverified {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGTransferFolderErrorDNewOwnerEmailUnverified;
    }
    return self;
}

- (instancetype)initWithTeamFolder {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGTransferFolderErrorTeamFolder;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGTransferFolderErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGTransferFolderErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == DBXSHARINGTransferFolderErrorAccessError;
}

- (BOOL)isInvalidDropboxId {
    return _tag == DBXSHARINGTransferFolderErrorInvalidDropboxId;
}

- (BOOL)isDNewOwnerNotAMember {
    return _tag == DBXSHARINGTransferFolderErrorDNewOwnerNotAMember;
}

- (BOOL)isDNewOwnerUnmounted {
    return _tag == DBXSHARINGTransferFolderErrorDNewOwnerUnmounted;
}

- (BOOL)isDNewOwnerEmailUnverified {
    return _tag == DBXSHARINGTransferFolderErrorDNewOwnerEmailUnverified;
}

- (BOOL)isTeamFolder {
    return _tag == DBXSHARINGTransferFolderErrorTeamFolder;
}

- (BOOL)isNoPermission {
    return _tag == DBXSHARINGTransferFolderErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGTransferFolderErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGTransferFolderErrorAccessError:
           return @"DBXSHARINGTransferFolderErrorAccessError";
        case DBXSHARINGTransferFolderErrorInvalidDropboxId:
           return @"DBXSHARINGTransferFolderErrorInvalidDropboxId";
        case DBXSHARINGTransferFolderErrorDNewOwnerNotAMember:
           return @"DBXSHARINGTransferFolderErrorDNewOwnerNotAMember";
        case DBXSHARINGTransferFolderErrorDNewOwnerUnmounted:
           return @"DBXSHARINGTransferFolderErrorDNewOwnerUnmounted";
        case DBXSHARINGTransferFolderErrorDNewOwnerEmailUnverified:
           return @"DBXSHARINGTransferFolderErrorDNewOwnerEmailUnverified";
        case DBXSHARINGTransferFolderErrorTeamFolder:
           return @"DBXSHARINGTransferFolderErrorTeamFolder";
        case DBXSHARINGTransferFolderErrorNoPermission:
           return @"DBXSHARINGTransferFolderErrorNoPermission";
        case DBXSHARINGTransferFolderErrorOther:
           return @"DBXSHARINGTransferFolderErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharedFolderAccessError *)accessError {
    if (_tag != DBXSHARINGTransferFolderErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGTransferFolderErrorAccessError`, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGTransferFolderErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGTransferFolderErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGTransferFolderErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGTransferFolderErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGTransferFolderError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DBXSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isInvalidDropboxId]) {
        jsonDict[@".tag"] = @"invalid_dropbox_id";
    }
    else if ([valueObj isDNewOwnerNotAMember]) {
        jsonDict[@".tag"] = @"new_owner_not_a_member";
    }
    else if ([valueObj isDNewOwnerUnmounted]) {
        jsonDict[@".tag"] = @"new_owner_unmounted";
    }
    else if ([valueObj isDNewOwnerEmailUnverified]) {
        jsonDict[@".tag"] = @"new_owner_email_unverified";
    }
    else if ([valueObj isTeamFolder]) {
        jsonDict[@".tag"] = @"team_folder";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGTransferFolderError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DBXSHARINGSharedFolderAccessError *accessError = [DBXSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DBXSHARINGTransferFolderError alloc] initWithAccessError:accessError];
    }
    else if ([tag isEqualToString:@"invalid_dropbox_id"]) {
        return [[DBXSHARINGTransferFolderError alloc] initWithInvalidDropboxId];
    }
    else if ([tag isEqualToString:@"new_owner_not_a_member"]) {
        return [[DBXSHARINGTransferFolderError alloc] initWithDNewOwnerNotAMember];
    }
    else if ([tag isEqualToString:@"new_owner_unmounted"]) {
        return [[DBXSHARINGTransferFolderError alloc] initWithDNewOwnerUnmounted];
    }
    else if ([tag isEqualToString:@"new_owner_email_unverified"]) {
        return [[DBXSHARINGTransferFolderError alloc] initWithDNewOwnerEmailUnverified];
    }
    else if ([tag isEqualToString:@"team_folder"]) {
        return [[DBXSHARINGTransferFolderError alloc] initWithTeamFolder];
    }
    else if ([tag isEqualToString:@"no_permission"]) {
        return [[DBXSHARINGTransferFolderError alloc] initWithNoPermission];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGTransferFolderError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
