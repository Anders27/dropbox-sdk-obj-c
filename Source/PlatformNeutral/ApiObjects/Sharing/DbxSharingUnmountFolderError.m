///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGSharedFolderAccessError.h"
#import "DBXSHARINGUnmountFolderError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGUnmountFolderError 

- (instancetype)initWithAccessError:(DBXSHARINGSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUnmountFolderErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUnmountFolderErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithNotUnmountable {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUnmountFolderErrorNotUnmountable;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUnmountFolderErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == DBXSHARINGUnmountFolderErrorAccessError;
}

- (BOOL)isNoPermission {
    return _tag == DBXSHARINGUnmountFolderErrorNoPermission;
}

- (BOOL)isNotUnmountable {
    return _tag == DBXSHARINGUnmountFolderErrorNotUnmountable;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGUnmountFolderErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGUnmountFolderErrorAccessError:
           return @"DBXSHARINGUnmountFolderErrorAccessError";
        case DBXSHARINGUnmountFolderErrorNoPermission:
           return @"DBXSHARINGUnmountFolderErrorNoPermission";
        case DBXSHARINGUnmountFolderErrorNotUnmountable:
           return @"DBXSHARINGUnmountFolderErrorNotUnmountable";
        case DBXSHARINGUnmountFolderErrorOther:
           return @"DBXSHARINGUnmountFolderErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharedFolderAccessError *)accessError {
    if (_tag != DBXSHARINGUnmountFolderErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGUnmountFolderErrorAccessError`, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGUnmountFolderErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGUnmountFolderErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGUnmountFolderErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGUnmountFolderErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGUnmountFolderError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DBXSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isNotUnmountable]) {
        jsonDict[@".tag"] = @"not_unmountable";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGUnmountFolderError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DBXSHARINGSharedFolderAccessError *accessError = [DBXSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DBXSHARINGUnmountFolderError alloc] initWithAccessError:accessError];
    }
    else if ([tag isEqualToString:@"no_permission"]) {
        return [[DBXSHARINGUnmountFolderError alloc] initWithNoPermission];
    }
    else if ([tag isEqualToString:@"not_unmountable"]) {
        return [[DBXSHARINGUnmountFolderError alloc] initWithNotUnmountable];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGUnmountFolderError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
