///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGSharedFolderAccessError.h"
#import "DBXSHARINGUnshareFolderError.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"

@implementation DBXSHARINGUnshareFolderError 

- (instancetype)initWithAccessError:(DBXSHARINGSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUnshareFolderErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithTeamFolder {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUnshareFolderErrorTeamFolder;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUnshareFolderErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXSHARINGUnshareFolderErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == DBXSHARINGUnshareFolderErrorAccessError;
}

- (BOOL)isTeamFolder {
    return _tag == DBXSHARINGUnshareFolderErrorTeamFolder;
}

- (BOOL)isNoPermission {
    return _tag == DBXSHARINGUnshareFolderErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == DBXSHARINGUnshareFolderErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXSHARINGUnshareFolderErrorAccessError:
           return @"DBXSHARINGUnshareFolderErrorAccessError";
        case DBXSHARINGUnshareFolderErrorTeamFolder:
           return @"DBXSHARINGUnshareFolderErrorTeamFolder";
        case DBXSHARINGUnshareFolderErrorNoPermission:
           return @"DBXSHARINGUnshareFolderErrorNoPermission";
        case DBXSHARINGUnshareFolderErrorOther:
           return @"DBXSHARINGUnshareFolderErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXSHARINGSharedFolderAccessError *)accessError {
    if (_tag != DBXSHARINGUnshareFolderErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXSHARINGUnshareFolderErrorAccessError`, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXSHARINGUnshareFolderErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXSHARINGUnshareFolderErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXSHARINGUnshareFolderErrorSerializer serialize:self] description];
}

@end


@implementation DBXSHARINGUnshareFolderErrorSerializer 

+ (NSDictionary *)serialize:(DBXSHARINGUnshareFolderError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DBXSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isTeamFolder]) {
        jsonDict[@".tag"] = @"team_folder";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXSHARINGUnshareFolderError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DBXSHARINGSharedFolderAccessError *accessError = [DBXSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DBXSHARINGUnshareFolderError alloc] initWithAccessError:accessError];
    }
    else if ([tag isEqualToString:@"team_folder"]) {
        return [[DBXSHARINGUnshareFolderError alloc] initWithTeamFolder];
    }
    else if ([tag isEqualToString:@"no_permission"]) {
        return [[DBXSHARINGUnshareFolderError alloc] initWithNoPermission];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXSHARINGUnshareFolderError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
