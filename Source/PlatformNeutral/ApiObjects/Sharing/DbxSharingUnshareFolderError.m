///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingSharedFolderAccessError.h"
#import "DbxSharingUnshareFolderError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingUnshareFolderError 

- (instancetype)initWithAccessError:(DbxSharingSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = SharingUnshareFolderErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithTeamFolder {
    self = [super init];
    if (self != nil) {
        _tag = SharingUnshareFolderErrorTeamFolder;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = SharingUnshareFolderErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingUnshareFolderErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == SharingUnshareFolderErrorAccessError;
}

- (BOOL)isTeamFolder {
    return _tag == SharingUnshareFolderErrorTeamFolder;
}

- (BOOL)isNoPermission {
    return _tag == SharingUnshareFolderErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == SharingUnshareFolderErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingUnshareFolderErrorAccessError:
           return @"SharingUnshareFolderErrorAccessError";
        case SharingUnshareFolderErrorTeamFolder:
           return @"SharingUnshareFolderErrorTeamFolder";
        case SharingUnshareFolderErrorNoPermission:
           return @"SharingUnshareFolderErrorNoPermission";
        case SharingUnshareFolderErrorOther:
           return @"SharingUnshareFolderErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharedFolderAccessError *)accessError {
    if (_tag != SharingUnshareFolderErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingUnshareFolderErrorAccessError, but was %@.", [self getTagName]];
    }
    return _accessError;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingUnshareFolderErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingUnshareFolderErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingUnshareFolderErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingUnshareFolderErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingUnshareFolderError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DbxSharingSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isTeamFolder]) {
        jsonDict[@".tag"] = @"team_folder";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingUnshareFolderError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DbxSharingSharedFolderAccessError *accessError = [DbxSharingSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DbxSharingUnshareFolderError alloc] initWithAccessError:accessError];
    }
    if ([tag isEqualToString:@"team_folder"]) {
        return [[DbxSharingUnshareFolderError alloc] initWithTeamFolder];
    }
    if ([tag isEqualToString:@"no_permission"]) {
        return [[DbxSharingUnshareFolderError alloc] initWithNoPermission];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingUnshareFolderError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
