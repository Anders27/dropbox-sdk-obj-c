///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingAddFolderMemberError.h"
#import "DbxSharingSharedFolderAccessError.h"
#import "DbxSharingSharedFolderMemberError.h"
#import "DbxSharingUpdateFolderMemberError.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingUpdateFolderMemberError 

- (instancetype)initWithAccessError:(DbxSharingSharedFolderAccessError *)accessError {
    self = [super init];
    if (self != nil) {
        _tag = SharingUpdateFolderMemberErrorAccessError;
        _accessError = accessError;
    }
    return self;
}

- (instancetype)initWithMemberError:(DbxSharingSharedFolderMemberError *)memberError {
    self = [super init];
    if (self != nil) {
        _tag = SharingUpdateFolderMemberErrorMemberError;
        _memberError = memberError;
    }
    return self;
}

- (instancetype)initWithNoExplicitAccess:(DbxSharingAddFolderMemberError *)noExplicitAccess {
    self = [super init];
    if (self != nil) {
        _tag = SharingUpdateFolderMemberErrorNoExplicitAccess;
        _noExplicitAccess = noExplicitAccess;
    }
    return self;
}

- (instancetype)initWithInsufficientPlan {
    self = [super init];
    if (self != nil) {
        _tag = SharingUpdateFolderMemberErrorInsufficientPlan;
    }
    return self;
}

- (instancetype)initWithNoPermission {
    self = [super init];
    if (self != nil) {
        _tag = SharingUpdateFolderMemberErrorNoPermission;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingUpdateFolderMemberErrorOther;
    }
    return self;
}

- (BOOL)isAccessError {
    return _tag == SharingUpdateFolderMemberErrorAccessError;
}

- (BOOL)isMemberError {
    return _tag == SharingUpdateFolderMemberErrorMemberError;
}

- (BOOL)isNoExplicitAccess {
    return _tag == SharingUpdateFolderMemberErrorNoExplicitAccess;
}

- (BOOL)isInsufficientPlan {
    return _tag == SharingUpdateFolderMemberErrorInsufficientPlan;
}

- (BOOL)isNoPermission {
    return _tag == SharingUpdateFolderMemberErrorNoPermission;
}

- (BOOL)isOther {
    return _tag == SharingUpdateFolderMemberErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingUpdateFolderMemberErrorAccessError:
           return @"SharingUpdateFolderMemberErrorAccessError";
        case SharingUpdateFolderMemberErrorMemberError:
           return @"SharingUpdateFolderMemberErrorMemberError";
        case SharingUpdateFolderMemberErrorNoExplicitAccess:
           return @"SharingUpdateFolderMemberErrorNoExplicitAccess";
        case SharingUpdateFolderMemberErrorInsufficientPlan:
           return @"SharingUpdateFolderMemberErrorInsufficientPlan";
        case SharingUpdateFolderMemberErrorNoPermission:
           return @"SharingUpdateFolderMemberErrorNoPermission";
        case SharingUpdateFolderMemberErrorOther:
           return @"SharingUpdateFolderMemberErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxSharingSharedFolderAccessError *)accessError {
    if (_tag != SharingUpdateFolderMemberErrorAccessError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingUpdateFolderMemberErrorAccessError, but was %@.", [self getTagName]];
    }
    return _accessError;
}

- (DbxSharingSharedFolderMemberError *)memberError {
    if (_tag != SharingUpdateFolderMemberErrorMemberError) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingUpdateFolderMemberErrorMemberError, but was %@.", [self getTagName]];
    }
    return _memberError;
}

- (DbxSharingAddFolderMemberError *)noExplicitAccess {
    if (_tag != SharingUpdateFolderMemberErrorNoExplicitAccess) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required SharingUpdateFolderMemberErrorNoExplicitAccess, but was %@.", [self getTagName]];
    }
    return _noExplicitAccess;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingUpdateFolderMemberErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingUpdateFolderMemberErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingUpdateFolderMemberErrorSerializer serialize:self] description];
}

@end


@implementation DbxSharingUpdateFolderMemberErrorSerializer 

+ (NSDictionary *)serialize:(DbxSharingUpdateFolderMemberError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAccessError]) {
        jsonDict = [[DbxSharingSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
        jsonDict[@".tag"] = @"access_error";
    }
    else if ([valueObj isMemberError]) {
        jsonDict = [[DbxSharingSharedFolderMemberErrorSerializer serialize:valueObj.memberError] mutableCopy];
        jsonDict[@".tag"] = @"member_error";
    }
    else if ([valueObj isNoExplicitAccess]) {
        jsonDict = [[DbxSharingAddFolderMemberErrorSerializer serialize:valueObj.noExplicitAccess] mutableCopy];
        jsonDict[@".tag"] = @"no_explicit_access";
    }
    else if ([valueObj isInsufficientPlan]) {
        jsonDict[@".tag"] = @"insufficient_plan";
    }
    else if ([valueObj isNoPermission]) {
        jsonDict[@".tag"] = @"no_permission";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingUpdateFolderMemberError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"access_error"]) {
        DbxSharingSharedFolderAccessError *accessError = [DbxSharingSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
        return [[DbxSharingUpdateFolderMemberError alloc] initWithAccessError:accessError];
    }
    if ([tag isEqualToString:@"member_error"]) {
        DbxSharingSharedFolderMemberError *memberError = [DbxSharingSharedFolderMemberErrorSerializer deserialize:valueDict[@"member_error"]];
        return [[DbxSharingUpdateFolderMemberError alloc] initWithMemberError:memberError];
    }
    if ([tag isEqualToString:@"no_explicit_access"]) {
        DbxSharingAddFolderMemberError *noExplicitAccess = [DbxSharingAddFolderMemberErrorSerializer deserialize:valueDict[@"no_explicit_access"]];
        return [[DbxSharingUpdateFolderMemberError alloc] initWithNoExplicitAccess:noExplicitAccess];
    }
    if ([tag isEqualToString:@"insufficient_plan"]) {
        return [[DbxSharingUpdateFolderMemberError alloc] initWithInsufficientPlan];
    }
    if ([tag isEqualToString:@"no_permission"]) {
        return [[DbxSharingUpdateFolderMemberError alloc] initWithNoPermission];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingUpdateFolderMemberError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
