///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingVisibility.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"

@implementation DbxSharingVisibility 

- (instancetype)initWithPublic {
    self = [super init];
    if (self != nil) {
        _tag = SharingVisibilityPublic;
    }
    return self;
}

- (instancetype)initWithTeamOnly {
    self = [super init];
    if (self != nil) {
        _tag = SharingVisibilityTeamOnly;
    }
    return self;
}

- (instancetype)initWithPassword {
    self = [super init];
    if (self != nil) {
        _tag = SharingVisibilityPassword;
    }
    return self;
}

- (instancetype)initWithTeamAndPassword {
    self = [super init];
    if (self != nil) {
        _tag = SharingVisibilityTeamAndPassword;
    }
    return self;
}

- (instancetype)initWithSharedFolderOnly {
    self = [super init];
    if (self != nil) {
        _tag = SharingVisibilitySharedFolderOnly;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = SharingVisibilityOther;
    }
    return self;
}

- (BOOL)isPublic {
    return _tag == SharingVisibilityPublic;
}

- (BOOL)isTeamOnly {
    return _tag == SharingVisibilityTeamOnly;
}

- (BOOL)isPassword {
    return _tag == SharingVisibilityPassword;
}

- (BOOL)isTeamAndPassword {
    return _tag == SharingVisibilityTeamAndPassword;
}

- (BOOL)isSharedFolderOnly {
    return _tag == SharingVisibilitySharedFolderOnly;
}

- (BOOL)isOther {
    return _tag == SharingVisibilityOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case SharingVisibilityPublic:
           return @"SharingVisibilityPublic";
        case SharingVisibilityTeamOnly:
           return @"SharingVisibilityTeamOnly";
        case SharingVisibilityPassword:
           return @"SharingVisibilityPassword";
        case SharingVisibilityTeamAndPassword:
           return @"SharingVisibilityTeamAndPassword";
        case SharingVisibilitySharedFolderOnly:
           return @"SharingVisibilitySharedFolderOnly";
        case SharingVisibilityOther:
           return @"SharingVisibilityOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxSharingVisibilitySerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxSharingVisibilitySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxSharingVisibilitySerializer serialize:self] description];
}

@end


@implementation DbxSharingVisibilitySerializer 

+ (NSDictionary *)serialize:(DbxSharingVisibility *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isPublic]) {
        jsonDict[@".tag"] = @"public";
    }
    else if ([valueObj isTeamOnly]) {
        jsonDict[@".tag"] = @"team_only";
    }
    else if ([valueObj isPassword]) {
        jsonDict[@".tag"] = @"password";
    }
    else if ([valueObj isTeamAndPassword]) {
        jsonDict[@".tag"] = @"team_and_password";
    }
    else if ([valueObj isSharedFolderOnly]) {
        jsonDict[@".tag"] = @"shared_folder_only";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxSharingVisibility *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"public"]) {
        return [[DbxSharingVisibility alloc] initWithPublic];
    }
    if ([tag isEqualToString:@"team_only"]) {
        return [[DbxSharingVisibility alloc] initWithTeamOnly];
    }
    if ([tag isEqualToString:@"password"]) {
        return [[DbxSharingVisibility alloc] initWithPassword];
    }
    if ([tag isEqualToString:@"team_and_password"]) {
        return [[DbxSharingVisibility alloc] initWithTeamAndPassword];
    }
    if ([tag isEqualToString:@"shared_folder_only"]) {
        return [[DbxSharingVisibility alloc] initWithSharedFolderOnly];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxSharingVisibility alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
