///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>
#import "DBSerializableProtocol.h"

@class DBTEAMMemberAddResult;
@class DBTEAMTeamMemberInfo;

#pragma mark - API Object

/// 
/// The MemberAddResult union.
/// 
/// Describes the result of attempting to add a single user to the team.
/// 'success' is the only value indicating that a user was indeed added to the
/// team - the other values explain the type of failure that occurred, and
/// include the email of the user for which the operation has failed.
/// 
/// This class implements the DBSerializable protocol (serialize and deserialize
/// instance methods), which is required for all Obj-C SDK API route objects.
/// 
@interface DBTEAMMemberAddResult : NSObject <DBSerializable> 

#pragma mark - Instance fields

/// The DBTEAMMemberAddResultTag enum type represents the possible tag states
/// with which the DBTEAMMemberAddResult union can exist.
typedef NS_ENUM(NSInteger, DBTEAMMemberAddResultTag) {
    /// Describes a user that was successfully added to the team.
    DBTEAMMemberAddResultSuccess,

    /// Team is already full. The organization has no available licenses.
    DBTEAMMemberAddResultTeamLicenseLimit,

    /// Team is already full. The free team member limit has been reached.
    DBTEAMMemberAddResultFreeTeamMemberLimitReached,

    /// User is already on this team. The provided email address is associated
    /// with a user who is already a member of or invited to the team.
    DBTEAMMemberAddResultUserAlreadyOnTeam,

    /// User is already on another team. The provided email address is
    /// associated with a user that is already a member or invited to another
    /// team.
    DBTEAMMemberAddResultUserOnAnotherTeam,

    /// User is already paired.
    DBTEAMMemberAddResultUserAlreadyPaired,

    /// User migration has failed.
    DBTEAMMemberAddResultUserMigrationFailed,

    /// A user with the given external member ID already exists on the team.
    DBTEAMMemberAddResultDuplicateExternalMemberId,

    /// User creation has failed.
    DBTEAMMemberAddResultUserCreationFailed,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBTEAMMemberAddResultTag tag;

/// Describes a user that was successfully added to the team. Ensure the
/// isSuccess method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMTeamMemberInfo * _Nonnull success;

/// Team is already full. The organization has no available licenses. Ensure the
/// isTeamLicenseLimit method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly, copy) NSString * _Nonnull teamLicenseLimit;

/// Team is already full. The free team member limit has been reached. Ensure
/// the isFreeTeamMemberLimitReached method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly, copy) NSString * _Nonnull freeTeamMemberLimitReached;

/// User is already on this team. The provided email address is associated with
/// a user who is already a member of or invited to the team. Ensure the
/// isUserAlreadyOnTeam method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly, copy) NSString * _Nonnull userAlreadyOnTeam;

/// User is already on another team. The provided email address is associated
/// with a user that is already a member or invited to another team. Ensure the
/// isUserOnAnotherTeam method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly, copy) NSString * _Nonnull userOnAnotherTeam;

/// User is already paired. Ensure the isUserAlreadyPaired method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly, copy) NSString * _Nonnull userAlreadyPaired;

/// User migration has failed. Ensure the isUserMigrationFailed method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly, copy) NSString * _Nonnull userMigrationFailed;

/// A user with the given external member ID already exists on the team. Ensure
/// the isDuplicateExternalMemberId method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly, copy) NSString * _Nonnull duplicateExternalMemberId;

/// User creation has failed. Ensure the isUserCreationFailed method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly, copy) NSString * _Nonnull userCreationFailed;

#pragma mark - Constructors

/// 
/// Initializes union class with tag state of Success.
/// 
/// About the Success tag state: Describes a user that was successfully added to
/// the team.
/// 
/// @param success Describes a user that was successfully added to the team.
/// 
/// @return An initialized DBTEAMMemberAddResult instance.
/// 
- (nonnull instancetype)initWithSuccess:(DBTEAMTeamMemberInfo * _Nonnull)success;

/// 
/// Initializes union class with tag state of TeamLicenseLimit.
/// 
/// About the TeamLicenseLimit tag state: Team is already full. The organization
/// has no available licenses.
/// 
/// @param teamLicenseLimit Team is already full. The organization has no
/// available licenses.
/// 
/// @return An initialized DBTEAMMemberAddResult instance.
/// 
- (nonnull instancetype)initWithTeamLicenseLimit:(NSString * _Nonnull)teamLicenseLimit;

/// 
/// Initializes union class with tag state of FreeTeamMemberLimitReached.
/// 
/// About the FreeTeamMemberLimitReached tag state: Team is already full. The
/// free team member limit has been reached.
/// 
/// @param freeTeamMemberLimitReached Team is already full. The free team member
/// limit has been reached.
/// 
/// @return An initialized DBTEAMMemberAddResult instance.
/// 
- (nonnull instancetype)initWithFreeTeamMemberLimitReached:(NSString * _Nonnull)freeTeamMemberLimitReached;

/// 
/// Initializes union class with tag state of UserAlreadyOnTeam.
/// 
/// About the UserAlreadyOnTeam tag state: User is already on this team. The
/// provided email address is associated with a user who is already a member of
/// or invited to the team.
/// 
/// @param userAlreadyOnTeam User is already on this team. The provided email
/// address is associated with a user who is already a member of or invited to
/// the team.
/// 
/// @return An initialized DBTEAMMemberAddResult instance.
/// 
- (nonnull instancetype)initWithUserAlreadyOnTeam:(NSString * _Nonnull)userAlreadyOnTeam;

/// 
/// Initializes union class with tag state of UserOnAnotherTeam.
/// 
/// About the UserOnAnotherTeam tag state: User is already on another team. The
/// provided email address is associated with a user that is already a member or
/// invited to another team.
/// 
/// @param userOnAnotherTeam User is already on another team. The provided email
/// address is associated with a user that is already a member or invited to
/// another team.
/// 
/// @return An initialized DBTEAMMemberAddResult instance.
/// 
- (nonnull instancetype)initWithUserOnAnotherTeam:(NSString * _Nonnull)userOnAnotherTeam;

/// 
/// Initializes union class with tag state of UserAlreadyPaired.
/// 
/// About the UserAlreadyPaired tag state: User is already paired.
/// 
/// @param userAlreadyPaired User is already paired.
/// 
/// @return An initialized DBTEAMMemberAddResult instance.
/// 
- (nonnull instancetype)initWithUserAlreadyPaired:(NSString * _Nonnull)userAlreadyPaired;

/// 
/// Initializes union class with tag state of UserMigrationFailed.
/// 
/// About the UserMigrationFailed tag state: User migration has failed.
/// 
/// @param userMigrationFailed User migration has failed.
/// 
/// @return An initialized DBTEAMMemberAddResult instance.
/// 
- (nonnull instancetype)initWithUserMigrationFailed:(NSString * _Nonnull)userMigrationFailed;

/// 
/// Initializes union class with tag state of DuplicateExternalMemberId.
/// 
/// About the DuplicateExternalMemberId tag state: A user with the given
/// external member ID already exists on the team.
/// 
/// @param duplicateExternalMemberId A user with the given external member ID
/// already exists on the team.
/// 
/// @return An initialized DBTEAMMemberAddResult instance.
/// 
- (nonnull instancetype)initWithDuplicateExternalMemberId:(NSString * _Nonnull)duplicateExternalMemberId;

/// 
/// Initializes union class with tag state of UserCreationFailed.
/// 
/// About the UserCreationFailed tag state: User creation has failed.
/// 
/// @param userCreationFailed User creation has failed.
/// 
/// @return An initialized DBTEAMMemberAddResult instance.
/// 
- (nonnull instancetype)initWithUserCreationFailed:(NSString * _Nonnull)userCreationFailed;

#pragma mark - Tag state methods

/// 
/// Retrieves whether the union's current tag state has value Success.
/// 
/// @note Call this method and ensure it returns true before accessing the
/// success property, otherwise a runtime exception will be thrown.
/// 
/// @return Whether the union's current tag state has value Success.
/// 
- (BOOL)isSuccess;

/// 
/// Retrieves whether the union's current tag state has value TeamLicenseLimit.
/// 
/// @note Call this method and ensure it returns true before accessing the
/// teamLicenseLimit property, otherwise a runtime exception will be thrown.
/// 
/// @return Whether the union's current tag state has value TeamLicenseLimit.
/// 
- (BOOL)isTeamLicenseLimit;

/// 
/// Retrieves whether the union's current tag state has value
/// FreeTeamMemberLimitReached.
/// 
/// @note Call this method and ensure it returns true before accessing the
/// freeTeamMemberLimitReached property, otherwise a runtime exception will be
/// thrown.
/// 
/// @return Whether the union's current tag state has value
/// FreeTeamMemberLimitReached.
/// 
- (BOOL)isFreeTeamMemberLimitReached;

/// 
/// Retrieves whether the union's current tag state has value UserAlreadyOnTeam.
/// 
/// @note Call this method and ensure it returns true before accessing the
/// userAlreadyOnTeam property, otherwise a runtime exception will be thrown.
/// 
/// @return Whether the union's current tag state has value UserAlreadyOnTeam.
/// 
- (BOOL)isUserAlreadyOnTeam;

/// 
/// Retrieves whether the union's current tag state has value UserOnAnotherTeam.
/// 
/// @note Call this method and ensure it returns true before accessing the
/// userOnAnotherTeam property, otherwise a runtime exception will be thrown.
/// 
/// @return Whether the union's current tag state has value UserOnAnotherTeam.
/// 
- (BOOL)isUserOnAnotherTeam;

/// 
/// Retrieves whether the union's current tag state has value UserAlreadyPaired.
/// 
/// @note Call this method and ensure it returns true before accessing the
/// userAlreadyPaired property, otherwise a runtime exception will be thrown.
/// 
/// @return Whether the union's current tag state has value UserAlreadyPaired.
/// 
- (BOOL)isUserAlreadyPaired;

/// 
/// Retrieves whether the union's current tag state has value
/// UserMigrationFailed.
/// 
/// @note Call this method and ensure it returns true before accessing the
/// userMigrationFailed property, otherwise a runtime exception will be thrown.
/// 
/// @return Whether the union's current tag state has value UserMigrationFailed.
/// 
- (BOOL)isUserMigrationFailed;

/// 
/// Retrieves whether the union's current tag state has value
/// DuplicateExternalMemberId.
/// 
/// @note Call this method and ensure it returns true before accessing the
/// duplicateExternalMemberId property, otherwise a runtime exception will be
/// thrown.
/// 
/// @return Whether the union's current tag state has value
/// DuplicateExternalMemberId.
/// 
- (BOOL)isDuplicateExternalMemberId;

/// 
/// Retrieves whether the union's current tag state has value
/// UserCreationFailed.
/// 
/// @note Call this method and ensure it returns true before accessing the
/// userCreationFailed property, otherwise a runtime exception will be thrown.
/// 
/// @return Whether the union's current tag state has value UserCreationFailed.
/// 
- (BOOL)isUserCreationFailed;

/// 
/// Retrieves string value of union's current tag state.
/// 
/// @return A human-readable string representing the union's current tag state.
/// 
- (NSString * _Nonnull)tagName;

@end


#pragma mark - Serializer Object

/// 
/// The serialization class for the DBTEAMMemberAddResult union.
/// 
@interface DBTEAMMemberAddResultSerializer : NSObject 

/// 
/// Serializes DBTEAMMemberAddResult instances.
/// 
/// @param instance An instance of the DBTEAMMemberAddResult API object.
/// 
/// @return A json-compatible dictionary representation of the
/// DBTEAMMemberAddResult API object.
/// 
+ (NSDictionary * _Nonnull)serialize:(DBTEAMMemberAddResult * _Nonnull)instance;

/// 
/// Deserializes DBTEAMMemberAddResult instances.
/// 
/// @param dict A json-compatible dictionary representation of the
/// DBTEAMMemberAddResult API object.
/// 
/// @return An instantiation of the DBTEAMMemberAddResult object.
/// 
+ (DBTEAMMemberAddResult * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
