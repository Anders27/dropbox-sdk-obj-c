///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSerializableProtocol.h"
#import <Foundation/Foundation.h>

@class DBTEAMMembersRemoveError;

#pragma mark - API Object

///
/// The MembersRemoveError union.
///
/// This class implements the DBSerializable protocol (serialize and deserialize instance methods),
/// which is required for all Obj-C SDK API route objects.
///
@interface DBTEAMMembersRemoveError : NSObject <DBSerializable>

#pragma mark - Instance fields

/// The DBTEAMMembersRemoveErrorTag enum type represents the possible tag states with which the
/// DBTEAMMembersRemoveError union can exist.
typedef NS_ENUM(NSInteger, DBTEAMMembersRemoveErrorTag) {
  /// No matching user found. The provided team_member_id, email, or external_id does not exist on
  /// this team.
  DBTEAMMembersRemoveErrorUserNotFound,

  /// The user is not a member of the team.
  DBTEAMMembersRemoveErrorUserNotInTeam,

  /// (no description).
  DBTEAMMembersRemoveErrorOther,

  /// The user is the last admin of the team, so it cannot be removed from it.
  DBTEAMMembersRemoveErrorRemoveLastAdmin,

  /// Expected removed user and transfer_dest user to be different
  DBTEAMMembersRemoveErrorRemovedAndTransferDestShouldDiffer,

  /// Expected removed user and transfer_admin user to be different.
  DBTEAMMembersRemoveErrorRemovedAndTransferAdminShouldDiffer,

  /// No matching user found for the argument transfer_dest_id.
  DBTEAMMembersRemoveErrorTransferDestUserNotFound,

  /// The provided transfer_dest_id does not exist on this team.
  DBTEAMMembersRemoveErrorTransferDestUserNotInTeam,

  /// No matching user found for the argument transfer_admin_id.
  DBTEAMMembersRemoveErrorTransferAdminUserNotFound,

  /// The provided transfer_admin_id does not exist on this team.
  DBTEAMMembersRemoveErrorTransferAdminUserNotInTeam,

  /// The transfer_admin_id argument must be provided when file transfer is requested.
  DBTEAMMembersRemoveErrorUnspecifiedTransferAdminId,

  /// Specified transfer_admin user is not a team admin.
  DBTEAMMembersRemoveErrorTransferAdminIsNotAdmin,

  /// Cannot keep account and transfer the data to another user at the same time.
  DBTEAMMembersRemoveErrorCannotKeepAccountAndTransfer,

  /// Cannot keep account and delete the data at the same time.
  DBTEAMMembersRemoveErrorCannotKeepAccountAndDeleteData,

  /// The email address of the user is too long to be disabled.
  DBTEAMMembersRemoveErrorEmailAddressTooLongToBeDisabled,

};

/// Represents the union's current tag state.
@property(nonatomic, readonly) DBTEAMMembersRemoveErrorTag tag;

#pragma mark - Constructors

///
/// Initializes union class with tag state of UserNotFound.
///
/// About the UserNotFound tag state: No matching user found. The provided team_member_id, email, or
/// external_id does not exist on this team.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithUserNotFound;

///
/// Initializes union class with tag state of UserNotInTeam.
///
/// About the UserNotInTeam tag state: The user is not a member of the team.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithUserNotInTeam;

///
/// Initializes union class with tag state of Other.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithOther;

///
/// Initializes union class with tag state of RemoveLastAdmin.
///
/// About the RemoveLastAdmin tag state: The user is the last admin of the team, so it cannot be
/// removed from it.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithRemoveLastAdmin;

///
/// Initializes union class with tag state of RemovedAndTransferDestShouldDiffer.
///
/// About the RemovedAndTransferDestShouldDiffer tag state: Expected removed user and transfer_dest
/// user to be different
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithRemovedAndTransferDestShouldDiffer;

///
/// Initializes union class with tag state of RemovedAndTransferAdminShouldDiffer.
///
/// About the RemovedAndTransferAdminShouldDiffer tag state: Expected removed user and
/// transfer_admin user to be different.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithRemovedAndTransferAdminShouldDiffer;

///
/// Initializes union class with tag state of TransferDestUserNotFound.
///
/// About the TransferDestUserNotFound tag state: No matching user found for the argument
/// transfer_dest_id.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithTransferDestUserNotFound;

///
/// Initializes union class with tag state of TransferDestUserNotInTeam.
///
/// About the TransferDestUserNotInTeam tag state: The provided transfer_dest_id does not exist on
/// this team.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithTransferDestUserNotInTeam;

///
/// Initializes union class with tag state of TransferAdminUserNotFound.
///
/// About the TransferAdminUserNotFound tag state: No matching user found for the argument
/// transfer_admin_id.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithTransferAdminUserNotFound;

///
/// Initializes union class with tag state of TransferAdminUserNotInTeam.
///
/// About the TransferAdminUserNotInTeam tag state: The provided transfer_admin_id does not exist on
/// this team.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithTransferAdminUserNotInTeam;

///
/// Initializes union class with tag state of UnspecifiedTransferAdminId.
///
/// About the UnspecifiedTransferAdminId tag state: The transfer_admin_id argument must be provided
/// when file transfer is requested.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithUnspecifiedTransferAdminId;

///
/// Initializes union class with tag state of TransferAdminIsNotAdmin.
///
/// About the TransferAdminIsNotAdmin tag state: Specified transfer_admin user is not a team admin.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithTransferAdminIsNotAdmin;

///
/// Initializes union class with tag state of CannotKeepAccountAndTransfer.
///
/// About the CannotKeepAccountAndTransfer tag state: Cannot keep account and transfer the data to
/// another user at the same time.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithCannotKeepAccountAndTransfer;

///
/// Initializes union class with tag state of CannotKeepAccountAndDeleteData.
///
/// About the CannotKeepAccountAndDeleteData tag state: Cannot keep account and delete the data at
/// the same time.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithCannotKeepAccountAndDeleteData;

///
/// Initializes union class with tag state of EmailAddressTooLongToBeDisabled.
///
/// About the EmailAddressTooLongToBeDisabled tag state: The email address of the user is too long
/// to be disabled.
///
/// @return An initialized DBTEAMMembersRemoveError instance.
///
- (nonnull instancetype)initWithEmailAddressTooLongToBeDisabled;

#pragma mark - Tag state methods

///
/// Retrieves whether the union's current tag state has value UserNotFound.
///
/// @return Whether the union's current tag state has value UserNotFound.
///
- (BOOL)isUserNotFound;

///
/// Retrieves whether the union's current tag state has value UserNotInTeam.
///
/// @return Whether the union's current tag state has value UserNotInTeam.
///
- (BOOL)isUserNotInTeam;

///
/// Retrieves whether the union's current tag state has value Other.
///
/// @return Whether the union's current tag state has value Other.
///
- (BOOL)isOther;

///
/// Retrieves whether the union's current tag state has value RemoveLastAdmin.
///
/// @return Whether the union's current tag state has value RemoveLastAdmin.
///
- (BOOL)isRemoveLastAdmin;

///
/// Retrieves whether the union's current tag state has value RemovedAndTransferDestShouldDiffer.
///
/// @return Whether the union's current tag state has value RemovedAndTransferDestShouldDiffer.
///
- (BOOL)isRemovedAndTransferDestShouldDiffer;

///
/// Retrieves whether the union's current tag state has value RemovedAndTransferAdminShouldDiffer.
///
/// @return Whether the union's current tag state has value RemovedAndTransferAdminShouldDiffer.
///
- (BOOL)isRemovedAndTransferAdminShouldDiffer;

///
/// Retrieves whether the union's current tag state has value TransferDestUserNotFound.
///
/// @return Whether the union's current tag state has value TransferDestUserNotFound.
///
- (BOOL)isTransferDestUserNotFound;

///
/// Retrieves whether the union's current tag state has value TransferDestUserNotInTeam.
///
/// @return Whether the union's current tag state has value TransferDestUserNotInTeam.
///
- (BOOL)isTransferDestUserNotInTeam;

///
/// Retrieves whether the union's current tag state has value TransferAdminUserNotFound.
///
/// @return Whether the union's current tag state has value TransferAdminUserNotFound.
///
- (BOOL)isTransferAdminUserNotFound;

///
/// Retrieves whether the union's current tag state has value TransferAdminUserNotInTeam.
///
/// @return Whether the union's current tag state has value TransferAdminUserNotInTeam.
///
- (BOOL)isTransferAdminUserNotInTeam;

///
/// Retrieves whether the union's current tag state has value UnspecifiedTransferAdminId.
///
/// @return Whether the union's current tag state has value UnspecifiedTransferAdminId.
///
- (BOOL)isUnspecifiedTransferAdminId;

///
/// Retrieves whether the union's current tag state has value TransferAdminIsNotAdmin.
///
/// @return Whether the union's current tag state has value TransferAdminIsNotAdmin.
///
- (BOOL)isTransferAdminIsNotAdmin;

///
/// Retrieves whether the union's current tag state has value CannotKeepAccountAndTransfer.
///
/// @return Whether the union's current tag state has value CannotKeepAccountAndTransfer.
///
- (BOOL)isCannotKeepAccountAndTransfer;

///
/// Retrieves whether the union's current tag state has value CannotKeepAccountAndDeleteData.
///
/// @return Whether the union's current tag state has value CannotKeepAccountAndDeleteData.
///
- (BOOL)isCannotKeepAccountAndDeleteData;

///
/// Retrieves whether the union's current tag state has value EmailAddressTooLongToBeDisabled.
///
/// @return Whether the union's current tag state has value EmailAddressTooLongToBeDisabled.
///
- (BOOL)isEmailAddressTooLongToBeDisabled;

///
/// Retrieves string value of union's current tag state.
///
/// @return A human-readable string representing the union's current tag state.
///
- (NSString * _Nonnull)tagName;

@end

#pragma mark - Serializer Object

///
/// The serialization class for the DBTEAMMembersRemoveError union.
///
@interface DBTEAMMembersRemoveErrorSerializer : NSObject

///
/// Serializes DBTEAMMembersRemoveError instances.
///
/// @param instance An instance of the DBTEAMMembersRemoveError API object.
///
/// @return A json-compatible dictionary representation of the DBTEAMMembersRemoveError API object.
///
+ (NSDictionary * _Nonnull)serialize:(DBTEAMMembersRemoveError * _Nonnull)instance;

///
/// Deserializes DBTEAMMembersRemoveError instances.
///
/// @param dict A json-compatible dictionary representation of the DBTEAMMembersRemoveError API
/// object.
///
/// @return An instantiation of the DBTEAMMembersRemoveError object.
///
+ (DBTEAMMembersRemoveError * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
