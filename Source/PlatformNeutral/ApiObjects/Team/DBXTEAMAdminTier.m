///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMAdminTier.h"

@implementation DBXTEAMAdminTier 

- (instancetype)initWithTeamAdmin {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMAdminTierTeamAdmin;
    }
    return self;
}

- (instancetype)initWithUserManagementAdmin {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMAdminTierUserManagementAdmin;
    }
    return self;
}

- (instancetype)initWithSupportAdmin {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMAdminTierSupportAdmin;
    }
    return self;
}

- (instancetype)initWithMemberOnly {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMAdminTierMemberOnly;
    }
    return self;
}

- (BOOL)isTeamAdmin {
    return _tag == DBXTEAMAdminTierTeamAdmin;
}

- (BOOL)isUserManagementAdmin {
    return _tag == DBXTEAMAdminTierUserManagementAdmin;
}

- (BOOL)isSupportAdmin {
    return _tag == DBXTEAMAdminTierSupportAdmin;
}

- (BOOL)isMemberOnly {
    return _tag == DBXTEAMAdminTierMemberOnly;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMAdminTierTeamAdmin:
           return @"DBXTEAMAdminTierTeamAdmin";
        case DBXTEAMAdminTierUserManagementAdmin:
           return @"DBXTEAMAdminTierUserManagementAdmin";
        case DBXTEAMAdminTierSupportAdmin:
           return @"DBXTEAMAdminTierSupportAdmin";
        case DBXTEAMAdminTierMemberOnly:
           return @"DBXTEAMAdminTierMemberOnly";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXTEAMAdminTierSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMAdminTierSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMAdminTierSerializer serialize:self] description];
}

@end


@implementation DBXTEAMAdminTierSerializer 

+ (NSDictionary *)serialize:(DBXTEAMAdminTier *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTeamAdmin]) {
        jsonDict[@".tag"] = @"team_admin";
    }
    else if ([valueObj isUserManagementAdmin]) {
        jsonDict[@".tag"] = @"user_management_admin";
    }
    else if ([valueObj isSupportAdmin]) {
        jsonDict[@".tag"] = @"support_admin";
    }
    else if ([valueObj isMemberOnly]) {
        jsonDict[@".tag"] = @"member_only";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMAdminTier *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"team_admin"]) {
        return [[DBXTEAMAdminTier alloc] initWithTeamAdmin];
    }
    else if ([tag isEqualToString:@"user_management_admin"]) {
        return [[DBXTEAMAdminTier alloc] initWithUserManagementAdmin];
    }
    else if ([tag isEqualToString:@"support_admin"]) {
        return [[DBXTEAMAdminTier alloc] initWithSupportAdmin];
    }
    else if ([tag isEqualToString:@"member_only"]) {
        return [[DBXTEAMAdminTier alloc] initWithMemberOnly];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
