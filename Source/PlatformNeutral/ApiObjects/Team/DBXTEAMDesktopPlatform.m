///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMDesktopPlatform.h"

@implementation DBXTEAMDesktopPlatform 

- (instancetype)initWithWindows {
    self = [super init];
    if (self) {
        _tag = DBXTEAMDesktopPlatformWindows;
    }
    return self;
}

- (instancetype)initWithMac {
    self = [super init];
    if (self) {
        _tag = DBXTEAMDesktopPlatformMac;
    }
    return self;
}

- (instancetype)initWithLinux {
    self = [super init];
    if (self) {
        _tag = DBXTEAMDesktopPlatformLinux;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXTEAMDesktopPlatformOther;
    }
    return self;
}

- (BOOL)isWindows {
    return _tag == DBXTEAMDesktopPlatformWindows;
}

- (BOOL)isMac {
    return _tag == DBXTEAMDesktopPlatformMac;
}

- (BOOL)isLinux {
    return _tag == DBXTEAMDesktopPlatformLinux;
}

- (BOOL)isOther {
    return _tag == DBXTEAMDesktopPlatformOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMDesktopPlatformWindows:
           return @"DBXTEAMDesktopPlatformWindows";
        case DBXTEAMDesktopPlatformMac:
           return @"DBXTEAMDesktopPlatformMac";
        case DBXTEAMDesktopPlatformLinux:
           return @"DBXTEAMDesktopPlatformLinux";
        case DBXTEAMDesktopPlatformOther:
           return @"DBXTEAMDesktopPlatformOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXTEAMDesktopPlatformSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMDesktopPlatformSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMDesktopPlatformSerializer serialize:self] description];
}

@end


@implementation DBXTEAMDesktopPlatformSerializer 

+ (NSDictionary *)serialize:(DBXTEAMDesktopPlatform *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isWindows]) {
        jsonDict[@".tag"] = @"windows";
    }
    else if ([valueObj isMac]) {
        jsonDict[@".tag"] = @"mac";
    }
    else if ([valueObj isLinux]) {
        jsonDict[@".tag"] = @"linux";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMDesktopPlatform *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"windows"]) {
        return [[DBXTEAMDesktopPlatform alloc] initWithWindows];
    }
    else if ([tag isEqualToString:@"mac"]) {
        return [[DBXTEAMDesktopPlatform alloc] initWithMac];
    }
    else if ([tag isEqualToString:@"linux"]) {
        return [[DBXTEAMDesktopPlatform alloc] initWithLinux];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXTEAMDesktopPlatform alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
