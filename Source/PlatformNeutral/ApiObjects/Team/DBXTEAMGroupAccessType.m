///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMGroupAccessType.h"

@implementation DBXTEAMGroupAccessType 

- (instancetype)initWithMember {
    self = [super init];
    if (self) {
        _tag = DBXTEAMGroupAccessTypeMember;
    }
    return self;
}

- (instancetype)initWithOwner {
    self = [super init];
    if (self) {
        _tag = DBXTEAMGroupAccessTypeOwner;
    }
    return self;
}

- (BOOL)isMember {
    return _tag == DBXTEAMGroupAccessTypeMember;
}

- (BOOL)isOwner {
    return _tag == DBXTEAMGroupAccessTypeOwner;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMGroupAccessTypeMember:
           return @"DBXTEAMGroupAccessTypeMember";
        case DBXTEAMGroupAccessTypeOwner:
           return @"DBXTEAMGroupAccessTypeOwner";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXTEAMGroupAccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMGroupAccessTypeSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMGroupAccessTypeSerializer serialize:self] description];
}

@end


@implementation DBXTEAMGroupAccessTypeSerializer 

+ (NSDictionary *)serialize:(DBXTEAMGroupAccessType *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isMember]) {
        jsonDict[@".tag"] = @"member";
    }
    else if ([valueObj isOwner]) {
        jsonDict[@".tag"] = @"owner";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMGroupAccessType *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"member"]) {
        return [[DBXTEAMGroupAccessType alloc] initWithMember];
    }
    else if ([tag isEqualToString:@"owner"]) {
        return [[DBXTEAMGroupAccessType alloc] initWithOwner];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
