///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMGroupCreateError.h"

@implementation DBXTEAMGroupCreateError 

- (instancetype)initWithGroupNameAlreadyUsed {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupCreateErrorGroupNameAlreadyUsed;
    }
    return self;
}

- (instancetype)initWithGroupNameInvalid {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupCreateErrorGroupNameInvalid;
    }
    return self;
}

- (instancetype)initWithExternalIdAlreadyInUse {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupCreateErrorExternalIdAlreadyInUse;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupCreateErrorOther;
    }
    return self;
}

- (BOOL)isGroupNameAlreadyUsed {
    return _tag == DBXTEAMGroupCreateErrorGroupNameAlreadyUsed;
}

- (BOOL)isGroupNameInvalid {
    return _tag == DBXTEAMGroupCreateErrorGroupNameInvalid;
}

- (BOOL)isExternalIdAlreadyInUse {
    return _tag == DBXTEAMGroupCreateErrorExternalIdAlreadyInUse;
}

- (BOOL)isOther {
    return _tag == DBXTEAMGroupCreateErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMGroupCreateErrorGroupNameAlreadyUsed:
           return @"DBXTEAMGroupCreateErrorGroupNameAlreadyUsed";
        case DBXTEAMGroupCreateErrorGroupNameInvalid:
           return @"DBXTEAMGroupCreateErrorGroupNameInvalid";
        case DBXTEAMGroupCreateErrorExternalIdAlreadyInUse:
           return @"DBXTEAMGroupCreateErrorExternalIdAlreadyInUse";
        case DBXTEAMGroupCreateErrorOther:
           return @"DBXTEAMGroupCreateErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXTEAMGroupCreateErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMGroupCreateErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMGroupCreateErrorSerializer serialize:self] description];
}

@end


@implementation DBXTEAMGroupCreateErrorSerializer 

+ (NSDictionary *)serialize:(DBXTEAMGroupCreateError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isGroupNameAlreadyUsed]) {
        jsonDict[@".tag"] = @"group_name_already_used";
    }
    else if ([valueObj isGroupNameInvalid]) {
        jsonDict[@".tag"] = @"group_name_invalid";
    }
    else if ([valueObj isExternalIdAlreadyInUse]) {
        jsonDict[@".tag"] = @"external_id_already_in_use";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMGroupCreateError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"group_name_already_used"]) {
        return [[DBXTEAMGroupCreateError alloc] initWithGroupNameAlreadyUsed];
    }
    else if ([tag isEqualToString:@"group_name_invalid"]) {
        return [[DBXTEAMGroupCreateError alloc] initWithGroupNameInvalid];
    }
    else if ([tag isEqualToString:@"external_id_already_in_use"]) {
        return [[DBXTEAMGroupCreateError alloc] initWithExternalIdAlreadyInUse];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXTEAMGroupCreateError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
