///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMGroupMemberSelectorError.h"
#import "DBXTEAMGroupMemberSetAccessTypeError.h"

@implementation DBXTEAMGroupMemberSetAccessTypeError 

- (instancetype)initWithGroupNotFound {
    self = [super init];
    if (self) {
        _tag = DBXTEAMGroupMemberSetAccessTypeErrorGroupNotFound;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXTEAMGroupMemberSetAccessTypeErrorOther;
    }
    return self;
}

- (instancetype)initWithMemberNotInGroup {
    self = [super init];
    if (self) {
        _tag = DBXTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup;
    }
    return self;
}

- (instancetype)initWithUserCannotBeManagerOfCompanyManagedGroup {
    self = [super init];
    if (self) {
        _tag = DBXTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup;
    }
    return self;
}

- (BOOL)isGroupNotFound {
    return _tag == DBXTEAMGroupMemberSetAccessTypeErrorGroupNotFound;
}

- (BOOL)isOther {
    return _tag == DBXTEAMGroupMemberSetAccessTypeErrorOther;
}

- (BOOL)isMemberNotInGroup {
    return _tag == DBXTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup;
}

- (BOOL)isUserCannotBeManagerOfCompanyManagedGroup {
    return _tag == DBXTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMGroupMemberSetAccessTypeErrorGroupNotFound:
           return @"DBXTEAMGroupMemberSetAccessTypeErrorGroupNotFound";
        case DBXTEAMGroupMemberSetAccessTypeErrorOther:
           return @"DBXTEAMGroupMemberSetAccessTypeErrorOther";
        case DBXTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup:
           return @"DBXTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup";
        case DBXTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup:
           return @"DBXTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXTEAMGroupMemberSetAccessTypeErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMGroupMemberSetAccessTypeErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMGroupMemberSetAccessTypeErrorSerializer serialize:self] description];
}

@end


@implementation DBXTEAMGroupMemberSetAccessTypeErrorSerializer 

+ (NSDictionary *)serialize:(DBXTEAMGroupMemberSetAccessTypeError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isGroupNotFound]) {
        jsonDict[@".tag"] = @"group_not_found";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isMemberNotInGroup]) {
        jsonDict[@".tag"] = @"member_not_in_group";
    }
    else if ([valueObj isUserCannotBeManagerOfCompanyManagedGroup]) {
        jsonDict[@".tag"] = @"user_cannot_be_manager_of_company_managed_group";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMGroupMemberSetAccessTypeError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"group_not_found"]) {
        return [[DBXTEAMGroupMemberSetAccessTypeError alloc] initWithGroupNotFound];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXTEAMGroupMemberSetAccessTypeError alloc] initWithOther];
    }
    else if ([tag isEqualToString:@"member_not_in_group"]) {
        return [[DBXTEAMGroupMemberSetAccessTypeError alloc] initWithMemberNotInGroup];
    }
    else if ([tag isEqualToString:@"user_cannot_be_manager_of_company_managed_group"]) {
        return [[DBXTEAMGroupMemberSetAccessTypeError alloc] initWithUserCannotBeManagerOfCompanyManagedGroup];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
