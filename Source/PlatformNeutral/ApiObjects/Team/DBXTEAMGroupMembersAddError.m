///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMGroupMembersAddError.h"
#import "DBXTEAMGroupSelectorError.h"

@implementation DBXTEAMGroupMembersAddError 

- (instancetype)initWithGroupNotFound {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupMembersAddErrorGroupNotFound;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupMembersAddErrorOther;
    }
    return self;
}

- (instancetype)initWithDuplicateUser {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupMembersAddErrorDuplicateUser;
    }
    return self;
}

- (instancetype)initWithGroupNotInTeam {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupMembersAddErrorGroupNotInTeam;
    }
    return self;
}

- (instancetype)initWithMembersNotInTeam:(NSArray<NSString *> *)membersNotInTeam {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupMembersAddErrorMembersNotInTeam;
        _membersNotInTeam = membersNotInTeam;
    }
    return self;
}

- (instancetype)initWithUsersNotFound:(NSArray<NSString *> *)usersNotFound {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupMembersAddErrorUsersNotFound;
        _usersNotFound = usersNotFound;
    }
    return self;
}

- (instancetype)initWithUserMustBeActiveToBeOwner {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupMembersAddErrorUserMustBeActiveToBeOwner;
    }
    return self;
}

- (instancetype)initWithUserCannotBeManagerOfCompanyManagedGroup:(NSArray<NSString *> *)userCannotBeManagerOfCompanyManagedGroup {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup;
        _userCannotBeManagerOfCompanyManagedGroup = userCannotBeManagerOfCompanyManagedGroup;
    }
    return self;
}

- (BOOL)isGroupNotFound {
    return _tag == DBXTEAMGroupMembersAddErrorGroupNotFound;
}

- (BOOL)isOther {
    return _tag == DBXTEAMGroupMembersAddErrorOther;
}

- (BOOL)isDuplicateUser {
    return _tag == DBXTEAMGroupMembersAddErrorDuplicateUser;
}

- (BOOL)isGroupNotInTeam {
    return _tag == DBXTEAMGroupMembersAddErrorGroupNotInTeam;
}

- (BOOL)isMembersNotInTeam {
    return _tag == DBXTEAMGroupMembersAddErrorMembersNotInTeam;
}

- (BOOL)isUsersNotFound {
    return _tag == DBXTEAMGroupMembersAddErrorUsersNotFound;
}

- (BOOL)isUserMustBeActiveToBeOwner {
    return _tag == DBXTEAMGroupMembersAddErrorUserMustBeActiveToBeOwner;
}

- (BOOL)isUserCannotBeManagerOfCompanyManagedGroup {
    return _tag == DBXTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMGroupMembersAddErrorGroupNotFound:
           return @"DBXTEAMGroupMembersAddErrorGroupNotFound";
        case DBXTEAMGroupMembersAddErrorOther:
           return @"DBXTEAMGroupMembersAddErrorOther";
        case DBXTEAMGroupMembersAddErrorDuplicateUser:
           return @"DBXTEAMGroupMembersAddErrorDuplicateUser";
        case DBXTEAMGroupMembersAddErrorGroupNotInTeam:
           return @"DBXTEAMGroupMembersAddErrorGroupNotInTeam";
        case DBXTEAMGroupMembersAddErrorMembersNotInTeam:
           return @"DBXTEAMGroupMembersAddErrorMembersNotInTeam";
        case DBXTEAMGroupMembersAddErrorUsersNotFound:
           return @"DBXTEAMGroupMembersAddErrorUsersNotFound";
        case DBXTEAMGroupMembersAddErrorUserMustBeActiveToBeOwner:
           return @"DBXTEAMGroupMembersAddErrorUserMustBeActiveToBeOwner";
        case DBXTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup:
           return @"DBXTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSArray<NSString *> *)membersNotInTeam {
    if (_tag != DBXTEAMGroupMembersAddErrorMembersNotInTeam) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMGroupMembersAddErrorMembersNotInTeam`, but was %@.", [self getTagName]];
    }
    return _membersNotInTeam;
}

- (NSArray<NSString *> *)usersNotFound {
    if (_tag != DBXTEAMGroupMembersAddErrorUsersNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMGroupMembersAddErrorUsersNotFound`, but was %@.", [self getTagName]];
    }
    return _usersNotFound;
}

- (NSArray<NSString *> *)userCannotBeManagerOfCompanyManagedGroup {
    if (_tag != DBXTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup`, but was %@.", [self getTagName]];
    }
    return _userCannotBeManagerOfCompanyManagedGroup;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXTEAMGroupMembersAddErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMGroupMembersAddErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMGroupMembersAddErrorSerializer serialize:self] description];
}

@end


@implementation DBXTEAMGroupMembersAddErrorSerializer 

+ (NSDictionary *)serialize:(DBXTEAMGroupMembersAddError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isGroupNotFound]) {
        jsonDict[@".tag"] = @"group_not_found";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isDuplicateUser]) {
        jsonDict[@".tag"] = @"duplicate_user";
    }
    else if ([valueObj isGroupNotInTeam]) {
        jsonDict[@".tag"] = @"group_not_in_team";
    }
    else if ([valueObj isMembersNotInTeam]) {
        jsonDict[@"members_not_in_team"] = [DBXArraySerializer serialize:valueObj.membersNotInTeam withBlock:^id(id elem) { return elem; }];
        jsonDict[@".tag"] = @"members_not_in_team";
    }
    else if ([valueObj isUsersNotFound]) {
        jsonDict[@"users_not_found"] = [DBXArraySerializer serialize:valueObj.usersNotFound withBlock:^id(id elem) { return elem; }];
        jsonDict[@".tag"] = @"users_not_found";
    }
    else if ([valueObj isUserMustBeActiveToBeOwner]) {
        jsonDict[@".tag"] = @"user_must_be_active_to_be_owner";
    }
    else if ([valueObj isUserCannotBeManagerOfCompanyManagedGroup]) {
        jsonDict[@"user_cannot_be_manager_of_company_managed_group"] = [DBXArraySerializer serialize:valueObj.userCannotBeManagerOfCompanyManagedGroup withBlock:^id(id elem) { return elem; }];
        jsonDict[@".tag"] = @"user_cannot_be_manager_of_company_managed_group";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMGroupMembersAddError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"group_not_found"]) {
        return [[DBXTEAMGroupMembersAddError alloc] initWithGroupNotFound];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXTEAMGroupMembersAddError alloc] initWithOther];
    }
    else if ([tag isEqualToString:@"duplicate_user"]) {
        return [[DBXTEAMGroupMembersAddError alloc] initWithDuplicateUser];
    }
    else if ([tag isEqualToString:@"group_not_in_team"]) {
        return [[DBXTEAMGroupMembersAddError alloc] initWithGroupNotInTeam];
    }
    else if ([tag isEqualToString:@"members_not_in_team"]) {
        NSArray<NSString *> *membersNotInTeam = [DBXArraySerializer deserialize:valueDict[@"members_not_in_team"] withBlock:^id(id elem) { return elem; }];
        return [[DBXTEAMGroupMembersAddError alloc] initWithMembersNotInTeam:membersNotInTeam];
    }
    else if ([tag isEqualToString:@"users_not_found"]) {
        NSArray<NSString *> *usersNotFound = [DBXArraySerializer deserialize:valueDict[@"users_not_found"] withBlock:^id(id elem) { return elem; }];
        return [[DBXTEAMGroupMembersAddError alloc] initWithUsersNotFound:usersNotFound];
    }
    else if ([tag isEqualToString:@"user_must_be_active_to_be_owner"]) {
        return [[DBXTEAMGroupMembersAddError alloc] initWithUserMustBeActiveToBeOwner];
    }
    else if ([tag isEqualToString:@"user_cannot_be_manager_of_company_managed_group"]) {
        NSArray<NSString *> *userCannotBeManagerOfCompanyManagedGroup = [DBXArraySerializer deserialize:valueDict[@"user_cannot_be_manager_of_company_managed_group"] withBlock:^id(id elem) { return elem; }];
        return [[DBXTEAMGroupMembersAddError alloc] initWithUserCannotBeManagerOfCompanyManagedGroup:userCannotBeManagerOfCompanyManagedGroup];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
