///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMGroupSelectorError.h"

@implementation DBXTEAMGroupSelectorError 

- (instancetype)initWithGroupNotFound {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupSelectorErrorGroupNotFound;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMGroupSelectorErrorOther;
    }
    return self;
}

- (BOOL)isGroupNotFound {
    return _tag == DBXTEAMGroupSelectorErrorGroupNotFound;
}

- (BOOL)isOther {
    return _tag == DBXTEAMGroupSelectorErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMGroupSelectorErrorGroupNotFound:
           return @"DBXTEAMGroupSelectorErrorGroupNotFound";
        case DBXTEAMGroupSelectorErrorOther:
           return @"DBXTEAMGroupSelectorErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXTEAMGroupSelectorErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMGroupSelectorErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMGroupSelectorErrorSerializer serialize:self] description];
}

@end


@implementation DBXTEAMGroupSelectorErrorSerializer 

+ (NSDictionary *)serialize:(DBXTEAMGroupSelectorError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isGroupNotFound]) {
        jsonDict[@".tag"] = @"group_not_found";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMGroupSelectorError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"group_not_found"]) {
        return [[DBXTEAMGroupSelectorError alloc] initWithGroupNotFound];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXTEAMGroupSelectorError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
