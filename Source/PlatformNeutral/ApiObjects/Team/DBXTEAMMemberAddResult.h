///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>
#import "DBXSerializableProtocol.h"

@class DBXTEAMMemberAddResult;
@class DBXTEAMTeamMemberInfo;

/// 
/// The MemberAddResult union.
/// 
/// Describes the result of attempting to add a single user to the team.
/// 'success' is the only value indicating that a user was indeed added to the
/// team - the other values explain the type of failure that occurred, and
/// include the email of the user for which the operation has failed.
/// 
/// This class implements the `DBXSerializable` protocol (`serialize` and
/// `deserialize` instance methods), which is required for all Obj-C SDK API
/// route objects.
/// 
@interface DBXTEAMMemberAddResult : NSObject <DBXSerializable> 

/// The `DBXTEAMMemberAddResultTag` enum type represents the possible tag states
/// with which the `DBXTEAMMemberAddResult` union can exist.
typedef NS_ENUM(NSInteger, DBXTEAMMemberAddResultTag) {
    /// Describes a user that was successfully added to the team.
    DBXTEAMMemberAddResultSuccess,

    /// Team is already full. The organization has no available licenses.
    DBXTEAMMemberAddResultTeamLicenseLimit,

    /// Team is already full. The free team member limit has been reached.
    DBXTEAMMemberAddResultFreeTeamMemberLimitReached,

    /// User is already on this team. The provided email address is associated
    /// with a user who is already a member of or invited to the team.
    DBXTEAMMemberAddResultUserAlreadyOnTeam,

    /// User is already on another team. The provided email address is
    /// associated with a user that is already a member or invited to another
    /// team.
    DBXTEAMMemberAddResultUserOnAnotherTeam,

    /// User is already paired.
    DBXTEAMMemberAddResultUserAlreadyPaired,

    /// User migration has failed.
    DBXTEAMMemberAddResultUserMigrationFailed,

    /// A user with the given external member ID already exists on the team.
    DBXTEAMMemberAddResultDuplicateExternalMemberId,

    /// User creation has failed.
    DBXTEAMMemberAddResultUserCreationFailed,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBXTEAMMemberAddResultTag tag;

/// Describes a user that was successfully added to the team.
@property (nonatomic, readonly) DBXTEAMTeamMemberInfo * _Nonnull success;

/// Team is already full. The organization has no available licenses.
@property (nonatomic, readonly, copy) NSString * _Nonnull teamLicenseLimit;

/// Team is already full. The free team member limit has been reached.
@property (nonatomic, readonly, copy) NSString * _Nonnull freeTeamMemberLimitReached;

/// User is already on this team. The provided email address is associated with
/// a user who is already a member of or invited to the team.
@property (nonatomic, readonly, copy) NSString * _Nonnull userAlreadyOnTeam;

/// User is already on another team. The provided email address is associated
/// with a user that is already a member or invited to another team.
@property (nonatomic, readonly, copy) NSString * _Nonnull userOnAnotherTeam;

/// User is already paired.
@property (nonatomic, readonly, copy) NSString * _Nonnull userAlreadyPaired;

/// User migration has failed.
@property (nonatomic, readonly, copy) NSString * _Nonnull userMigrationFailed;

/// A user with the given external member ID already exists on the team.
@property (nonatomic, readonly, copy) NSString * _Nonnull duplicateExternalMemberId;

/// User creation has failed.
@property (nonatomic, readonly, copy) NSString * _Nonnull userCreationFailed;

/// 
/// Initializes union class with tag state of `Success`.
/// 
/// About the `Success` tag state: Describes a user that was successfully added
/// to the team.
/// 
/// - parameter success: Describes a user that was successfully added to the
/// team.
/// 
/// - returns: An initialized `DBXTEAMMemberAddResult` instance.
/// 
- (nonnull instancetype)initWithSuccess:(DBXTEAMTeamMemberInfo * _Nonnull)success;

/// 
/// Initializes union class with tag state of `TeamLicenseLimit`.
/// 
/// About the `TeamLicenseLimit` tag state: Team is already full. The
/// organization has no available licenses.
/// 
/// - parameter teamLicenseLimit: Team is already full. The organization has no
/// available licenses.
/// 
/// - returns: An initialized `DBXTEAMMemberAddResult` instance.
/// 
- (nonnull instancetype)initWithTeamLicenseLimit:(NSString * _Nonnull)teamLicenseLimit;

/// 
/// Initializes union class with tag state of `FreeTeamMemberLimitReached`.
/// 
/// About the `FreeTeamMemberLimitReached` tag state: Team is already full. The
/// free team member limit has been reached.
/// 
/// - parameter freeTeamMemberLimitReached: Team is already full. The free team
/// member limit has been reached.
/// 
/// - returns: An initialized `DBXTEAMMemberAddResult` instance.
/// 
- (nonnull instancetype)initWithFreeTeamMemberLimitReached:(NSString * _Nonnull)freeTeamMemberLimitReached;

/// 
/// Initializes union class with tag state of `UserAlreadyOnTeam`.
/// 
/// About the `UserAlreadyOnTeam` tag state: User is already on this team. The
/// provided email address is associated with a user who is already a member of
/// or invited to the team.
/// 
/// - parameter userAlreadyOnTeam: User is already on this team. The provided
/// email address is associated with a user who is already a member of or
/// invited to the team.
/// 
/// - returns: An initialized `DBXTEAMMemberAddResult` instance.
/// 
- (nonnull instancetype)initWithUserAlreadyOnTeam:(NSString * _Nonnull)userAlreadyOnTeam;

/// 
/// Initializes union class with tag state of `UserOnAnotherTeam`.
/// 
/// About the `UserOnAnotherTeam` tag state: User is already on another team.
/// The provided email address is associated with a user that is already a
/// member or invited to another team.
/// 
/// - parameter userOnAnotherTeam: User is already on another team. The provided
/// email address is associated with a user that is already a member or invited
/// to another team.
/// 
/// - returns: An initialized `DBXTEAMMemberAddResult` instance.
/// 
- (nonnull instancetype)initWithUserOnAnotherTeam:(NSString * _Nonnull)userOnAnotherTeam;

/// 
/// Initializes union class with tag state of `UserAlreadyPaired`.
/// 
/// About the `UserAlreadyPaired` tag state: User is already paired.
/// 
/// - parameter userAlreadyPaired: User is already paired.
/// 
/// - returns: An initialized `DBXTEAMMemberAddResult` instance.
/// 
- (nonnull instancetype)initWithUserAlreadyPaired:(NSString * _Nonnull)userAlreadyPaired;

/// 
/// Initializes union class with tag state of `UserMigrationFailed`.
/// 
/// About the `UserMigrationFailed` tag state: User migration has failed.
/// 
/// - parameter userMigrationFailed: User migration has failed.
/// 
/// - returns: An initialized `DBXTEAMMemberAddResult` instance.
/// 
- (nonnull instancetype)initWithUserMigrationFailed:(NSString * _Nonnull)userMigrationFailed;

/// 
/// Initializes union class with tag state of `DuplicateExternalMemberId`.
/// 
/// About the `DuplicateExternalMemberId` tag state: A user with the given
/// external member ID already exists on the team.
/// 
/// - parameter duplicateExternalMemberId: A user with the given external member
/// ID already exists on the team.
/// 
/// - returns: An initialized `DBXTEAMMemberAddResult` instance.
/// 
- (nonnull instancetype)initWithDuplicateExternalMemberId:(NSString * _Nonnull)duplicateExternalMemberId;

/// 
/// Initializes union class with tag state of `UserCreationFailed`.
/// 
/// About the `UserCreationFailed` tag state: User creation has failed.
/// 
/// - parameter userCreationFailed: User creation has failed.
/// 
/// - returns: An initialized `DBXTEAMMemberAddResult` instance.
/// 
- (nonnull instancetype)initWithUserCreationFailed:(NSString * _Nonnull)userCreationFailed;

/// 
/// Retrieves whether the union's current tag state has value `Success`.
/// 
/// - returns: Whether the union's current tag state has value `Success`.
/// 
- (BOOL)isSuccess;

/// 
/// Retrieves whether the union's current tag state has value
/// `TeamLicenseLimit`.
/// 
/// - returns: Whether the union's current tag state has value
/// `TeamLicenseLimit`.
/// 
- (BOOL)isTeamLicenseLimit;

/// 
/// Retrieves whether the union's current tag state has value
/// `FreeTeamMemberLimitReached`.
/// 
/// - returns: Whether the union's current tag state has value
/// `FreeTeamMemberLimitReached`.
/// 
- (BOOL)isFreeTeamMemberLimitReached;

/// 
/// Retrieves whether the union's current tag state has value
/// `UserAlreadyOnTeam`.
/// 
/// - returns: Whether the union's current tag state has value
/// `UserAlreadyOnTeam`.
/// 
- (BOOL)isUserAlreadyOnTeam;

/// 
/// Retrieves whether the union's current tag state has value
/// `UserOnAnotherTeam`.
/// 
/// - returns: Whether the union's current tag state has value
/// `UserOnAnotherTeam`.
/// 
- (BOOL)isUserOnAnotherTeam;

/// 
/// Retrieves whether the union's current tag state has value
/// `UserAlreadyPaired`.
/// 
/// - returns: Whether the union's current tag state has value
/// `UserAlreadyPaired`.
/// 
- (BOOL)isUserAlreadyPaired;

/// 
/// Retrieves whether the union's current tag state has value
/// `UserMigrationFailed`.
/// 
/// - returns: Whether the union's current tag state has value
/// `UserMigrationFailed`.
/// 
- (BOOL)isUserMigrationFailed;

/// 
/// Retrieves whether the union's current tag state has value
/// `DuplicateExternalMemberId`.
/// 
/// - returns: Whether the union's current tag state has value
/// `DuplicateExternalMemberId`.
/// 
- (BOOL)isDuplicateExternalMemberId;

/// 
/// Retrieves whether the union's current tag state has value
/// `UserCreationFailed`.
/// 
/// - returns: Whether the union's current tag state has value
/// `UserCreationFailed`.
/// 
- (BOOL)isUserCreationFailed;

/// 
/// Retrieves string value of union's current tag state.
/// 
/// - returns: A human-readable string representing the union's current tag
/// state.
/// 
- (NSString * _Nonnull)getTagName;

@end


/// 
/// The serialization class for the `DBXTEAMMemberAddResult` union.
/// 
@interface DBXTEAMMemberAddResultSerializer : NSObject 

/// 
/// Serializes `DBXTEAMMemberAddResult` instances.
/// 
///  - parameter instance: An instance of the `DBXTEAMMemberAddResult` API
/// object.
/// 
///  - returns: A json-compatible dictionary representation of the
/// `DBXTEAMMemberAddResult` API object.
/// 
+ (NSDictionary * _Nonnull)serialize:(DBXTEAMMemberAddResult * _Nonnull)instance;

/// 
/// Deserializes `DBXTEAMMemberAddResult` instances.
/// 
///  - parameter dict: A json-compatible dictionary representation of the
/// `DBXTEAMMemberAddResult` API object.
/// 
///  - returns: An instantiation of the `DBXTEAMMemberAddResult` object.
/// 
+ (DBXTEAMMemberAddResult * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
