///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMMemberAddResult.h"
#import "DBXTEAMTeamMemberInfo.h"

@implementation DBXTEAMMemberAddResult 

@synthesize success = _success;
@synthesize teamLicenseLimit = _teamLicenseLimit;
@synthesize freeTeamMemberLimitReached = _freeTeamMemberLimitReached;
@synthesize userAlreadyOnTeam = _userAlreadyOnTeam;
@synthesize userOnAnotherTeam = _userOnAnotherTeam;
@synthesize userAlreadyPaired = _userAlreadyPaired;
@synthesize userMigrationFailed = _userMigrationFailed;
@synthesize duplicateExternalMemberId = _duplicateExternalMemberId;
@synthesize userCreationFailed = _userCreationFailed;

- (instancetype)initWithSuccess:(DBXTEAMTeamMemberInfo *)success {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMemberAddResultSuccess;
        _success = success;
    }
    return self;
}

- (instancetype)initWithTeamLicenseLimit:(NSString *)teamLicenseLimit {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMemberAddResultTeamLicenseLimit;
        _teamLicenseLimit = teamLicenseLimit;
    }
    return self;
}

- (instancetype)initWithFreeTeamMemberLimitReached:(NSString *)freeTeamMemberLimitReached {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMemberAddResultFreeTeamMemberLimitReached;
        _freeTeamMemberLimitReached = freeTeamMemberLimitReached;
    }
    return self;
}

- (instancetype)initWithUserAlreadyOnTeam:(NSString *)userAlreadyOnTeam {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMemberAddResultUserAlreadyOnTeam;
        _userAlreadyOnTeam = userAlreadyOnTeam;
    }
    return self;
}

- (instancetype)initWithUserOnAnotherTeam:(NSString *)userOnAnotherTeam {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMemberAddResultUserOnAnotherTeam;
        _userOnAnotherTeam = userOnAnotherTeam;
    }
    return self;
}

- (instancetype)initWithUserAlreadyPaired:(NSString *)userAlreadyPaired {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMemberAddResultUserAlreadyPaired;
        _userAlreadyPaired = userAlreadyPaired;
    }
    return self;
}

- (instancetype)initWithUserMigrationFailed:(NSString *)userMigrationFailed {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMemberAddResultUserMigrationFailed;
        _userMigrationFailed = userMigrationFailed;
    }
    return self;
}

- (instancetype)initWithDuplicateExternalMemberId:(NSString *)duplicateExternalMemberId {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMemberAddResultDuplicateExternalMemberId;
        _duplicateExternalMemberId = duplicateExternalMemberId;
    }
    return self;
}

- (instancetype)initWithUserCreationFailed:(NSString *)userCreationFailed {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMemberAddResultUserCreationFailed;
        _userCreationFailed = userCreationFailed;
    }
    return self;
}

- (BOOL)isSuccess {
    return _tag == DBXTEAMMemberAddResultSuccess;
}

- (BOOL)isTeamLicenseLimit {
    return _tag == DBXTEAMMemberAddResultTeamLicenseLimit;
}

- (BOOL)isFreeTeamMemberLimitReached {
    return _tag == DBXTEAMMemberAddResultFreeTeamMemberLimitReached;
}

- (BOOL)isUserAlreadyOnTeam {
    return _tag == DBXTEAMMemberAddResultUserAlreadyOnTeam;
}

- (BOOL)isUserOnAnotherTeam {
    return _tag == DBXTEAMMemberAddResultUserOnAnotherTeam;
}

- (BOOL)isUserAlreadyPaired {
    return _tag == DBXTEAMMemberAddResultUserAlreadyPaired;
}

- (BOOL)isUserMigrationFailed {
    return _tag == DBXTEAMMemberAddResultUserMigrationFailed;
}

- (BOOL)isDuplicateExternalMemberId {
    return _tag == DBXTEAMMemberAddResultDuplicateExternalMemberId;
}

- (BOOL)isUserCreationFailed {
    return _tag == DBXTEAMMemberAddResultUserCreationFailed;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMMemberAddResultSuccess:
           return @"DBXTEAMMemberAddResultSuccess";
        case DBXTEAMMemberAddResultTeamLicenseLimit:
           return @"DBXTEAMMemberAddResultTeamLicenseLimit";
        case DBXTEAMMemberAddResultFreeTeamMemberLimitReached:
           return @"DBXTEAMMemberAddResultFreeTeamMemberLimitReached";
        case DBXTEAMMemberAddResultUserAlreadyOnTeam:
           return @"DBXTEAMMemberAddResultUserAlreadyOnTeam";
        case DBXTEAMMemberAddResultUserOnAnotherTeam:
           return @"DBXTEAMMemberAddResultUserOnAnotherTeam";
        case DBXTEAMMemberAddResultUserAlreadyPaired:
           return @"DBXTEAMMemberAddResultUserAlreadyPaired";
        case DBXTEAMMemberAddResultUserMigrationFailed:
           return @"DBXTEAMMemberAddResultUserMigrationFailed";
        case DBXTEAMMemberAddResultDuplicateExternalMemberId:
           return @"DBXTEAMMemberAddResultDuplicateExternalMemberId";
        case DBXTEAMMemberAddResultUserCreationFailed:
           return @"DBXTEAMMemberAddResultUserCreationFailed";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXTEAMTeamMemberInfo *)success {
    if (_tag != DBXTEAMMemberAddResultSuccess) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMemberAddResultSuccess`, but was %@.", [self getTagName]];
    }
    return _success;
}

- (NSString *)teamLicenseLimit {
    if (_tag != DBXTEAMMemberAddResultTeamLicenseLimit) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMemberAddResultTeamLicenseLimit`, but was %@.", [self getTagName]];
    }
    return _teamLicenseLimit;
}

- (NSString *)freeTeamMemberLimitReached {
    if (_tag != DBXTEAMMemberAddResultFreeTeamMemberLimitReached) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMemberAddResultFreeTeamMemberLimitReached`, but was %@.", [self getTagName]];
    }
    return _freeTeamMemberLimitReached;
}

- (NSString *)userAlreadyOnTeam {
    if (_tag != DBXTEAMMemberAddResultUserAlreadyOnTeam) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMemberAddResultUserAlreadyOnTeam`, but was %@.", [self getTagName]];
    }
    return _userAlreadyOnTeam;
}

- (NSString *)userOnAnotherTeam {
    if (_tag != DBXTEAMMemberAddResultUserOnAnotherTeam) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMemberAddResultUserOnAnotherTeam`, but was %@.", [self getTagName]];
    }
    return _userOnAnotherTeam;
}

- (NSString *)userAlreadyPaired {
    if (_tag != DBXTEAMMemberAddResultUserAlreadyPaired) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMemberAddResultUserAlreadyPaired`, but was %@.", [self getTagName]];
    }
    return _userAlreadyPaired;
}

- (NSString *)userMigrationFailed {
    if (_tag != DBXTEAMMemberAddResultUserMigrationFailed) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMemberAddResultUserMigrationFailed`, but was %@.", [self getTagName]];
    }
    return _userMigrationFailed;
}

- (NSString *)duplicateExternalMemberId {
    if (_tag != DBXTEAMMemberAddResultDuplicateExternalMemberId) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMemberAddResultDuplicateExternalMemberId`, but was %@.", [self getTagName]];
    }
    return _duplicateExternalMemberId;
}

- (NSString *)userCreationFailed {
    if (_tag != DBXTEAMMemberAddResultUserCreationFailed) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMemberAddResultUserCreationFailed`, but was %@.", [self getTagName]];
    }
    return _userCreationFailed;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXTEAMMemberAddResultSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMMemberAddResultSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMMemberAddResultSerializer serialize:self] description];
}

@end


@implementation DBXTEAMMemberAddResultSerializer 

+ (NSDictionary *)serialize:(DBXTEAMMemberAddResult *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isSuccess]) {
        jsonDict = [[DBXTEAMTeamMemberInfoSerializer serialize:valueObj.success] mutableCopy];
        jsonDict[@".tag"] = @"success";
    }
    else if ([valueObj isTeamLicenseLimit]) {
        jsonDict[@"team_license_limit"] = valueObj.teamLicenseLimit;
        jsonDict[@".tag"] = @"team_license_limit";
    }
    else if ([valueObj isFreeTeamMemberLimitReached]) {
        jsonDict[@"free_team_member_limit_reached"] = valueObj.freeTeamMemberLimitReached;
        jsonDict[@".tag"] = @"free_team_member_limit_reached";
    }
    else if ([valueObj isUserAlreadyOnTeam]) {
        jsonDict[@"user_already_on_team"] = valueObj.userAlreadyOnTeam;
        jsonDict[@".tag"] = @"user_already_on_team";
    }
    else if ([valueObj isUserOnAnotherTeam]) {
        jsonDict[@"user_on_another_team"] = valueObj.userOnAnotherTeam;
        jsonDict[@".tag"] = @"user_on_another_team";
    }
    else if ([valueObj isUserAlreadyPaired]) {
        jsonDict[@"user_already_paired"] = valueObj.userAlreadyPaired;
        jsonDict[@".tag"] = @"user_already_paired";
    }
    else if ([valueObj isUserMigrationFailed]) {
        jsonDict[@"user_migration_failed"] = valueObj.userMigrationFailed;
        jsonDict[@".tag"] = @"user_migration_failed";
    }
    else if ([valueObj isDuplicateExternalMemberId]) {
        jsonDict[@"duplicate_external_member_id"] = valueObj.duplicateExternalMemberId;
        jsonDict[@".tag"] = @"duplicate_external_member_id";
    }
    else if ([valueObj isUserCreationFailed]) {
        jsonDict[@"user_creation_failed"] = valueObj.userCreationFailed;
        jsonDict[@".tag"] = @"user_creation_failed";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMMemberAddResult *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"success"]) {
        DBXTEAMTeamMemberInfo *success = [DBXTEAMTeamMemberInfoSerializer deserialize:valueDict];
        return [[DBXTEAMMemberAddResult alloc] initWithSuccess:success];
    }
    else if ([tag isEqualToString:@"team_license_limit"]) {
        NSString *teamLicenseLimit = valueDict[@"team_license_limit"];
        return [[DBXTEAMMemberAddResult alloc] initWithTeamLicenseLimit:teamLicenseLimit];
    }
    else if ([tag isEqualToString:@"free_team_member_limit_reached"]) {
        NSString *freeTeamMemberLimitReached = valueDict[@"free_team_member_limit_reached"];
        return [[DBXTEAMMemberAddResult alloc] initWithFreeTeamMemberLimitReached:freeTeamMemberLimitReached];
    }
    else if ([tag isEqualToString:@"user_already_on_team"]) {
        NSString *userAlreadyOnTeam = valueDict[@"user_already_on_team"];
        return [[DBXTEAMMemberAddResult alloc] initWithUserAlreadyOnTeam:userAlreadyOnTeam];
    }
    else if ([tag isEqualToString:@"user_on_another_team"]) {
        NSString *userOnAnotherTeam = valueDict[@"user_on_another_team"];
        return [[DBXTEAMMemberAddResult alloc] initWithUserOnAnotherTeam:userOnAnotherTeam];
    }
    else if ([tag isEqualToString:@"user_already_paired"]) {
        NSString *userAlreadyPaired = valueDict[@"user_already_paired"];
        return [[DBXTEAMMemberAddResult alloc] initWithUserAlreadyPaired:userAlreadyPaired];
    }
    else if ([tag isEqualToString:@"user_migration_failed"]) {
        NSString *userMigrationFailed = valueDict[@"user_migration_failed"];
        return [[DBXTEAMMemberAddResult alloc] initWithUserMigrationFailed:userMigrationFailed];
    }
    else if ([tag isEqualToString:@"duplicate_external_member_id"]) {
        NSString *duplicateExternalMemberId = valueDict[@"duplicate_external_member_id"];
        return [[DBXTEAMMemberAddResult alloc] initWithDuplicateExternalMemberId:duplicateExternalMemberId];
    }
    else if ([tag isEqualToString:@"user_creation_failed"]) {
        NSString *userCreationFailed = valueDict[@"user_creation_failed"];
        return [[DBXTEAMMemberAddResult alloc] initWithUserCreationFailed:userCreationFailed];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
