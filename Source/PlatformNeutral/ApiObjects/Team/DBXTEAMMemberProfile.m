///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMMemberProfile.h"
#import "DBXTEAMTeamMemberStatus.h"
#import "DBXTEAMTeamMembershipType.h"
#import "DBXUSERSName.h"

@implementation DBXTEAMMemberProfile 

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId email:(NSString *)email emailVerified:(NSNumber *)emailVerified status:(DBXTEAMTeamMemberStatus *)status name:(DBXUSERSName *)name membershipType:(DBXTEAMTeamMembershipType *)membershipType externalId:(NSString *)externalId accountId:(NSString *)accountId {
    [DBXStoneValidators nullableValidator:[DBXStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil]](accountId);

    self = [super init];
    if (self != nil) {
        _teamMemberId = teamMemberId;
        _externalId = externalId;
        _accountId = accountId;
        _email = email;
        _emailVerified = emailVerified;
        _status = status;
        _name = name;
        _membershipType = membershipType;
    }
    return self;
}

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId email:(NSString *)email emailVerified:(NSNumber *)emailVerified status:(DBXTEAMTeamMemberStatus *)status name:(DBXUSERSName *)name membershipType:(DBXTEAMTeamMembershipType *)membershipType {
    return [self initWithTeamMemberId:teamMemberId email:email emailVerified:emailVerified status:status name:name membershipType:membershipType externalId:nil accountId:nil];
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXTEAMMemberProfileSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMMemberProfileSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMMemberProfileSerializer serialize:self] description];
}

@end


@implementation DBXTEAMMemberProfileSerializer 

+ (NSDictionary *)serialize:(DBXTEAMMemberProfile *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    jsonDict[@"team_member_id"] = valueObj.teamMemberId;
    jsonDict[@"email"] = valueObj.email;
    jsonDict[@"email_verified"] = valueObj.emailVerified;
    jsonDict[@"status"] = [DBXTEAMTeamMemberStatusSerializer serialize:valueObj.status];
    jsonDict[@"name"] = [DBXUSERSNameSerializer serialize:valueObj.name];
    jsonDict[@"membership_type"] = [DBXTEAMTeamMembershipTypeSerializer serialize:valueObj.membershipType];
    if (valueObj.externalId) {
        jsonDict[@"external_id"] = valueObj.externalId;
    }
    if (valueObj.accountId) {
        jsonDict[@"account_id"] = valueObj.accountId;
    }

    return jsonDict;
}

+ (DBXTEAMMemberProfile *)deserialize:(NSDictionary *)valueDict {
    NSString *teamMemberId = valueDict[@"team_member_id"];
    NSString *email = valueDict[@"email"];
    NSNumber *emailVerified = valueDict[@"email_verified"];
    DBXTEAMTeamMemberStatus *status = [DBXTEAMTeamMemberStatusSerializer deserialize:valueDict[@"status"]];
    DBXUSERSName *name = [DBXUSERSNameSerializer deserialize:valueDict[@"name"]];
    DBXTEAMTeamMembershipType *membershipType = [DBXTEAMTeamMembershipTypeSerializer deserialize:valueDict[@"membership_type"]];
    NSString *externalId = valueDict[@"external_id"] ?: nil;
    NSString *accountId = valueDict[@"account_id"] ?: nil;

    return [[DBXTEAMMemberProfile alloc] initWithTeamMemberId:teamMemberId email:email emailVerified:emailVerified status:status name:name membershipType:membershipType externalId:externalId accountId:accountId];
}

@end
