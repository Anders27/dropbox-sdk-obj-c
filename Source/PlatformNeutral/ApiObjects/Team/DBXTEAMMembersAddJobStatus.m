///
/// Auto-generated by Stone, do not modify.
///

#import "DBXASYNCPollResultBase.h"
#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMMemberAddResult.h"
#import "DBXTEAMMembersAddJobStatus.h"

@implementation DBXTEAMMembersAddJobStatus 

@synthesize complete = _complete;
@synthesize failed = _failed;

- (instancetype)initWithInProgress {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMembersAddJobStatusInProgress;
    }
    return self;
}

- (instancetype)initWithComplete:(NSArray<DBXTEAMMemberAddResult *> *)complete {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMembersAddJobStatusComplete;
        _complete = complete;
    }
    return self;
}

- (instancetype)initWithFailed:(NSString *)failed {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMembersAddJobStatusFailed;
        _failed = failed;
    }
    return self;
}

- (BOOL)isInProgress {
    return _tag == DBXTEAMMembersAddJobStatusInProgress;
}

- (BOOL)isComplete {
    return _tag == DBXTEAMMembersAddJobStatusComplete;
}

- (BOOL)isFailed {
    return _tag == DBXTEAMMembersAddJobStatusFailed;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMMembersAddJobStatusInProgress:
           return @"DBXTEAMMembersAddJobStatusInProgress";
        case DBXTEAMMembersAddJobStatusComplete:
           return @"DBXTEAMMembersAddJobStatusComplete";
        case DBXTEAMMembersAddJobStatusFailed:
           return @"DBXTEAMMembersAddJobStatusFailed";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSArray<DBXTEAMMemberAddResult *> *)complete {
    if (_tag != DBXTEAMMembersAddJobStatusComplete) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMembersAddJobStatusComplete`, but was %@.", [self getTagName]];
    }
    return _complete;
}

- (NSString *)failed {
    if (_tag != DBXTEAMMembersAddJobStatusFailed) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMembersAddJobStatusFailed`, but was %@.", [self getTagName]];
    }
    return _failed;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXTEAMMembersAddJobStatusSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMMembersAddJobStatusSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMMembersAddJobStatusSerializer serialize:self] description];
}

@end


@implementation DBXTEAMMembersAddJobStatusSerializer 

+ (NSDictionary *)serialize:(DBXTEAMMembersAddJobStatus *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isInProgress]) {
        jsonDict[@".tag"] = @"in_progress";
    }
    else if ([valueObj isComplete]) {
        jsonDict[@"complete"] = [DBXArraySerializer serialize:valueObj.complete withBlock:^id(id elem) { return [DBXTEAMMemberAddResultSerializer serialize:elem]; }];
        jsonDict[@".tag"] = @"complete";
    }
    else if ([valueObj isFailed]) {
        jsonDict[@"failed"] = valueObj.failed;
        jsonDict[@".tag"] = @"failed";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMMembersAddJobStatus *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"in_progress"]) {
        return [[DBXTEAMMembersAddJobStatus alloc] initWithInProgress];
    }
    else if ([tag isEqualToString:@"complete"]) {
        NSArray<DBXTEAMMemberAddResult *> *complete = [DBXArraySerializer deserialize:valueDict[@"complete"] withBlock:^id(id elem) { return [DBXTEAMMemberAddResultSerializer deserialize:elem]; }];
        return [[DBXTEAMMembersAddJobStatus alloc] initWithComplete:complete];
    }
    else if ([tag isEqualToString:@"failed"]) {
        NSString *failed = valueDict[@"failed"];
        return [[DBXTEAMMembersAddJobStatus alloc] initWithFailed:failed];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
