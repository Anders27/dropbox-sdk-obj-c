///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMMembersRecoverError.h"
#import "DBXTEAMUserSelectorError.h"

@implementation DBXTEAMMembersRecoverError 

- (instancetype)initWithUserNotFound {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersRecoverErrorUserNotFound;
    }
    return self;
}

- (instancetype)initWithUserUnrecoverable {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersRecoverErrorUserUnrecoverable;
    }
    return self;
}

- (instancetype)initWithUserNotInTeam {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersRecoverErrorUserNotInTeam;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersRecoverErrorOther;
    }
    return self;
}

- (BOOL)isUserNotFound {
    return _tag == DBXTEAMMembersRecoverErrorUserNotFound;
}

- (BOOL)isUserUnrecoverable {
    return _tag == DBXTEAMMembersRecoverErrorUserUnrecoverable;
}

- (BOOL)isUserNotInTeam {
    return _tag == DBXTEAMMembersRecoverErrorUserNotInTeam;
}

- (BOOL)isOther {
    return _tag == DBXTEAMMembersRecoverErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMMembersRecoverErrorUserNotFound:
           return @"DBXTEAMMembersRecoverErrorUserNotFound";
        case DBXTEAMMembersRecoverErrorUserUnrecoverable:
           return @"DBXTEAMMembersRecoverErrorUserUnrecoverable";
        case DBXTEAMMembersRecoverErrorUserNotInTeam:
           return @"DBXTEAMMembersRecoverErrorUserNotInTeam";
        case DBXTEAMMembersRecoverErrorOther:
           return @"DBXTEAMMembersRecoverErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXTEAMMembersRecoverErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMMembersRecoverErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMMembersRecoverErrorSerializer serialize:self] description];
}

@end


@implementation DBXTEAMMembersRecoverErrorSerializer 

+ (NSDictionary *)serialize:(DBXTEAMMembersRecoverError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserNotFound]) {
        jsonDict[@".tag"] = @"user_not_found";
    }
    else if ([valueObj isUserUnrecoverable]) {
        jsonDict[@".tag"] = @"user_unrecoverable";
    }
    else if ([valueObj isUserNotInTeam]) {
        jsonDict[@".tag"] = @"user_not_in_team";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMMembersRecoverError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_not_found"]) {
        return [[DBXTEAMMembersRecoverError alloc] initWithUserNotFound];
    }
    else if ([tag isEqualToString:@"user_unrecoverable"]) {
        return [[DBXTEAMMembersRecoverError alloc] initWithUserUnrecoverable];
    }
    else if ([tag isEqualToString:@"user_not_in_team"]) {
        return [[DBXTEAMMembersRecoverError alloc] initWithUserNotInTeam];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXTEAMMembersRecoverError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
