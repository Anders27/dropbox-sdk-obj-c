///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMMemberSelectorError.h"
#import "DBXTEAMMembersSendWelcomeError.h"

@implementation DBXTEAMMembersSendWelcomeError 

- (instancetype)initWithUserNotFound {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSendWelcomeErrorUserNotFound;
    }
    return self;
}

- (instancetype)initWithUserNotInTeam {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSendWelcomeErrorUserNotInTeam;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSendWelcomeErrorOther;
    }
    return self;
}

- (BOOL)isUserNotFound {
    return _tag == DBXTEAMMembersSendWelcomeErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
    return _tag == DBXTEAMMembersSendWelcomeErrorUserNotInTeam;
}

- (BOOL)isOther {
    return _tag == DBXTEAMMembersSendWelcomeErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMMembersSendWelcomeErrorUserNotFound:
           return @"DBXTEAMMembersSendWelcomeErrorUserNotFound";
        case DBXTEAMMembersSendWelcomeErrorUserNotInTeam:
           return @"DBXTEAMMembersSendWelcomeErrorUserNotInTeam";
        case DBXTEAMMembersSendWelcomeErrorOther:
           return @"DBXTEAMMembersSendWelcomeErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXTEAMMembersSendWelcomeErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMMembersSendWelcomeErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMMembersSendWelcomeErrorSerializer serialize:self] description];
}

@end


@implementation DBXTEAMMembersSendWelcomeErrorSerializer 

+ (NSDictionary *)serialize:(DBXTEAMMembersSendWelcomeError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserNotFound]) {
        jsonDict[@".tag"] = @"user_not_found";
    }
    else if ([valueObj isUserNotInTeam]) {
        jsonDict[@".tag"] = @"user_not_in_team";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMMembersSendWelcomeError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_not_found"]) {
        return [[DBXTEAMMembersSendWelcomeError alloc] initWithUserNotFound];
    }
    else if ([tag isEqualToString:@"user_not_in_team"]) {
        return [[DBXTEAMMembersSendWelcomeError alloc] initWithUserNotInTeam];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXTEAMMembersSendWelcomeError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
