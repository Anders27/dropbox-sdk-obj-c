///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMMembersSetPermissionsError.h"
#import "DBXTEAMUserSelectorError.h"

@implementation DBXTEAMMembersSetPermissionsError 

- (instancetype)initWithUserNotFound {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSetPermissionsErrorUserNotFound;
    }
    return self;
}

- (instancetype)initWithLastAdmin {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSetPermissionsErrorLastAdmin;
    }
    return self;
}

- (instancetype)initWithUserNotInTeam {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSetPermissionsErrorUserNotInTeam;
    }
    return self;
}

- (instancetype)initWithCannotSetPermissions {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSetPermissionsErrorCannotSetPermissions;
    }
    return self;
}

- (instancetype)initWithTeamLicenseLimit {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSetPermissionsErrorTeamLicenseLimit;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSetPermissionsErrorOther;
    }
    return self;
}

- (BOOL)isUserNotFound {
    return _tag == DBXTEAMMembersSetPermissionsErrorUserNotFound;
}

- (BOOL)isLastAdmin {
    return _tag == DBXTEAMMembersSetPermissionsErrorLastAdmin;
}

- (BOOL)isUserNotInTeam {
    return _tag == DBXTEAMMembersSetPermissionsErrorUserNotInTeam;
}

- (BOOL)isCannotSetPermissions {
    return _tag == DBXTEAMMembersSetPermissionsErrorCannotSetPermissions;
}

- (BOOL)isTeamLicenseLimit {
    return _tag == DBXTEAMMembersSetPermissionsErrorTeamLicenseLimit;
}

- (BOOL)isOther {
    return _tag == DBXTEAMMembersSetPermissionsErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMMembersSetPermissionsErrorUserNotFound:
           return @"DBXTEAMMembersSetPermissionsErrorUserNotFound";
        case DBXTEAMMembersSetPermissionsErrorLastAdmin:
           return @"DBXTEAMMembersSetPermissionsErrorLastAdmin";
        case DBXTEAMMembersSetPermissionsErrorUserNotInTeam:
           return @"DBXTEAMMembersSetPermissionsErrorUserNotInTeam";
        case DBXTEAMMembersSetPermissionsErrorCannotSetPermissions:
           return @"DBXTEAMMembersSetPermissionsErrorCannotSetPermissions";
        case DBXTEAMMembersSetPermissionsErrorTeamLicenseLimit:
           return @"DBXTEAMMembersSetPermissionsErrorTeamLicenseLimit";
        case DBXTEAMMembersSetPermissionsErrorOther:
           return @"DBXTEAMMembersSetPermissionsErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXTEAMMembersSetPermissionsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMMembersSetPermissionsErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMMembersSetPermissionsErrorSerializer serialize:self] description];
}

@end


@implementation DBXTEAMMembersSetPermissionsErrorSerializer 

+ (NSDictionary *)serialize:(DBXTEAMMembersSetPermissionsError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserNotFound]) {
        jsonDict[@".tag"] = @"user_not_found";
    }
    else if ([valueObj isLastAdmin]) {
        jsonDict[@".tag"] = @"last_admin";
    }
    else if ([valueObj isUserNotInTeam]) {
        jsonDict[@".tag"] = @"user_not_in_team";
    }
    else if ([valueObj isCannotSetPermissions]) {
        jsonDict[@".tag"] = @"cannot_set_permissions";
    }
    else if ([valueObj isTeamLicenseLimit]) {
        jsonDict[@".tag"] = @"team_license_limit";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMMembersSetPermissionsError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_not_found"]) {
        return [[DBXTEAMMembersSetPermissionsError alloc] initWithUserNotFound];
    }
    else if ([tag isEqualToString:@"last_admin"]) {
        return [[DBXTEAMMembersSetPermissionsError alloc] initWithLastAdmin];
    }
    else if ([tag isEqualToString:@"user_not_in_team"]) {
        return [[DBXTEAMMembersSetPermissionsError alloc] initWithUserNotInTeam];
    }
    else if ([tag isEqualToString:@"cannot_set_permissions"]) {
        return [[DBXTEAMMembersSetPermissionsError alloc] initWithCannotSetPermissions];
    }
    else if ([tag isEqualToString:@"team_license_limit"]) {
        return [[DBXTEAMMembersSetPermissionsError alloc] initWithTeamLicenseLimit];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXTEAMMembersSetPermissionsError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
