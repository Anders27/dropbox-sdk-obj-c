///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>
#import "DBXSerializableProtocol.h"

@class DBXTEAMMembersSetProfileError;

/// 
/// The MembersSetProfileError union.
/// 
/// This class implements the `DBXSerializable` protocol (`serialize` and
/// `deserialize` instance methods), which is required for all Obj-C SDK API
/// route objects.
/// 
@interface DBXTEAMMembersSetProfileError : NSObject <DBXSerializable> 

/// The `DBXTEAMMembersSetProfileErrorTag` enum type represents the possible tag
/// states with which the `DBXTEAMMembersSetProfileError` union can exist.
typedef NS_ENUM(NSInteger, DBXTEAMMembersSetProfileErrorTag) {
    /// No matching user found. The provided team_member_id, email, or
    /// external_id does not exist on this team.
    DBXTEAMMembersSetProfileErrorUserNotFound,

    /// The user is not a member of the team.
    DBXTEAMMembersSetProfileErrorUserNotInTeam,

    /// It is unsafe to use both external_id and new_external_id
    DBXTEAMMembersSetProfileErrorExternalIdAndNewExternalIdUnsafe,

    /// None of new_email, new_given_name, new_surname, or new_external_id are
    /// specified
    DBXTEAMMembersSetProfileErrorNoNewDataSpecified,

    /// Email is already reserved for another user.
    DBXTEAMMembersSetProfileErrorEmailReservedForOtherUser,

    /// The external ID is already in use by another team member.
    DBXTEAMMembersSetProfileErrorExternalIdUsedByOtherUser,

    /// Setting profile disallowed
    DBXTEAMMembersSetProfileErrorSetProfileDisallowed,

    /// Parameter new_email cannot be empty.
    DBXTEAMMembersSetProfileErrorParamCannotBeEmpty,

    /// (no description).
    DBXTEAMMembersSetProfileErrorOther,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBXTEAMMembersSetProfileErrorTag tag;

/// 
/// Initializes union class with tag state of `UserNotFound`.
/// 
/// About the `UserNotFound` tag state: No matching user found. The provided
/// team_member_id, email, or external_id does not exist on this team.
/// 
/// - returns: An initialized `DBXTEAMMembersSetProfileError` instance.
/// 
- (nonnull instancetype)initWithUserNotFound;

/// 
/// Initializes union class with tag state of `UserNotInTeam`.
/// 
/// About the `UserNotInTeam` tag state: The user is not a member of the team.
/// 
/// - returns: An initialized `DBXTEAMMembersSetProfileError` instance.
/// 
- (nonnull instancetype)initWithUserNotInTeam;

/// 
/// Initializes union class with tag state of
/// `ExternalIdAndNewExternalIdUnsafe`.
/// 
/// About the `ExternalIdAndNewExternalIdUnsafe` tag state: It is unsafe to use
/// both external_id and new_external_id
/// 
/// - returns: An initialized `DBXTEAMMembersSetProfileError` instance.
/// 
- (nonnull instancetype)initWithExternalIdAndNewExternalIdUnsafe;

/// 
/// Initializes union class with tag state of `NoNewDataSpecified`.
/// 
/// About the `NoNewDataSpecified` tag state: None of new_email, new_given_name,
/// new_surname, or new_external_id are specified
/// 
/// - returns: An initialized `DBXTEAMMembersSetProfileError` instance.
/// 
- (nonnull instancetype)initWithNoNewDataSpecified;

/// 
/// Initializes union class with tag state of `EmailReservedForOtherUser`.
/// 
/// About the `EmailReservedForOtherUser` tag state: Email is already reserved
/// for another user.
/// 
/// - returns: An initialized `DBXTEAMMembersSetProfileError` instance.
/// 
- (nonnull instancetype)initWithEmailReservedForOtherUser;

/// 
/// Initializes union class with tag state of `ExternalIdUsedByOtherUser`.
/// 
/// About the `ExternalIdUsedByOtherUser` tag state: The external ID is already
/// in use by another team member.
/// 
/// - returns: An initialized `DBXTEAMMembersSetProfileError` instance.
/// 
- (nonnull instancetype)initWithExternalIdUsedByOtherUser;

/// 
/// Initializes union class with tag state of `SetProfileDisallowed`.
/// 
/// About the `SetProfileDisallowed` tag state: Setting profile disallowed
/// 
/// - returns: An initialized `DBXTEAMMembersSetProfileError` instance.
/// 
- (nonnull instancetype)initWithSetProfileDisallowed;

/// 
/// Initializes union class with tag state of `ParamCannotBeEmpty`.
/// 
/// About the `ParamCannotBeEmpty` tag state: Parameter new_email cannot be
/// empty.
/// 
/// - returns: An initialized `DBXTEAMMembersSetProfileError` instance.
/// 
- (nonnull instancetype)initWithParamCannotBeEmpty;

/// 
/// Initializes union class with tag state of `Other`.
/// 
/// - returns: An initialized `DBXTEAMMembersSetProfileError` instance.
/// 
- (nonnull instancetype)initWithOther;

/// 
/// Retrieves whether the union's current tag state has value `UserNotFound`.
/// 
/// - returns: Whether the union's current tag state has value `UserNotFound`.
/// 
- (BOOL)isUserNotFound;

/// 
/// Retrieves whether the union's current tag state has value `UserNotInTeam`.
/// 
/// - returns: Whether the union's current tag state has value `UserNotInTeam`.
/// 
- (BOOL)isUserNotInTeam;

/// 
/// Retrieves whether the union's current tag state has value
/// `ExternalIdAndNewExternalIdUnsafe`.
/// 
/// - returns: Whether the union's current tag state has value
/// `ExternalIdAndNewExternalIdUnsafe`.
/// 
- (BOOL)isExternalIdAndNewExternalIdUnsafe;

/// 
/// Retrieves whether the union's current tag state has value
/// `NoNewDataSpecified`.
/// 
/// - returns: Whether the union's current tag state has value
/// `NoNewDataSpecified`.
/// 
- (BOOL)isNoNewDataSpecified;

/// 
/// Retrieves whether the union's current tag state has value
/// `EmailReservedForOtherUser`.
/// 
/// - returns: Whether the union's current tag state has value
/// `EmailReservedForOtherUser`.
/// 
- (BOOL)isEmailReservedForOtherUser;

/// 
/// Retrieves whether the union's current tag state has value
/// `ExternalIdUsedByOtherUser`.
/// 
/// - returns: Whether the union's current tag state has value
/// `ExternalIdUsedByOtherUser`.
/// 
- (BOOL)isExternalIdUsedByOtherUser;

/// 
/// Retrieves whether the union's current tag state has value
/// `SetProfileDisallowed`.
/// 
/// - returns: Whether the union's current tag state has value
/// `SetProfileDisallowed`.
/// 
- (BOOL)isSetProfileDisallowed;

/// 
/// Retrieves whether the union's current tag state has value
/// `ParamCannotBeEmpty`.
/// 
/// - returns: Whether the union's current tag state has value
/// `ParamCannotBeEmpty`.
/// 
- (BOOL)isParamCannotBeEmpty;

/// 
/// Retrieves whether the union's current tag state has value `Other`.
/// 
/// - returns: Whether the union's current tag state has value `Other`.
/// 
- (BOOL)isOther;

/// 
/// Retrieves string value of union's current tag state.
/// 
/// - returns: A human-readable string representing the union's current tag
/// state.
/// 
- (NSString * _Nonnull)getTagName;

@end


/// 
/// The serialization class for the `DBXTEAMMembersSetProfileError` union.
/// 
@interface DBXTEAMMembersSetProfileErrorSerializer : NSObject 

/// 
/// Serializes `DBXTEAMMembersSetProfileError` instances.
/// 
///  - parameter instance: An instance of the `DBXTEAMMembersSetProfileError`
/// API object.
/// 
///  - returns: A json-compatible dictionary representation of the
/// `DBXTEAMMembersSetProfileError` API object.
/// 
+ (NSDictionary * _Nonnull)serialize:(DBXTEAMMembersSetProfileError * _Nonnull)instance;

/// 
/// Deserializes `DBXTEAMMembersSetProfileError` instances.
/// 
///  - parameter dict: A json-compatible dictionary representation of the
/// `DBXTEAMMembersSetProfileError` API object.
/// 
///  - returns: An instantiation of the `DBXTEAMMembersSetProfileError` object.
/// 
+ (DBXTEAMMembersSetProfileError * _Nonnull)deserialize:(NSDictionary * _Nonnull)dict;

@end
