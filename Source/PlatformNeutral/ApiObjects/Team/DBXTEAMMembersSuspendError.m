///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMMembersDeactivateError.h"
#import "DBXTEAMMembersSuspendError.h"

@implementation DBXTEAMMembersSuspendError 

- (instancetype)initWithUserNotFound {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSuspendErrorUserNotFound;
    }
    return self;
}

- (instancetype)initWithUserNotInTeam {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSuspendErrorUserNotInTeam;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSuspendErrorOther;
    }
    return self;
}

- (instancetype)initWithSuspendInactiveUser {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSuspendErrorSuspendInactiveUser;
    }
    return self;
}

- (instancetype)initWithSuspendLastAdmin {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSuspendErrorSuspendLastAdmin;
    }
    return self;
}

- (instancetype)initWithTeamLicenseLimit {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMembersSuspendErrorTeamLicenseLimit;
    }
    return self;
}

- (BOOL)isUserNotFound {
    return _tag == DBXTEAMMembersSuspendErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
    return _tag == DBXTEAMMembersSuspendErrorUserNotInTeam;
}

- (BOOL)isOther {
    return _tag == DBXTEAMMembersSuspendErrorOther;
}

- (BOOL)isSuspendInactiveUser {
    return _tag == DBXTEAMMembersSuspendErrorSuspendInactiveUser;
}

- (BOOL)isSuspendLastAdmin {
    return _tag == DBXTEAMMembersSuspendErrorSuspendLastAdmin;
}

- (BOOL)isTeamLicenseLimit {
    return _tag == DBXTEAMMembersSuspendErrorTeamLicenseLimit;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMMembersSuspendErrorUserNotFound:
           return @"DBXTEAMMembersSuspendErrorUserNotFound";
        case DBXTEAMMembersSuspendErrorUserNotInTeam:
           return @"DBXTEAMMembersSuspendErrorUserNotInTeam";
        case DBXTEAMMembersSuspendErrorOther:
           return @"DBXTEAMMembersSuspendErrorOther";
        case DBXTEAMMembersSuspendErrorSuspendInactiveUser:
           return @"DBXTEAMMembersSuspendErrorSuspendInactiveUser";
        case DBXTEAMMembersSuspendErrorSuspendLastAdmin:
           return @"DBXTEAMMembersSuspendErrorSuspendLastAdmin";
        case DBXTEAMMembersSuspendErrorTeamLicenseLimit:
           return @"DBXTEAMMembersSuspendErrorTeamLicenseLimit";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXTEAMMembersSuspendErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMMembersSuspendErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMMembersSuspendErrorSerializer serialize:self] description];
}

@end


@implementation DBXTEAMMembersSuspendErrorSerializer 

+ (NSDictionary *)serialize:(DBXTEAMMembersSuspendError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserNotFound]) {
        jsonDict[@".tag"] = @"user_not_found";
    }
    else if ([valueObj isUserNotInTeam]) {
        jsonDict[@".tag"] = @"user_not_in_team";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isSuspendInactiveUser]) {
        jsonDict[@".tag"] = @"suspend_inactive_user";
    }
    else if ([valueObj isSuspendLastAdmin]) {
        jsonDict[@".tag"] = @"suspend_last_admin";
    }
    else if ([valueObj isTeamLicenseLimit]) {
        jsonDict[@".tag"] = @"team_license_limit";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMMembersSuspendError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_not_found"]) {
        return [[DBXTEAMMembersSuspendError alloc] initWithUserNotFound];
    }
    else if ([tag isEqualToString:@"user_not_in_team"]) {
        return [[DBXTEAMMembersSuspendError alloc] initWithUserNotInTeam];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXTEAMMembersSuspendError alloc] initWithOther];
    }
    else if ([tag isEqualToString:@"suspend_inactive_user"]) {
        return [[DBXTEAMMembersSuspendError alloc] initWithSuspendInactiveUser];
    }
    else if ([tag isEqualToString:@"suspend_last_admin"]) {
        return [[DBXTEAMMembersSuspendError alloc] initWithSuspendLastAdmin];
    }
    else if ([tag isEqualToString:@"team_license_limit"]) {
        return [[DBXTEAMMembersSuspendError alloc] initWithTeamLicenseLimit];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
