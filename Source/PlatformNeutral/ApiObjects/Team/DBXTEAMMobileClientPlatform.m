///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMMobileClientPlatform.h"

@implementation DBXTEAMMobileClientPlatform 

- (instancetype)initWithIphone {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMobileClientPlatformIphone;
    }
    return self;
}

- (instancetype)initWithIpad {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMobileClientPlatformIpad;
    }
    return self;
}

- (instancetype)initWithAndroid {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMobileClientPlatformAndroid;
    }
    return self;
}

- (instancetype)initWithWindowsPhone {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMobileClientPlatformWindowsPhone;
    }
    return self;
}

- (instancetype)initWithBlackberry {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMobileClientPlatformBlackberry;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXTEAMMobileClientPlatformOther;
    }
    return self;
}

- (BOOL)isIphone {
    return _tag == DBXTEAMMobileClientPlatformIphone;
}

- (BOOL)isIpad {
    return _tag == DBXTEAMMobileClientPlatformIpad;
}

- (BOOL)isAndroid {
    return _tag == DBXTEAMMobileClientPlatformAndroid;
}

- (BOOL)isWindowsPhone {
    return _tag == DBXTEAMMobileClientPlatformWindowsPhone;
}

- (BOOL)isBlackberry {
    return _tag == DBXTEAMMobileClientPlatformBlackberry;
}

- (BOOL)isOther {
    return _tag == DBXTEAMMobileClientPlatformOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMMobileClientPlatformIphone:
           return @"DBXTEAMMobileClientPlatformIphone";
        case DBXTEAMMobileClientPlatformIpad:
           return @"DBXTEAMMobileClientPlatformIpad";
        case DBXTEAMMobileClientPlatformAndroid:
           return @"DBXTEAMMobileClientPlatformAndroid";
        case DBXTEAMMobileClientPlatformWindowsPhone:
           return @"DBXTEAMMobileClientPlatformWindowsPhone";
        case DBXTEAMMobileClientPlatformBlackberry:
           return @"DBXTEAMMobileClientPlatformBlackberry";
        case DBXTEAMMobileClientPlatformOther:
           return @"DBXTEAMMobileClientPlatformOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXTEAMMobileClientPlatformSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMMobileClientPlatformSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMMobileClientPlatformSerializer serialize:self] description];
}

@end


@implementation DBXTEAMMobileClientPlatformSerializer 

+ (NSDictionary *)serialize:(DBXTEAMMobileClientPlatform *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isIphone]) {
        jsonDict[@".tag"] = @"iphone";
    }
    else if ([valueObj isIpad]) {
        jsonDict[@".tag"] = @"ipad";
    }
    else if ([valueObj isAndroid]) {
        jsonDict[@".tag"] = @"android";
    }
    else if ([valueObj isWindowsPhone]) {
        jsonDict[@".tag"] = @"windows_phone";
    }
    else if ([valueObj isBlackberry]) {
        jsonDict[@".tag"] = @"blackberry";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMMobileClientPlatform *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"iphone"]) {
        return [[DBXTEAMMobileClientPlatform alloc] initWithIphone];
    }
    else if ([tag isEqualToString:@"ipad"]) {
        return [[DBXTEAMMobileClientPlatform alloc] initWithIpad];
    }
    else if ([tag isEqualToString:@"android"]) {
        return [[DBXTEAMMobileClientPlatform alloc] initWithAndroid];
    }
    else if ([tag isEqualToString:@"windows_phone"]) {
        return [[DBXTEAMMobileClientPlatform alloc] initWithWindowsPhone];
    }
    else if ([tag isEqualToString:@"blackberry"]) {
        return [[DBXTEAMMobileClientPlatform alloc] initWithBlackberry];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXTEAMMobileClientPlatform alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
