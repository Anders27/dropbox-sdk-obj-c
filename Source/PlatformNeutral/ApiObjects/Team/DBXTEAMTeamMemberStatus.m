///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMRemovedStatus.h"
#import "DBXTEAMTeamMemberStatus.h"

@implementation DBXTEAMTeamMemberStatus 

@synthesize removed = _removed;

- (instancetype)initWithActive {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMTeamMemberStatusActive;
    }
    return self;
}

- (instancetype)initWithInvited {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMTeamMemberStatusInvited;
    }
    return self;
}

- (instancetype)initWithSuspended {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMTeamMemberStatusSuspended;
    }
    return self;
}

- (instancetype)initWithRemoved:(DBXTEAMRemovedStatus *)removed {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMTeamMemberStatusRemoved;
        _removed = removed;
    }
    return self;
}

- (BOOL)isActive {
    return _tag == DBXTEAMTeamMemberStatusActive;
}

- (BOOL)isInvited {
    return _tag == DBXTEAMTeamMemberStatusInvited;
}

- (BOOL)isSuspended {
    return _tag == DBXTEAMTeamMemberStatusSuspended;
}

- (BOOL)isRemoved {
    return _tag == DBXTEAMTeamMemberStatusRemoved;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMTeamMemberStatusActive:
           return @"DBXTEAMTeamMemberStatusActive";
        case DBXTEAMTeamMemberStatusInvited:
           return @"DBXTEAMTeamMemberStatusInvited";
        case DBXTEAMTeamMemberStatusSuspended:
           return @"DBXTEAMTeamMemberStatusSuspended";
        case DBXTEAMTeamMemberStatusRemoved:
           return @"DBXTEAMTeamMemberStatusRemoved";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (DBXTEAMRemovedStatus *)removed {
    if (_tag != DBXTEAMTeamMemberStatusRemoved) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMTeamMemberStatusRemoved`, but was %@.", [self getTagName]];
    }
    return _removed;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXTEAMTeamMemberStatusSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMTeamMemberStatusSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMTeamMemberStatusSerializer serialize:self] description];
}

@end


@implementation DBXTEAMTeamMemberStatusSerializer 

+ (NSDictionary *)serialize:(DBXTEAMTeamMemberStatus *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isActive]) {
        jsonDict[@".tag"] = @"active";
    }
    else if ([valueObj isInvited]) {
        jsonDict[@".tag"] = @"invited";
    }
    else if ([valueObj isSuspended]) {
        jsonDict[@".tag"] = @"suspended";
    }
    else if ([valueObj isRemoved]) {
        jsonDict = [[DBXTEAMRemovedStatusSerializer serialize:valueObj.removed] mutableCopy];
        jsonDict[@".tag"] = @"removed";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMTeamMemberStatus *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"active"]) {
        return [[DBXTEAMTeamMemberStatus alloc] initWithActive];
    }
    else if ([tag isEqualToString:@"invited"]) {
        return [[DBXTEAMTeamMemberStatus alloc] initWithInvited];
    }
    else if ([tag isEqualToString:@"suspended"]) {
        return [[DBXTEAMTeamMemberStatus alloc] initWithSuspended];
    }
    else if ([tag isEqualToString:@"removed"]) {
        DBXTEAMRemovedStatus *removed = [DBXTEAMRemovedStatusSerializer deserialize:valueDict];
        return [[DBXTEAMTeamMemberStatus alloc] initWithRemoved:removed];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
