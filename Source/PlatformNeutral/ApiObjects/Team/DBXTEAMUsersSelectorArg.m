///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMUsersSelectorArg.h"

@implementation DBXTEAMUsersSelectorArg 

@synthesize teamMemberIds = _teamMemberIds;
@synthesize externalIds = _externalIds;
@synthesize emails = _emails;

- (instancetype)initWithTeamMemberIds:(NSArray<NSString *> *)teamMemberIds {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMUsersSelectorArgTeamMemberIds;
        _teamMemberIds = teamMemberIds;
    }
    return self;
}

- (instancetype)initWithExternalIds:(NSArray<NSString *> *)externalIds {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMUsersSelectorArgExternalIds;
        _externalIds = externalIds;
    }
    return self;
}

- (instancetype)initWithEmails:(NSArray<NSString *> *)emails {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMUsersSelectorArgEmails;
        _emails = emails;
    }
    return self;
}

- (BOOL)isTeamMemberIds {
    return _tag == DBXTEAMUsersSelectorArgTeamMemberIds;
}

- (BOOL)isExternalIds {
    return _tag == DBXTEAMUsersSelectorArgExternalIds;
}

- (BOOL)isEmails {
    return _tag == DBXTEAMUsersSelectorArgEmails;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMUsersSelectorArgTeamMemberIds:
           return @"DBXTEAMUsersSelectorArgTeamMemberIds";
        case DBXTEAMUsersSelectorArgExternalIds:
           return @"DBXTEAMUsersSelectorArgExternalIds";
        case DBXTEAMUsersSelectorArgEmails:
           return @"DBXTEAMUsersSelectorArgEmails";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSArray<NSString *> *)teamMemberIds {
    if (_tag != DBXTEAMUsersSelectorArgTeamMemberIds) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMUsersSelectorArgTeamMemberIds`, but was %@.", [self getTagName]];
    }
    return _teamMemberIds;
}

- (NSArray<NSString *> *)externalIds {
    if (_tag != DBXTEAMUsersSelectorArgExternalIds) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMUsersSelectorArgExternalIds`, but was %@.", [self getTagName]];
    }
    return _externalIds;
}

- (NSArray<NSString *> *)emails {
    if (_tag != DBXTEAMUsersSelectorArgEmails) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMUsersSelectorArgEmails`, but was %@.", [self getTagName]];
    }
    return _emails;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXTEAMUsersSelectorArgSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMUsersSelectorArgSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMUsersSelectorArgSerializer serialize:self] description];
}

@end


@implementation DBXTEAMUsersSelectorArgSerializer 

+ (NSDictionary *)serialize:(DBXTEAMUsersSelectorArg *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTeamMemberIds]) {
        jsonDict[@"team_member_ids"] = [DBXArraySerializer serialize:valueObj.teamMemberIds withBlock:^id(id elem) { return elem; }];
        jsonDict[@".tag"] = @"team_member_ids";
    }
    else if ([valueObj isExternalIds]) {
        jsonDict[@"external_ids"] = [DBXArraySerializer serialize:valueObj.externalIds withBlock:^id(id elem) { return elem; }];
        jsonDict[@".tag"] = @"external_ids";
    }
    else if ([valueObj isEmails]) {
        jsonDict[@"emails"] = [DBXArraySerializer serialize:valueObj.emails withBlock:^id(id elem) { return elem; }];
        jsonDict[@".tag"] = @"emails";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMUsersSelectorArg *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"team_member_ids"]) {
        NSArray<NSString *> *teamMemberIds = [DBXArraySerializer deserialize:valueDict[@"team_member_ids"] withBlock:^id(id elem) { return elem; }];
        return [[DBXTEAMUsersSelectorArg alloc] initWithTeamMemberIds:teamMemberIds];
    }
    else if ([tag isEqualToString:@"external_ids"]) {
        NSArray<NSString *> *externalIds = [DBXArraySerializer deserialize:valueDict[@"external_ids"] withBlock:^id(id elem) { return elem; }];
        return [[DBXTEAMUsersSelectorArg alloc] initWithExternalIds:externalIds];
    }
    else if ([tag isEqualToString:@"emails"]) {
        NSArray<NSString *> *emails = [DBXArraySerializer deserialize:valueDict[@"emails"] withBlock:^id(id elem) { return elem; }];
        return [[DBXTEAMUsersSelectorArg alloc] initWithEmails:emails];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
