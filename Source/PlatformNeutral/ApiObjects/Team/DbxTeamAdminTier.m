///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamAdminTier.h"

@implementation DbxTeamAdminTier 

- (instancetype)initWithTeamAdmin {
    self = [super init];
    if (self != nil) {
        _tag = TeamAdminTierTeamAdmin;
    }
    return self;
}

- (instancetype)initWithUserManagementAdmin {
    self = [super init];
    if (self != nil) {
        _tag = TeamAdminTierUserManagementAdmin;
    }
    return self;
}

- (instancetype)initWithSupportAdmin {
    self = [super init];
    if (self != nil) {
        _tag = TeamAdminTierSupportAdmin;
    }
    return self;
}

- (instancetype)initWithMemberOnly {
    self = [super init];
    if (self != nil) {
        _tag = TeamAdminTierMemberOnly;
    }
    return self;
}

- (BOOL)isTeamAdmin {
    return _tag == TeamAdminTierTeamAdmin;
}

- (BOOL)isUserManagementAdmin {
    return _tag == TeamAdminTierUserManagementAdmin;
}

- (BOOL)isSupportAdmin {
    return _tag == TeamAdminTierSupportAdmin;
}

- (BOOL)isMemberOnly {
    return _tag == TeamAdminTierMemberOnly;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamAdminTierTeamAdmin:
           return @"TeamAdminTierTeamAdmin";
        case TeamAdminTierUserManagementAdmin:
           return @"TeamAdminTierUserManagementAdmin";
        case TeamAdminTierSupportAdmin:
           return @"TeamAdminTierSupportAdmin";
        case TeamAdminTierMemberOnly:
           return @"TeamAdminTierMemberOnly";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamAdminTierSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamAdminTierSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamAdminTierSerializer serialize:self] description];
}

@end


@implementation DbxTeamAdminTierSerializer 

+ (NSDictionary *)serialize:(DbxTeamAdminTier *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTeamAdmin]) {
        jsonDict[@".tag"] = @"team_admin";
    }
    else if ([valueObj isUserManagementAdmin]) {
        jsonDict[@".tag"] = @"user_management_admin";
    }
    else if ([valueObj isSupportAdmin]) {
        jsonDict[@".tag"] = @"support_admin";
    }
    else if ([valueObj isMemberOnly]) {
        jsonDict[@".tag"] = @"member_only";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamAdminTier *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"team_admin"]) {
        return [[DbxTeamAdminTier alloc] initWithTeamAdmin];
    }
    if ([tag isEqualToString:@"user_management_admin"]) {
        return [[DbxTeamAdminTier alloc] initWithUserManagementAdmin];
    }
    if ([tag isEqualToString:@"support_admin"]) {
        return [[DbxTeamAdminTier alloc] initWithSupportAdmin];
    }
    if ([tag isEqualToString:@"member_only"]) {
        return [[DbxTeamAdminTier alloc] initWithMemberOnly];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
