///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamDesktopPlatform.h"

@implementation DbxTeamDesktopPlatform 

- (instancetype)initWithWindows {
    self = [super init];
    if (self != nil) {
        _tag = TeamDesktopPlatformWindows;
    }
    return self;
}

- (instancetype)initWithMac {
    self = [super init];
    if (self != nil) {
        _tag = TeamDesktopPlatformMac;
    }
    return self;
}

- (instancetype)initWithLinux {
    self = [super init];
    if (self != nil) {
        _tag = TeamDesktopPlatformLinux;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = TeamDesktopPlatformOther;
    }
    return self;
}

- (BOOL)isWindows {
    return _tag == TeamDesktopPlatformWindows;
}

- (BOOL)isMac {
    return _tag == TeamDesktopPlatformMac;
}

- (BOOL)isLinux {
    return _tag == TeamDesktopPlatformLinux;
}

- (BOOL)isOther {
    return _tag == TeamDesktopPlatformOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamDesktopPlatformWindows:
           return @"TeamDesktopPlatformWindows";
        case TeamDesktopPlatformMac:
           return @"TeamDesktopPlatformMac";
        case TeamDesktopPlatformLinux:
           return @"TeamDesktopPlatformLinux";
        case TeamDesktopPlatformOther:
           return @"TeamDesktopPlatformOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamDesktopPlatformSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamDesktopPlatformSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamDesktopPlatformSerializer serialize:self] description];
}

@end


@implementation DbxTeamDesktopPlatformSerializer 

+ (NSDictionary *)serialize:(DbxTeamDesktopPlatform *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isWindows]) {
        jsonDict[@".tag"] = @"windows";
    }
    else if ([valueObj isMac]) {
        jsonDict[@".tag"] = @"mac";
    }
    else if ([valueObj isLinux]) {
        jsonDict[@".tag"] = @"linux";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamDesktopPlatform *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"windows"]) {
        return [[DbxTeamDesktopPlatform alloc] initWithWindows];
    }
    if ([tag isEqualToString:@"mac"]) {
        return [[DbxTeamDesktopPlatform alloc] initWithMac];
    }
    if ([tag isEqualToString:@"linux"]) {
        return [[DbxTeamDesktopPlatform alloc] initWithLinux];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamDesktopPlatform alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
