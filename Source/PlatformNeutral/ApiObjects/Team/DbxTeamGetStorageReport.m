///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamBaseDfbReport.h"
#import "DbxTeamGetStorageReport.h"
#import "DbxTeamStorageBucket.h"

@implementation DbxTeamGetStorageReport 

- (instancetype)initWithStartDate:(NSString *)startDate totalUsage:(NSArray<NSNumber *> *)totalUsage sharedUsage:(NSArray<NSNumber *> *)sharedUsage unsharedUsage:(NSArray<NSNumber *> *)unsharedUsage sharedFolders:(NSArray<NSNumber *> *)sharedFolders memberStorageMap:(NSArray<NSArray<DbxTeamStorageBucket *> *> *)memberStorageMap {
    [DbxStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](totalUsage);
    [DbxStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](sharedUsage);
    [DbxStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](unsharedUsage);
    [DbxStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](sharedFolders);
    [DbxStoneValidators arrayValidator:nil maxItems:nil itemValidator:[DbxStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](memberStorageMap);

    self = [super initWithStartDate:startDate];
    if (self != nil) {
        _totalUsage = totalUsage;
        _sharedUsage = sharedUsage;
        _unsharedUsage = unsharedUsage;
        _sharedFolders = sharedFolders;
        _memberStorageMap = memberStorageMap;
    }
    return self;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamGetStorageReportSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamGetStorageReportSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamGetStorageReportSerializer serialize:self] description];
}

@end


@implementation DbxTeamGetStorageReportSerializer 

+ (NSDictionary *)serialize:(DbxTeamGetStorageReport *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    jsonDict[@"start_date"] = [DbxStringSerializer serialize:valueObj.startDate];
    jsonDict[@"total_usage"] = [DbxArraySerializer serialize:valueObj.totalUsage withBlock:^id(id elem) { return [DbxNSNumberSerializer serialize:elem]; }];
    jsonDict[@"shared_usage"] = [DbxArraySerializer serialize:valueObj.sharedUsage withBlock:^id(id elem) { return [DbxNSNumberSerializer serialize:elem]; }];
    jsonDict[@"unshared_usage"] = [DbxArraySerializer serialize:valueObj.unsharedUsage withBlock:^id(id elem) { return [DbxNSNumberSerializer serialize:elem]; }];
    jsonDict[@"shared_folders"] = [DbxArraySerializer serialize:valueObj.sharedFolders withBlock:^id(id elem) { return [DbxNSNumberSerializer serialize:elem]; }];
    jsonDict[@"member_storage_map"] = [DbxArraySerializer serialize:valueObj.memberStorageMap withBlock:^id(id elem) { return [DbxArraySerializer serialize:elem withBlock:^id(id elem) { return [DbxTeamStorageBucketSerializer serialize:elem]; }]; }];

    return jsonDict;
}

+ (DbxTeamGetStorageReport *)deserialize:(NSDictionary *)valueDict {
    NSString *startDate = [DbxStringSerializer deserialize:valueDict[@"start_date"]];
    NSArray<NSNumber *> *totalUsage = [DbxArraySerializer deserialize:valueDict[@"total_usage"] withBlock:^id(id elem) { return [DbxNSNumberSerializer deserialize:elem]; }];
    NSArray<NSNumber *> *sharedUsage = [DbxArraySerializer deserialize:valueDict[@"shared_usage"] withBlock:^id(id elem) { return [DbxNSNumberSerializer deserialize:elem]; }];
    NSArray<NSNumber *> *unsharedUsage = [DbxArraySerializer deserialize:valueDict[@"unshared_usage"] withBlock:^id(id elem) { return [DbxNSNumberSerializer deserialize:elem]; }];
    NSArray<NSNumber *> *sharedFolders = [DbxArraySerializer deserialize:valueDict[@"shared_folders"] withBlock:^id(id elem) { return [DbxNSNumberSerializer deserialize:elem]; }];
    NSArray<NSArray<DbxTeamStorageBucket *> *> *memberStorageMap = [DbxArraySerializer deserialize:valueDict[@"member_storage_map"] withBlock:^id(id elem) { return [DbxArraySerializer deserialize:elem withBlock:^id(id elem) { return [DbxTeamStorageBucketSerializer deserialize:elem]; }]; }];

    return [[DbxTeamGetStorageReport alloc] initWithStartDate:startDate totalUsage:totalUsage sharedUsage:sharedUsage unsharedUsage:unsharedUsage sharedFolders:sharedFolders memberStorageMap:memberStorageMap];
}

@end
