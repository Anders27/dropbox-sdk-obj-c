///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamGroupAccessType.h"

@implementation DbxTeamGroupAccessType 

- (instancetype)initWithMember {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupAccessTypeTag)TeamGroupAccessTypeMember;
    }
    return self;
}

- (instancetype)initWithOwner {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupAccessTypeTag)TeamGroupAccessTypeOwner;
    }
    return self;
}

- (BOOL)isMember {
    return _tag == (TeamGroupAccessTypeTag)TeamGroupAccessTypeMember;
}

- (BOOL)isOwner {
    return _tag == (TeamGroupAccessTypeTag)TeamGroupAccessTypeOwner;
}

- (NSString *)getTagName {
    if (_tag == (TeamGroupAccessTypeTag)TeamGroupAccessTypeMember) {
        return @"(TeamGroupAccessTypeTag)TeamGroupAccessTypeMember";
    }
    if (_tag == (TeamGroupAccessTypeTag)TeamGroupAccessTypeOwner) {
        return @"(TeamGroupAccessTypeTag)TeamGroupAccessTypeOwner";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamGroupAccessTypeSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamGroupAccessTypeSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamGroupAccessTypeSerializer serialize:self] description];
}

@end


@implementation DbxTeamGroupAccessTypeSerializer 

+ (NSDictionary *)serialize:(DbxTeamGroupAccessType *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isMember]) {
        jsonDict[@".tag"] = @"member";
    }
    else if ([valueObj isOwner]) {
        jsonDict[@".tag"] = @"owner";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamGroupAccessType *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"member"]) {
        return [[DbxTeamGroupAccessType alloc] initWithMember];
    }
    if ([tag isEqualToString:@"owner"]) {
        return [[DbxTeamGroupAccessType alloc] initWithOwner];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
