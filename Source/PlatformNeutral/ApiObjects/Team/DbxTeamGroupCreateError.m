///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamGroupCreateError.h"

@implementation DbxTeamGroupCreateError 

- (instancetype)initWithGroupNameAlreadyUsed {
    self = [super init];
    if (self != nil) {
        _tag = TeamGroupCreateErrorGroupNameAlreadyUsed;
    }
    return self;
}

- (instancetype)initWithGroupNameInvalid {
    self = [super init];
    if (self != nil) {
        _tag = TeamGroupCreateErrorGroupNameInvalid;
    }
    return self;
}

- (instancetype)initWithExternalIdAlreadyInUse {
    self = [super init];
    if (self != nil) {
        _tag = TeamGroupCreateErrorExternalIdAlreadyInUse;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = TeamGroupCreateErrorOther;
    }
    return self;
}

- (BOOL)isGroupNameAlreadyUsed {
    return _tag == TeamGroupCreateErrorGroupNameAlreadyUsed;
}

- (BOOL)isGroupNameInvalid {
    return _tag == TeamGroupCreateErrorGroupNameInvalid;
}

- (BOOL)isExternalIdAlreadyInUse {
    return _tag == TeamGroupCreateErrorExternalIdAlreadyInUse;
}

- (BOOL)isOther {
    return _tag == TeamGroupCreateErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamGroupCreateErrorGroupNameAlreadyUsed:
           return @"TeamGroupCreateErrorGroupNameAlreadyUsed";
        case TeamGroupCreateErrorGroupNameInvalid:
           return @"TeamGroupCreateErrorGroupNameInvalid";
        case TeamGroupCreateErrorExternalIdAlreadyInUse:
           return @"TeamGroupCreateErrorExternalIdAlreadyInUse";
        case TeamGroupCreateErrorOther:
           return @"TeamGroupCreateErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamGroupCreateErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamGroupCreateErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamGroupCreateErrorSerializer serialize:self] description];
}

@end


@implementation DbxTeamGroupCreateErrorSerializer 

+ (NSDictionary *)serialize:(DbxTeamGroupCreateError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isGroupNameAlreadyUsed]) {
        jsonDict[@".tag"] = @"group_name_already_used";
    }
    else if ([valueObj isGroupNameInvalid]) {
        jsonDict[@".tag"] = @"group_name_invalid";
    }
    else if ([valueObj isExternalIdAlreadyInUse]) {
        jsonDict[@".tag"] = @"external_id_already_in_use";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamGroupCreateError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"group_name_already_used"]) {
        return [[DbxTeamGroupCreateError alloc] initWithGroupNameAlreadyUsed];
    }
    if ([tag isEqualToString:@"group_name_invalid"]) {
        return [[DbxTeamGroupCreateError alloc] initWithGroupNameInvalid];
    }
    if ([tag isEqualToString:@"external_id_already_in_use"]) {
        return [[DbxTeamGroupCreateError alloc] initWithExternalIdAlreadyInUse];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamGroupCreateError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
