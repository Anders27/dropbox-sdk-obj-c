///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamGroupMemberSelectorError.h"
#import "DbxTeamGroupSelectorError.h"

@implementation DbxTeamGroupMemberSelectorError 

- (instancetype)initWithGroupNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupMemberSelectorErrorTag)TeamGroupMemberSelectorErrorGroupNotFound;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupMemberSelectorErrorTag)TeamGroupMemberSelectorErrorOther;
    }
    return self;
}

- (instancetype)initWithMemberNotInGroup {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupMemberSelectorErrorTag)TeamGroupMemberSelectorErrorMemberNotInGroup;
    }
    return self;
}

- (BOOL)isGroupNotFound {
    return _tag == (TeamGroupMemberSelectorErrorTag)TeamGroupMemberSelectorErrorGroupNotFound;
}

- (BOOL)isOther {
    return _tag == (TeamGroupMemberSelectorErrorTag)TeamGroupMemberSelectorErrorOther;
}

- (BOOL)isMemberNotInGroup {
    return _tag == (TeamGroupMemberSelectorErrorTag)TeamGroupMemberSelectorErrorMemberNotInGroup;
}

- (NSString *)getTagName {
    if (_tag == (TeamGroupMemberSelectorErrorTag)TeamGroupMemberSelectorErrorGroupNotFound) {
        return @"(TeamGroupMemberSelectorErrorTag)TeamGroupMemberSelectorErrorGroupNotFound";
    }
    if (_tag == (TeamGroupMemberSelectorErrorTag)TeamGroupMemberSelectorErrorOther) {
        return @"(TeamGroupMemberSelectorErrorTag)TeamGroupMemberSelectorErrorOther";
    }
    if (_tag == (TeamGroupMemberSelectorErrorTag)TeamGroupMemberSelectorErrorMemberNotInGroup) {
        return @"(TeamGroupMemberSelectorErrorTag)TeamGroupMemberSelectorErrorMemberNotInGroup";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamGroupMemberSelectorErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamGroupMemberSelectorErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamGroupMemberSelectorErrorSerializer serialize:self] description];
}

@end


@implementation DbxTeamGroupMemberSelectorErrorSerializer 

+ (NSDictionary *)serialize:(DbxTeamGroupMemberSelectorError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isGroupNotFound]) {
        jsonDict[@".tag"] = @"group_not_found";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isMemberNotInGroup]) {
        jsonDict[@".tag"] = @"member_not_in_group";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamGroupMemberSelectorError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"group_not_found"]) {
        return [[DbxTeamGroupMemberSelectorError alloc] initWithGroupNotFound];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamGroupMemberSelectorError alloc] initWithOther];
    }
    if ([tag isEqualToString:@"member_not_in_group"]) {
        return [[DbxTeamGroupMemberSelectorError alloc] initWithMemberNotInGroup];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
