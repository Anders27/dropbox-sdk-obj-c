///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamGroupMembersRemoveError.h"
#import "DbxTeamGroupMembersSelectorError.h"

@implementation DbxTeamGroupMembersRemoveError 

- (instancetype)initWithGroupNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorGroupNotFound;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorOther;
    }
    return self;
}

- (instancetype)initWithMemberNotInGroup {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorMemberNotInGroup;
    }
    return self;
}

- (instancetype)initWithGroupNotInTeam {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorGroupNotInTeam;
    }
    return self;
}

- (BOOL)isGroupNotFound {
    return _tag == (TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorGroupNotFound;
}

- (BOOL)isOther {
    return _tag == (TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorOther;
}

- (BOOL)isMemberNotInGroup {
    return _tag == (TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorMemberNotInGroup;
}

- (BOOL)isGroupNotInTeam {
    return _tag == (TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorGroupNotInTeam;
}

- (NSString *)getTagName {
    if (_tag == (TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorGroupNotFound) {
        return @"(TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorGroupNotFound";
    }
    if (_tag == (TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorOther) {
        return @"(TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorOther";
    }
    if (_tag == (TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorMemberNotInGroup) {
        return @"(TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorMemberNotInGroup";
    }
    if (_tag == (TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorGroupNotInTeam) {
        return @"(TeamGroupMembersRemoveErrorTag)TeamGroupMembersRemoveErrorGroupNotInTeam";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamGroupMembersRemoveErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamGroupMembersRemoveErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamGroupMembersRemoveErrorSerializer serialize:self] description];
}

@end


@implementation DbxTeamGroupMembersRemoveErrorSerializer 

+ (NSDictionary *)serialize:(DbxTeamGroupMembersRemoveError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isGroupNotFound]) {
        jsonDict[@".tag"] = @"group_not_found";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isMemberNotInGroup]) {
        jsonDict[@".tag"] = @"member_not_in_group";
    }
    else if ([valueObj isGroupNotInTeam]) {
        jsonDict[@".tag"] = @"group_not_in_team";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamGroupMembersRemoveError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"group_not_found"]) {
        return [[DbxTeamGroupMembersRemoveError alloc] initWithGroupNotFound];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamGroupMembersRemoveError alloc] initWithOther];
    }
    if ([tag isEqualToString:@"member_not_in_group"]) {
        return [[DbxTeamGroupMembersRemoveError alloc] initWithMemberNotInGroup];
    }
    if ([tag isEqualToString:@"group_not_in_team"]) {
        return [[DbxTeamGroupMembersRemoveError alloc] initWithGroupNotInTeam];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
