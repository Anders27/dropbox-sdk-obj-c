///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamGroupFullInfo.h"
#import "DbxTeamGroupsGetInfoItem.h"

@implementation DbxTeamGroupsGetInfoItem 

- (instancetype)initWithIdNotFound:(NSString *)idNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupsGetInfoItemTag)TeamGroupsGetInfoItemIdNotFound;
        _idNotFound = idNotFound;
    }
    return self;
}

- (instancetype)initWithGroupInfo:(DbxTeamGroupFullInfo *)groupInfo {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupsGetInfoItemTag)TeamGroupsGetInfoItemGroupInfo;
        _groupInfo = groupInfo;
    }
    return self;
}

- (BOOL)isIdNotFound {
    return _tag == (TeamGroupsGetInfoItemTag)TeamGroupsGetInfoItemIdNotFound;
}

- (BOOL)isGroupInfo {
    return _tag == (TeamGroupsGetInfoItemTag)TeamGroupsGetInfoItemGroupInfo;
}

- (NSString *)getTagName {
    if (_tag == (TeamGroupsGetInfoItemTag)TeamGroupsGetInfoItemIdNotFound) {
        return @"(TeamGroupsGetInfoItemTag)TeamGroupsGetInfoItemIdNotFound";
    }
    if (_tag == (TeamGroupsGetInfoItemTag)TeamGroupsGetInfoItemGroupInfo) {
        return @"(TeamGroupsGetInfoItemTag)TeamGroupsGetInfoItemGroupInfo";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)idNotFound {
    if (_tag != (TeamGroupsGetInfoItemTag)TeamGroupsGetInfoItemIdNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (TeamGroupsGetInfoItemTag)TeamGroupsGetInfoItemIdNotFound, but was %@.", [self getTagName]];
    }
    return _idNotFound;
}

- (DbxTeamGroupFullInfo *)groupInfo {
    if (_tag != (TeamGroupsGetInfoItemTag)TeamGroupsGetInfoItemGroupInfo) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (TeamGroupsGetInfoItemTag)TeamGroupsGetInfoItemGroupInfo, but was %@.", [self getTagName]];
    }
    return _groupInfo;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamGroupsGetInfoItemSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamGroupsGetInfoItemSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamGroupsGetInfoItemSerializer serialize:self] description];
}

@end


@implementation DbxTeamGroupsGetInfoItemSerializer 

+ (NSDictionary *)serialize:(DbxTeamGroupsGetInfoItem *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isIdNotFound]) {
        jsonDict[@"id_not_found"] = [DbxStringSerializer serialize:valueObj.idNotFound];
        jsonDict[@".tag"] = @"id_not_found";
    }
    else if ([valueObj isGroupInfo]) {
        jsonDict = [[DbxTeamGroupFullInfoSerializer serialize:valueObj.groupInfo] mutableCopy];
        jsonDict[@".tag"] = @"group_info";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamGroupsGetInfoItem *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"id_not_found"]) {
        NSString *idNotFound = [DbxStringSerializer deserialize:valueDict[@"id_not_found"]];
        return [[DbxTeamGroupsGetInfoItem alloc] initWithIdNotFound:idNotFound];
    }
    if ([tag isEqualToString:@"group_info"]) {
        DbxTeamGroupFullInfo *groupInfo = [DbxTeamGroupFullInfoSerializer deserialize:valueDict];
        return [[DbxTeamGroupsGetInfoItem alloc] initWithGroupInfo:groupInfo];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
