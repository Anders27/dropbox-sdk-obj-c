///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamGroupsSelector.h"

@implementation DbxTeamGroupsSelector 

- (instancetype)initWithGroupIds:(NSArray<NSString *> *)groupIds {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupsSelectorTag)TeamGroupsSelectorGroupIds;
        _groupIds = groupIds;
    }
    return self;
}

- (instancetype)initWithGroupExternalIds:(NSArray<NSString *> *)groupExternalIds {
    self = [super init];
    if (self != nil) {
        _tag = (TeamGroupsSelectorTag)TeamGroupsSelectorGroupExternalIds;
        _groupExternalIds = groupExternalIds;
    }
    return self;
}

- (BOOL)isGroupIds {
    return _tag == (TeamGroupsSelectorTag)TeamGroupsSelectorGroupIds;
}

- (BOOL)isGroupExternalIds {
    return _tag == (TeamGroupsSelectorTag)TeamGroupsSelectorGroupExternalIds;
}

- (NSString *)getTagName {
    if (_tag == (TeamGroupsSelectorTag)TeamGroupsSelectorGroupIds) {
        return @"(TeamGroupsSelectorTag)TeamGroupsSelectorGroupIds";
    }
    if (_tag == (TeamGroupsSelectorTag)TeamGroupsSelectorGroupExternalIds) {
        return @"(TeamGroupsSelectorTag)TeamGroupsSelectorGroupExternalIds";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSArray<NSString *> *)groupIds {
    if (_tag != (TeamGroupsSelectorTag)TeamGroupsSelectorGroupIds) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (TeamGroupsSelectorTag)TeamGroupsSelectorGroupIds, but was %@.", [self getTagName]];
    }
    return _groupIds;
}

- (NSArray<NSString *> *)groupExternalIds {
    if (_tag != (TeamGroupsSelectorTag)TeamGroupsSelectorGroupExternalIds) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (TeamGroupsSelectorTag)TeamGroupsSelectorGroupExternalIds, but was %@.", [self getTagName]];
    }
    return _groupExternalIds;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamGroupsSelectorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamGroupsSelectorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamGroupsSelectorSerializer serialize:self] description];
}

@end


@implementation DbxTeamGroupsSelectorSerializer 

+ (NSDictionary *)serialize:(DbxTeamGroupsSelector *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isGroupIds]) {
        jsonDict[@"group_ids"] = [DbxArraySerializer serialize:valueObj.groupIds withBlock:^id(id obj) { return [DbxStringSerializer serialize:obj]; }];
        jsonDict[@".tag"] = @"group_ids";
    }
    else if ([valueObj isGroupExternalIds]) {
        jsonDict[@"group_external_ids"] = [DbxArraySerializer serialize:valueObj.groupExternalIds withBlock:^id(id obj) { return [DbxStringSerializer serialize:obj]; }];
        jsonDict[@".tag"] = @"group_external_ids";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamGroupsSelector *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"group_ids"]) {
        NSArray<NSString *> *groupIds = [DbxArraySerializer deserialize:valueDict[@"group_ids"] withBlock:^id(id obj) { return [DbxStringSerializer deserialize:obj]; }];
        return [[DbxTeamGroupsSelector alloc] initWithGroupIds:groupIds];
    }
    if ([tag isEqualToString:@"group_external_ids"]) {
        NSArray<NSString *> *groupExternalIds = [DbxArraySerializer deserialize:valueDict[@"group_external_ids"] withBlock:^id(id obj) { return [DbxStringSerializer deserialize:obj]; }];
        return [[DbxTeamGroupsSelector alloc] initWithGroupExternalIds:groupExternalIds];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
