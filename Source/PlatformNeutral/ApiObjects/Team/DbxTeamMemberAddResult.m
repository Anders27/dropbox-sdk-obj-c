///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamMemberAddResult.h"
#import "DbxTeamTeamMemberInfo.h"

@implementation DbxTeamMemberAddResult 

- (instancetype)initWithSuccess:(DbxTeamTeamMemberInfo *)success {
    self = [super init];
    if (self != nil) {
        _tag = TeamMemberAddResultSuccess;
        _success = success;
    }
    return self;
}

- (instancetype)initWithTeamLicenseLimit:(NSString *)teamLicenseLimit {
    self = [super init];
    if (self != nil) {
        _tag = TeamMemberAddResultTeamLicenseLimit;
        _teamLicenseLimit = teamLicenseLimit;
    }
    return self;
}

- (instancetype)initWithFreeTeamMemberLimitReached:(NSString *)freeTeamMemberLimitReached {
    self = [super init];
    if (self != nil) {
        _tag = TeamMemberAddResultFreeTeamMemberLimitReached;
        _freeTeamMemberLimitReached = freeTeamMemberLimitReached;
    }
    return self;
}

- (instancetype)initWithUserAlreadyOnTeam:(NSString *)userAlreadyOnTeam {
    self = [super init];
    if (self != nil) {
        _tag = TeamMemberAddResultUserAlreadyOnTeam;
        _userAlreadyOnTeam = userAlreadyOnTeam;
    }
    return self;
}

- (instancetype)initWithUserOnAnotherTeam:(NSString *)userOnAnotherTeam {
    self = [super init];
    if (self != nil) {
        _tag = TeamMemberAddResultUserOnAnotherTeam;
        _userOnAnotherTeam = userOnAnotherTeam;
    }
    return self;
}

- (instancetype)initWithUserAlreadyPaired:(NSString *)userAlreadyPaired {
    self = [super init];
    if (self != nil) {
        _tag = TeamMemberAddResultUserAlreadyPaired;
        _userAlreadyPaired = userAlreadyPaired;
    }
    return self;
}

- (instancetype)initWithUserMigrationFailed:(NSString *)userMigrationFailed {
    self = [super init];
    if (self != nil) {
        _tag = TeamMemberAddResultUserMigrationFailed;
        _userMigrationFailed = userMigrationFailed;
    }
    return self;
}

- (instancetype)initWithDuplicateExternalMemberId:(NSString *)duplicateExternalMemberId {
    self = [super init];
    if (self != nil) {
        _tag = TeamMemberAddResultDuplicateExternalMemberId;
        _duplicateExternalMemberId = duplicateExternalMemberId;
    }
    return self;
}

- (instancetype)initWithUserCreationFailed:(NSString *)userCreationFailed {
    self = [super init];
    if (self != nil) {
        _tag = TeamMemberAddResultUserCreationFailed;
        _userCreationFailed = userCreationFailed;
    }
    return self;
}

- (BOOL)isSuccess {
    return _tag == TeamMemberAddResultSuccess;
}

- (BOOL)isTeamLicenseLimit {
    return _tag == TeamMemberAddResultTeamLicenseLimit;
}

- (BOOL)isFreeTeamMemberLimitReached {
    return _tag == TeamMemberAddResultFreeTeamMemberLimitReached;
}

- (BOOL)isUserAlreadyOnTeam {
    return _tag == TeamMemberAddResultUserAlreadyOnTeam;
}

- (BOOL)isUserOnAnotherTeam {
    return _tag == TeamMemberAddResultUserOnAnotherTeam;
}

- (BOOL)isUserAlreadyPaired {
    return _tag == TeamMemberAddResultUserAlreadyPaired;
}

- (BOOL)isUserMigrationFailed {
    return _tag == TeamMemberAddResultUserMigrationFailed;
}

- (BOOL)isDuplicateExternalMemberId {
    return _tag == TeamMemberAddResultDuplicateExternalMemberId;
}

- (BOOL)isUserCreationFailed {
    return _tag == TeamMemberAddResultUserCreationFailed;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamMemberAddResultSuccess:
           return @"TeamMemberAddResultSuccess";
        case TeamMemberAddResultTeamLicenseLimit:
           return @"TeamMemberAddResultTeamLicenseLimit";
        case TeamMemberAddResultFreeTeamMemberLimitReached:
           return @"TeamMemberAddResultFreeTeamMemberLimitReached";
        case TeamMemberAddResultUserAlreadyOnTeam:
           return @"TeamMemberAddResultUserAlreadyOnTeam";
        case TeamMemberAddResultUserOnAnotherTeam:
           return @"TeamMemberAddResultUserOnAnotherTeam";
        case TeamMemberAddResultUserAlreadyPaired:
           return @"TeamMemberAddResultUserAlreadyPaired";
        case TeamMemberAddResultUserMigrationFailed:
           return @"TeamMemberAddResultUserMigrationFailed";
        case TeamMemberAddResultDuplicateExternalMemberId:
           return @"TeamMemberAddResultDuplicateExternalMemberId";
        case TeamMemberAddResultUserCreationFailed:
           return @"TeamMemberAddResultUserCreationFailed";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxTeamTeamMemberInfo *)success {
    if (_tag != TeamMemberAddResultSuccess) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMemberAddResultSuccess, but was %@.", [self getTagName]];
    }
    return _success;
}

- (NSString *)teamLicenseLimit {
    if (_tag != TeamMemberAddResultTeamLicenseLimit) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMemberAddResultTeamLicenseLimit, but was %@.", [self getTagName]];
    }
    return _teamLicenseLimit;
}

- (NSString *)freeTeamMemberLimitReached {
    if (_tag != TeamMemberAddResultFreeTeamMemberLimitReached) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMemberAddResultFreeTeamMemberLimitReached, but was %@.", [self getTagName]];
    }
    return _freeTeamMemberLimitReached;
}

- (NSString *)userAlreadyOnTeam {
    if (_tag != TeamMemberAddResultUserAlreadyOnTeam) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMemberAddResultUserAlreadyOnTeam, but was %@.", [self getTagName]];
    }
    return _userAlreadyOnTeam;
}

- (NSString *)userOnAnotherTeam {
    if (_tag != TeamMemberAddResultUserOnAnotherTeam) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMemberAddResultUserOnAnotherTeam, but was %@.", [self getTagName]];
    }
    return _userOnAnotherTeam;
}

- (NSString *)userAlreadyPaired {
    if (_tag != TeamMemberAddResultUserAlreadyPaired) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMemberAddResultUserAlreadyPaired, but was %@.", [self getTagName]];
    }
    return _userAlreadyPaired;
}

- (NSString *)userMigrationFailed {
    if (_tag != TeamMemberAddResultUserMigrationFailed) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMemberAddResultUserMigrationFailed, but was %@.", [self getTagName]];
    }
    return _userMigrationFailed;
}

- (NSString *)duplicateExternalMemberId {
    if (_tag != TeamMemberAddResultDuplicateExternalMemberId) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMemberAddResultDuplicateExternalMemberId, but was %@.", [self getTagName]];
    }
    return _duplicateExternalMemberId;
}

- (NSString *)userCreationFailed {
    if (_tag != TeamMemberAddResultUserCreationFailed) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMemberAddResultUserCreationFailed, but was %@.", [self getTagName]];
    }
    return _userCreationFailed;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamMemberAddResultSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamMemberAddResultSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamMemberAddResultSerializer serialize:self] description];
}

@end


@implementation DbxTeamMemberAddResultSerializer 

+ (NSDictionary *)serialize:(DbxTeamMemberAddResult *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isSuccess]) {
        jsonDict = [[DbxTeamTeamMemberInfoSerializer serialize:valueObj.success] mutableCopy];
        jsonDict[@".tag"] = @"success";
    }
    else if ([valueObj isTeamLicenseLimit]) {
        jsonDict[@"team_license_limit"] = valueObj.teamLicenseLimit;
        jsonDict[@".tag"] = @"team_license_limit";
    }
    else if ([valueObj isFreeTeamMemberLimitReached]) {
        jsonDict[@"free_team_member_limit_reached"] = valueObj.freeTeamMemberLimitReached;
        jsonDict[@".tag"] = @"free_team_member_limit_reached";
    }
    else if ([valueObj isUserAlreadyOnTeam]) {
        jsonDict[@"user_already_on_team"] = valueObj.userAlreadyOnTeam;
        jsonDict[@".tag"] = @"user_already_on_team";
    }
    else if ([valueObj isUserOnAnotherTeam]) {
        jsonDict[@"user_on_another_team"] = valueObj.userOnAnotherTeam;
        jsonDict[@".tag"] = @"user_on_another_team";
    }
    else if ([valueObj isUserAlreadyPaired]) {
        jsonDict[@"user_already_paired"] = valueObj.userAlreadyPaired;
        jsonDict[@".tag"] = @"user_already_paired";
    }
    else if ([valueObj isUserMigrationFailed]) {
        jsonDict[@"user_migration_failed"] = valueObj.userMigrationFailed;
        jsonDict[@".tag"] = @"user_migration_failed";
    }
    else if ([valueObj isDuplicateExternalMemberId]) {
        jsonDict[@"duplicate_external_member_id"] = valueObj.duplicateExternalMemberId;
        jsonDict[@".tag"] = @"duplicate_external_member_id";
    }
    else if ([valueObj isUserCreationFailed]) {
        jsonDict[@"user_creation_failed"] = valueObj.userCreationFailed;
        jsonDict[@".tag"] = @"user_creation_failed";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamMemberAddResult *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"success"]) {
        DbxTeamTeamMemberInfo *success = [DbxTeamTeamMemberInfoSerializer deserialize:valueDict];
        return [[DbxTeamMemberAddResult alloc] initWithSuccess:success];
    }
    if ([tag isEqualToString:@"team_license_limit"]) {
        NSString *teamLicenseLimit = valueDict[@"team_license_limit"];
        return [[DbxTeamMemberAddResult alloc] initWithTeamLicenseLimit:teamLicenseLimit];
    }
    if ([tag isEqualToString:@"free_team_member_limit_reached"]) {
        NSString *freeTeamMemberLimitReached = valueDict[@"free_team_member_limit_reached"];
        return [[DbxTeamMemberAddResult alloc] initWithFreeTeamMemberLimitReached:freeTeamMemberLimitReached];
    }
    if ([tag isEqualToString:@"user_already_on_team"]) {
        NSString *userAlreadyOnTeam = valueDict[@"user_already_on_team"];
        return [[DbxTeamMemberAddResult alloc] initWithUserAlreadyOnTeam:userAlreadyOnTeam];
    }
    if ([tag isEqualToString:@"user_on_another_team"]) {
        NSString *userOnAnotherTeam = valueDict[@"user_on_another_team"];
        return [[DbxTeamMemberAddResult alloc] initWithUserOnAnotherTeam:userOnAnotherTeam];
    }
    if ([tag isEqualToString:@"user_already_paired"]) {
        NSString *userAlreadyPaired = valueDict[@"user_already_paired"];
        return [[DbxTeamMemberAddResult alloc] initWithUserAlreadyPaired:userAlreadyPaired];
    }
    if ([tag isEqualToString:@"user_migration_failed"]) {
        NSString *userMigrationFailed = valueDict[@"user_migration_failed"];
        return [[DbxTeamMemberAddResult alloc] initWithUserMigrationFailed:userMigrationFailed];
    }
    if ([tag isEqualToString:@"duplicate_external_member_id"]) {
        NSString *duplicateExternalMemberId = valueDict[@"duplicate_external_member_id"];
        return [[DbxTeamMemberAddResult alloc] initWithDuplicateExternalMemberId:duplicateExternalMemberId];
    }
    if ([tag isEqualToString:@"user_creation_failed"]) {
        NSString *userCreationFailed = valueDict[@"user_creation_failed"];
        return [[DbxTeamMemberAddResult alloc] initWithUserCreationFailed:userCreationFailed];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
