///
/// Auto-generated by Stone, do not modify.
///

#import "DbxAsyncLaunchResultBase.h"
#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamMemberAddResult.h"
#import "DbxTeamMembersAddLaunch.h"

@implementation DbxTeamMembersAddLaunch 

- (instancetype)initWithAsyncJobId:(NSString *)asyncJobId {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersAddLaunchAsyncJobId;
        _asyncJobId = asyncJobId;
    }
    return self;
}

- (instancetype)initWithComplete:(NSArray<DbxTeamMemberAddResult *> *)complete {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersAddLaunchComplete;
        _complete = complete;
    }
    return self;
}

- (BOOL)isAsyncJobId {
    return _tag == TeamMembersAddLaunchAsyncJobId;
}

- (BOOL)isComplete {
    return _tag == TeamMembersAddLaunchComplete;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamMembersAddLaunchAsyncJobId:
           return @"TeamMembersAddLaunchAsyncJobId";
        case TeamMembersAddLaunchComplete:
           return @"TeamMembersAddLaunchComplete";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)asyncJobId {
    if (_tag != TeamMembersAddLaunchAsyncJobId) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMembersAddLaunchAsyncJobId, but was %@.", [self getTagName]];
    }
    return _asyncJobId;
}

- (NSArray<DbxTeamMemberAddResult *> *)complete {
    if (_tag != TeamMembersAddLaunchComplete) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMembersAddLaunchComplete, but was %@.", [self getTagName]];
    }
    return _complete;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamMembersAddLaunchSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamMembersAddLaunchSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamMembersAddLaunchSerializer serialize:self] description];
}

@end


@implementation DbxTeamMembersAddLaunchSerializer 

+ (NSDictionary *)serialize:(DbxTeamMembersAddLaunch *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAsyncJobId]) {
        jsonDict[@"async_job_id"] = valueObj.asyncJobId;
        jsonDict[@".tag"] = @"async_job_id";
    }
    else if ([valueObj isComplete]) {
        jsonDict[@"complete"] = [DbxArraySerializer serialize:valueObj.complete withBlock:^id(id elem) { return [DbxTeamMemberAddResultSerializer serialize:elem]; }];
        jsonDict[@".tag"] = @"complete";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamMembersAddLaunch *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"async_job_id"]) {
        NSString *asyncJobId = valueDict[@"async_job_id"];
        return [[DbxTeamMembersAddLaunch alloc] initWithAsyncJobId:asyncJobId];
    }
    if ([tag isEqualToString:@"complete"]) {
        NSArray<DbxTeamMemberAddResult *> *complete = [DbxArraySerializer deserialize:valueDict[@"complete"] withBlock:^id(id elem) { return [DbxTeamMemberAddResultSerializer deserialize:elem]; }];
        return [[DbxTeamMembersAddLaunch alloc] initWithComplete:complete];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
