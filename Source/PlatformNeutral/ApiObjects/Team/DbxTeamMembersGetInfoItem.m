///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMMembersGetInfoItem.h"
#import "DBXTEAMTeamMemberInfo.h"

@implementation DBXTEAMMembersGetInfoItem 

- (instancetype)initWithIdNotFound:(NSString *)idNotFound {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMembersGetInfoItemIdNotFound;
        _idNotFound = idNotFound;
    }
    return self;
}

- (instancetype)initWithMemberInfo:(DBXTEAMTeamMemberInfo *)memberInfo {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMMembersGetInfoItemMemberInfo;
        _memberInfo = memberInfo;
    }
    return self;
}

- (BOOL)isIdNotFound {
    return _tag == DBXTEAMMembersGetInfoItemIdNotFound;
}

- (BOOL)isMemberInfo {
    return _tag == DBXTEAMMembersGetInfoItemMemberInfo;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMMembersGetInfoItemIdNotFound:
           return @"DBXTEAMMembersGetInfoItemIdNotFound";
        case DBXTEAMMembersGetInfoItemMemberInfo:
           return @"DBXTEAMMembersGetInfoItemMemberInfo";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSString *)idNotFound {
    if (_tag != DBXTEAMMembersGetInfoItemIdNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMembersGetInfoItemIdNotFound`, but was %@.", [self getTagName]];
    }
    return _idNotFound;
}

- (DBXTEAMTeamMemberInfo *)memberInfo {
    if (_tag != DBXTEAMMembersGetInfoItemMemberInfo) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXTEAMMembersGetInfoItemMemberInfo`, but was %@.", [self getTagName]];
    }
    return _memberInfo;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXTEAMMembersGetInfoItemSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMMembersGetInfoItemSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMMembersGetInfoItemSerializer serialize:self] description];
}

@end


@implementation DBXTEAMMembersGetInfoItemSerializer 

+ (NSDictionary *)serialize:(DBXTEAMMembersGetInfoItem *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isIdNotFound]) {
        jsonDict[@"id_not_found"] = valueObj.idNotFound;
        jsonDict[@".tag"] = @"id_not_found";
    }
    else if ([valueObj isMemberInfo]) {
        jsonDict = [[DBXTEAMTeamMemberInfoSerializer serialize:valueObj.memberInfo] mutableCopy];
        jsonDict[@".tag"] = @"member_info";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMMembersGetInfoItem *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"id_not_found"]) {
        NSString *idNotFound = valueDict[@"id_not_found"];
        return [[DBXTEAMMembersGetInfoItem alloc] initWithIdNotFound:idNotFound];
    }
    else if ([tag isEqualToString:@"member_info"]) {
        DBXTEAMTeamMemberInfo *memberInfo = [DBXTEAMTeamMemberInfoSerializer deserialize:valueDict];
        return [[DBXTEAMMembersGetInfoItem alloc] initWithMemberInfo:memberInfo];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
