///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamMembersGetInfoItem.h"
#import "DbxTeamTeamMemberInfo.h"

@implementation DbxTeamMembersGetInfoItem 

- (instancetype)initWithIdNotFound:(NSString *)idNotFound {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersGetInfoItemIdNotFound;
        _idNotFound = idNotFound;
    }
    return self;
}

- (instancetype)initWithMemberInfo:(DbxTeamTeamMemberInfo *)memberInfo {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersGetInfoItemMemberInfo;
        _memberInfo = memberInfo;
    }
    return self;
}

- (BOOL)isIdNotFound {
    return _tag == TeamMembersGetInfoItemIdNotFound;
}

- (BOOL)isMemberInfo {
    return _tag == TeamMembersGetInfoItemMemberInfo;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamMembersGetInfoItemIdNotFound:
           return @"TeamMembersGetInfoItemIdNotFound";
        case TeamMembersGetInfoItemMemberInfo:
           return @"TeamMembersGetInfoItemMemberInfo";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)idNotFound {
    if (_tag != TeamMembersGetInfoItemIdNotFound) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMembersGetInfoItemIdNotFound, but was %@.", [self getTagName]];
    }
    return _idNotFound;
}

- (DbxTeamTeamMemberInfo *)memberInfo {
    if (_tag != TeamMembersGetInfoItemMemberInfo) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamMembersGetInfoItemMemberInfo, but was %@.", [self getTagName]];
    }
    return _memberInfo;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamMembersGetInfoItemSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamMembersGetInfoItemSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamMembersGetInfoItemSerializer serialize:self] description];
}

@end


@implementation DbxTeamMembersGetInfoItemSerializer 

+ (NSDictionary *)serialize:(DbxTeamMembersGetInfoItem *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isIdNotFound]) {
        jsonDict[@"id_not_found"] = valueObj.idNotFound;
        jsonDict[@".tag"] = @"id_not_found";
    }
    else if ([valueObj isMemberInfo]) {
        jsonDict = [[DbxTeamTeamMemberInfoSerializer serialize:valueObj.memberInfo] mutableCopy];
        jsonDict[@".tag"] = @"member_info";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamMembersGetInfoItem *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"id_not_found"]) {
        NSString *idNotFound = valueDict[@"id_not_found"];
        return [[DbxTeamMembersGetInfoItem alloc] initWithIdNotFound:idNotFound];
    }
    if ([tag isEqualToString:@"member_info"]) {
        DbxTeamTeamMemberInfo *memberInfo = [DbxTeamTeamMemberInfoSerializer deserialize:valueDict];
        return [[DbxTeamMembersGetInfoItem alloc] initWithMemberInfo:memberInfo];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
