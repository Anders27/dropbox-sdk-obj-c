///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamMembersRecoverError.h"
#import "DbxTeamUserSelectorError.h"

@implementation DbxTeamMembersRecoverError 

- (instancetype)initWithUserNotFound {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRecoverErrorUserNotFound;
    }
    return self;
}

- (instancetype)initWithUserUnrecoverable {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRecoverErrorUserUnrecoverable;
    }
    return self;
}

- (instancetype)initWithUserNotInTeam {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRecoverErrorUserNotInTeam;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRecoverErrorOther;
    }
    return self;
}

- (BOOL)isUserNotFound {
    return _tag == TeamMembersRecoverErrorUserNotFound;
}

- (BOOL)isUserUnrecoverable {
    return _tag == TeamMembersRecoverErrorUserUnrecoverable;
}

- (BOOL)isUserNotInTeam {
    return _tag == TeamMembersRecoverErrorUserNotInTeam;
}

- (BOOL)isOther {
    return _tag == TeamMembersRecoverErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamMembersRecoverErrorUserNotFound:
           return @"TeamMembersRecoverErrorUserNotFound";
        case TeamMembersRecoverErrorUserUnrecoverable:
           return @"TeamMembersRecoverErrorUserUnrecoverable";
        case TeamMembersRecoverErrorUserNotInTeam:
           return @"TeamMembersRecoverErrorUserNotInTeam";
        case TeamMembersRecoverErrorOther:
           return @"TeamMembersRecoverErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamMembersRecoverErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamMembersRecoverErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamMembersRecoverErrorSerializer serialize:self] description];
}

@end


@implementation DbxTeamMembersRecoverErrorSerializer 

+ (NSDictionary *)serialize:(DbxTeamMembersRecoverError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserNotFound]) {
        jsonDict[@".tag"] = @"user_not_found";
    }
    else if ([valueObj isUserUnrecoverable]) {
        jsonDict[@".tag"] = @"user_unrecoverable";
    }
    else if ([valueObj isUserNotInTeam]) {
        jsonDict[@".tag"] = @"user_not_in_team";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamMembersRecoverError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_not_found"]) {
        return [[DbxTeamMembersRecoverError alloc] initWithUserNotFound];
    }
    if ([tag isEqualToString:@"user_unrecoverable"]) {
        return [[DbxTeamMembersRecoverError alloc] initWithUserUnrecoverable];
    }
    if ([tag isEqualToString:@"user_not_in_team"]) {
        return [[DbxTeamMembersRecoverError alloc] initWithUserNotInTeam];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamMembersRecoverError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
