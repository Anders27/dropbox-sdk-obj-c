///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamMembersDeactivateError.h"
#import "DbxTeamMembersRemoveError.h"

@implementation DbxTeamMembersRemoveError 

- (instancetype)initWithUserNotFound {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorUserNotFound;
    }
    return self;
}

- (instancetype)initWithUserNotInTeam {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorUserNotInTeam;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorOther;
    }
    return self;
}

- (instancetype)initWithRemoveLastAdmin {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorRemoveLastAdmin;
    }
    return self;
}

- (instancetype)initWithRemovedAndTransferDestShouldDiffer {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorRemovedAndTransferDestShouldDiffer;
    }
    return self;
}

- (instancetype)initWithRemovedAndTransferAdminShouldDiffer {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorRemovedAndTransferAdminShouldDiffer;
    }
    return self;
}

- (instancetype)initWithTransferDestUserNotFound {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorTransferDestUserNotFound;
    }
    return self;
}

- (instancetype)initWithTransferDestUserNotInTeam {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorTransferDestUserNotInTeam;
    }
    return self;
}

- (instancetype)initWithTransferAdminUserNotFound {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorTransferAdminUserNotFound;
    }
    return self;
}

- (instancetype)initWithTransferAdminUserNotInTeam {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorTransferAdminUserNotInTeam;
    }
    return self;
}

- (instancetype)initWithUnspecifiedTransferAdminId {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorUnspecifiedTransferAdminId;
    }
    return self;
}

- (instancetype)initWithTransferAdminIsNotAdmin {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorTransferAdminIsNotAdmin;
    }
    return self;
}

- (instancetype)initWithCannotKeepAccountAndTransfer {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorCannotKeepAccountAndTransfer;
    }
    return self;
}

- (instancetype)initWithCannotKeepAccountAndDeleteData {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorCannotKeepAccountAndDeleteData;
    }
    return self;
}

- (instancetype)initWithEmailAddressTooLongToBeDisabled {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersRemoveErrorEmailAddressTooLongToBeDisabled;
    }
    return self;
}

- (BOOL)isUserNotFound {
    return _tag == TeamMembersRemoveErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
    return _tag == TeamMembersRemoveErrorUserNotInTeam;
}

- (BOOL)isOther {
    return _tag == TeamMembersRemoveErrorOther;
}

- (BOOL)isRemoveLastAdmin {
    return _tag == TeamMembersRemoveErrorRemoveLastAdmin;
}

- (BOOL)isRemovedAndTransferDestShouldDiffer {
    return _tag == TeamMembersRemoveErrorRemovedAndTransferDestShouldDiffer;
}

- (BOOL)isRemovedAndTransferAdminShouldDiffer {
    return _tag == TeamMembersRemoveErrorRemovedAndTransferAdminShouldDiffer;
}

- (BOOL)isTransferDestUserNotFound {
    return _tag == TeamMembersRemoveErrorTransferDestUserNotFound;
}

- (BOOL)isTransferDestUserNotInTeam {
    return _tag == TeamMembersRemoveErrorTransferDestUserNotInTeam;
}

- (BOOL)isTransferAdminUserNotFound {
    return _tag == TeamMembersRemoveErrorTransferAdminUserNotFound;
}

- (BOOL)isTransferAdminUserNotInTeam {
    return _tag == TeamMembersRemoveErrorTransferAdminUserNotInTeam;
}

- (BOOL)isUnspecifiedTransferAdminId {
    return _tag == TeamMembersRemoveErrorUnspecifiedTransferAdminId;
}

- (BOOL)isTransferAdminIsNotAdmin {
    return _tag == TeamMembersRemoveErrorTransferAdminIsNotAdmin;
}

- (BOOL)isCannotKeepAccountAndTransfer {
    return _tag == TeamMembersRemoveErrorCannotKeepAccountAndTransfer;
}

- (BOOL)isCannotKeepAccountAndDeleteData {
    return _tag == TeamMembersRemoveErrorCannotKeepAccountAndDeleteData;
}

- (BOOL)isEmailAddressTooLongToBeDisabled {
    return _tag == TeamMembersRemoveErrorEmailAddressTooLongToBeDisabled;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamMembersRemoveErrorUserNotFound:
           return @"TeamMembersRemoveErrorUserNotFound";
        case TeamMembersRemoveErrorUserNotInTeam:
           return @"TeamMembersRemoveErrorUserNotInTeam";
        case TeamMembersRemoveErrorOther:
           return @"TeamMembersRemoveErrorOther";
        case TeamMembersRemoveErrorRemoveLastAdmin:
           return @"TeamMembersRemoveErrorRemoveLastAdmin";
        case TeamMembersRemoveErrorRemovedAndTransferDestShouldDiffer:
           return @"TeamMembersRemoveErrorRemovedAndTransferDestShouldDiffer";
        case TeamMembersRemoveErrorRemovedAndTransferAdminShouldDiffer:
           return @"TeamMembersRemoveErrorRemovedAndTransferAdminShouldDiffer";
        case TeamMembersRemoveErrorTransferDestUserNotFound:
           return @"TeamMembersRemoveErrorTransferDestUserNotFound";
        case TeamMembersRemoveErrorTransferDestUserNotInTeam:
           return @"TeamMembersRemoveErrorTransferDestUserNotInTeam";
        case TeamMembersRemoveErrorTransferAdminUserNotFound:
           return @"TeamMembersRemoveErrorTransferAdminUserNotFound";
        case TeamMembersRemoveErrorTransferAdminUserNotInTeam:
           return @"TeamMembersRemoveErrorTransferAdminUserNotInTeam";
        case TeamMembersRemoveErrorUnspecifiedTransferAdminId:
           return @"TeamMembersRemoveErrorUnspecifiedTransferAdminId";
        case TeamMembersRemoveErrorTransferAdminIsNotAdmin:
           return @"TeamMembersRemoveErrorTransferAdminIsNotAdmin";
        case TeamMembersRemoveErrorCannotKeepAccountAndTransfer:
           return @"TeamMembersRemoveErrorCannotKeepAccountAndTransfer";
        case TeamMembersRemoveErrorCannotKeepAccountAndDeleteData:
           return @"TeamMembersRemoveErrorCannotKeepAccountAndDeleteData";
        case TeamMembersRemoveErrorEmailAddressTooLongToBeDisabled:
           return @"TeamMembersRemoveErrorEmailAddressTooLongToBeDisabled";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamMembersRemoveErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamMembersRemoveErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamMembersRemoveErrorSerializer serialize:self] description];
}

@end


@implementation DbxTeamMembersRemoveErrorSerializer 

+ (NSDictionary *)serialize:(DbxTeamMembersRemoveError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserNotFound]) {
        jsonDict[@".tag"] = @"user_not_found";
    }
    else if ([valueObj isUserNotInTeam]) {
        jsonDict[@".tag"] = @"user_not_in_team";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isRemoveLastAdmin]) {
        jsonDict[@".tag"] = @"remove_last_admin";
    }
    else if ([valueObj isRemovedAndTransferDestShouldDiffer]) {
        jsonDict[@".tag"] = @"removed_and_transfer_dest_should_differ";
    }
    else if ([valueObj isRemovedAndTransferAdminShouldDiffer]) {
        jsonDict[@".tag"] = @"removed_and_transfer_admin_should_differ";
    }
    else if ([valueObj isTransferDestUserNotFound]) {
        jsonDict[@".tag"] = @"transfer_dest_user_not_found";
    }
    else if ([valueObj isTransferDestUserNotInTeam]) {
        jsonDict[@".tag"] = @"transfer_dest_user_not_in_team";
    }
    else if ([valueObj isTransferAdminUserNotFound]) {
        jsonDict[@".tag"] = @"transfer_admin_user_not_found";
    }
    else if ([valueObj isTransferAdminUserNotInTeam]) {
        jsonDict[@".tag"] = @"transfer_admin_user_not_in_team";
    }
    else if ([valueObj isUnspecifiedTransferAdminId]) {
        jsonDict[@".tag"] = @"unspecified_transfer_admin_id";
    }
    else if ([valueObj isTransferAdminIsNotAdmin]) {
        jsonDict[@".tag"] = @"transfer_admin_is_not_admin";
    }
    else if ([valueObj isCannotKeepAccountAndTransfer]) {
        jsonDict[@".tag"] = @"cannot_keep_account_and_transfer";
    }
    else if ([valueObj isCannotKeepAccountAndDeleteData]) {
        jsonDict[@".tag"] = @"cannot_keep_account_and_delete_data";
    }
    else if ([valueObj isEmailAddressTooLongToBeDisabled]) {
        jsonDict[@".tag"] = @"email_address_too_long_to_be_disabled";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamMembersRemoveError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_not_found"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithUserNotFound];
    }
    if ([tag isEqualToString:@"user_not_in_team"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithUserNotInTeam];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithOther];
    }
    if ([tag isEqualToString:@"remove_last_admin"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithRemoveLastAdmin];
    }
    if ([tag isEqualToString:@"removed_and_transfer_dest_should_differ"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithRemovedAndTransferDestShouldDiffer];
    }
    if ([tag isEqualToString:@"removed_and_transfer_admin_should_differ"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithRemovedAndTransferAdminShouldDiffer];
    }
    if ([tag isEqualToString:@"transfer_dest_user_not_found"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithTransferDestUserNotFound];
    }
    if ([tag isEqualToString:@"transfer_dest_user_not_in_team"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithTransferDestUserNotInTeam];
    }
    if ([tag isEqualToString:@"transfer_admin_user_not_found"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithTransferAdminUserNotFound];
    }
    if ([tag isEqualToString:@"transfer_admin_user_not_in_team"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithTransferAdminUserNotInTeam];
    }
    if ([tag isEqualToString:@"unspecified_transfer_admin_id"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithUnspecifiedTransferAdminId];
    }
    if ([tag isEqualToString:@"transfer_admin_is_not_admin"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithTransferAdminIsNotAdmin];
    }
    if ([tag isEqualToString:@"cannot_keep_account_and_transfer"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithCannotKeepAccountAndTransfer];
    }
    if ([tag isEqualToString:@"cannot_keep_account_and_delete_data"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithCannotKeepAccountAndDeleteData];
    }
    if ([tag isEqualToString:@"email_address_too_long_to_be_disabled"]) {
        return [[DbxTeamMembersRemoveError alloc] initWithEmailAddressTooLongToBeDisabled];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
