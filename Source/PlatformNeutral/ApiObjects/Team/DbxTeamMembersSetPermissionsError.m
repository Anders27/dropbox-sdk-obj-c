///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamMembersSetPermissionsError.h"
#import "DbxTeamUserSelectorError.h"

@implementation DbxTeamMembersSetPermissionsError 

- (instancetype)initWithUserNotFound {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersSetPermissionsErrorUserNotFound;
    }
    return self;
}

- (instancetype)initWithLastAdmin {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersSetPermissionsErrorLastAdmin;
    }
    return self;
}

- (instancetype)initWithUserNotInTeam {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersSetPermissionsErrorUserNotInTeam;
    }
    return self;
}

- (instancetype)initWithCannotSetPermissions {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersSetPermissionsErrorCannotSetPermissions;
    }
    return self;
}

- (instancetype)initWithTeamLicenseLimit {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersSetPermissionsErrorTeamLicenseLimit;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersSetPermissionsErrorOther;
    }
    return self;
}

- (BOOL)isUserNotFound {
    return _tag == TeamMembersSetPermissionsErrorUserNotFound;
}

- (BOOL)isLastAdmin {
    return _tag == TeamMembersSetPermissionsErrorLastAdmin;
}

- (BOOL)isUserNotInTeam {
    return _tag == TeamMembersSetPermissionsErrorUserNotInTeam;
}

- (BOOL)isCannotSetPermissions {
    return _tag == TeamMembersSetPermissionsErrorCannotSetPermissions;
}

- (BOOL)isTeamLicenseLimit {
    return _tag == TeamMembersSetPermissionsErrorTeamLicenseLimit;
}

- (BOOL)isOther {
    return _tag == TeamMembersSetPermissionsErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamMembersSetPermissionsErrorUserNotFound:
           return @"TeamMembersSetPermissionsErrorUserNotFound";
        case TeamMembersSetPermissionsErrorLastAdmin:
           return @"TeamMembersSetPermissionsErrorLastAdmin";
        case TeamMembersSetPermissionsErrorUserNotInTeam:
           return @"TeamMembersSetPermissionsErrorUserNotInTeam";
        case TeamMembersSetPermissionsErrorCannotSetPermissions:
           return @"TeamMembersSetPermissionsErrorCannotSetPermissions";
        case TeamMembersSetPermissionsErrorTeamLicenseLimit:
           return @"TeamMembersSetPermissionsErrorTeamLicenseLimit";
        case TeamMembersSetPermissionsErrorOther:
           return @"TeamMembersSetPermissionsErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamMembersSetPermissionsErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamMembersSetPermissionsErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamMembersSetPermissionsErrorSerializer serialize:self] description];
}

@end


@implementation DbxTeamMembersSetPermissionsErrorSerializer 

+ (NSDictionary *)serialize:(DbxTeamMembersSetPermissionsError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserNotFound]) {
        jsonDict[@".tag"] = @"user_not_found";
    }
    else if ([valueObj isLastAdmin]) {
        jsonDict[@".tag"] = @"last_admin";
    }
    else if ([valueObj isUserNotInTeam]) {
        jsonDict[@".tag"] = @"user_not_in_team";
    }
    else if ([valueObj isCannotSetPermissions]) {
        jsonDict[@".tag"] = @"cannot_set_permissions";
    }
    else if ([valueObj isTeamLicenseLimit]) {
        jsonDict[@".tag"] = @"team_license_limit";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamMembersSetPermissionsError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_not_found"]) {
        return [[DbxTeamMembersSetPermissionsError alloc] initWithUserNotFound];
    }
    if ([tag isEqualToString:@"last_admin"]) {
        return [[DbxTeamMembersSetPermissionsError alloc] initWithLastAdmin];
    }
    if ([tag isEqualToString:@"user_not_in_team"]) {
        return [[DbxTeamMembersSetPermissionsError alloc] initWithUserNotInTeam];
    }
    if ([tag isEqualToString:@"cannot_set_permissions"]) {
        return [[DbxTeamMembersSetPermissionsError alloc] initWithCannotSetPermissions];
    }
    if ([tag isEqualToString:@"team_license_limit"]) {
        return [[DbxTeamMembersSetPermissionsError alloc] initWithTeamLicenseLimit];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamMembersSetPermissionsError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
