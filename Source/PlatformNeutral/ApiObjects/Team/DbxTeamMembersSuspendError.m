///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamMembersDeactivateError.h"
#import "DbxTeamMembersSuspendError.h"

@implementation DbxTeamMembersSuspendError 

- (instancetype)initWithUserNotFound {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersSuspendErrorUserNotFound;
    }
    return self;
}

- (instancetype)initWithUserNotInTeam {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersSuspendErrorUserNotInTeam;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersSuspendErrorOther;
    }
    return self;
}

- (instancetype)initWithSuspendInactiveUser {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersSuspendErrorSuspendInactiveUser;
    }
    return self;
}

- (instancetype)initWithSuspendLastAdmin {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersSuspendErrorSuspendLastAdmin;
    }
    return self;
}

- (instancetype)initWithTeamLicenseLimit {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersSuspendErrorTeamLicenseLimit;
    }
    return self;
}

- (BOOL)isUserNotFound {
    return _tag == TeamMembersSuspendErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
    return _tag == TeamMembersSuspendErrorUserNotInTeam;
}

- (BOOL)isOther {
    return _tag == TeamMembersSuspendErrorOther;
}

- (BOOL)isSuspendInactiveUser {
    return _tag == TeamMembersSuspendErrorSuspendInactiveUser;
}

- (BOOL)isSuspendLastAdmin {
    return _tag == TeamMembersSuspendErrorSuspendLastAdmin;
}

- (BOOL)isTeamLicenseLimit {
    return _tag == TeamMembersSuspendErrorTeamLicenseLimit;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamMembersSuspendErrorUserNotFound:
           return @"TeamMembersSuspendErrorUserNotFound";
        case TeamMembersSuspendErrorUserNotInTeam:
           return @"TeamMembersSuspendErrorUserNotInTeam";
        case TeamMembersSuspendErrorOther:
           return @"TeamMembersSuspendErrorOther";
        case TeamMembersSuspendErrorSuspendInactiveUser:
           return @"TeamMembersSuspendErrorSuspendInactiveUser";
        case TeamMembersSuspendErrorSuspendLastAdmin:
           return @"TeamMembersSuspendErrorSuspendLastAdmin";
        case TeamMembersSuspendErrorTeamLicenseLimit:
           return @"TeamMembersSuspendErrorTeamLicenseLimit";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamMembersSuspendErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamMembersSuspendErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamMembersSuspendErrorSerializer serialize:self] description];
}

@end


@implementation DbxTeamMembersSuspendErrorSerializer 

+ (NSDictionary *)serialize:(DbxTeamMembersSuspendError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserNotFound]) {
        jsonDict[@".tag"] = @"user_not_found";
    }
    else if ([valueObj isUserNotInTeam]) {
        jsonDict[@".tag"] = @"user_not_in_team";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isSuspendInactiveUser]) {
        jsonDict[@".tag"] = @"suspend_inactive_user";
    }
    else if ([valueObj isSuspendLastAdmin]) {
        jsonDict[@".tag"] = @"suspend_last_admin";
    }
    else if ([valueObj isTeamLicenseLimit]) {
        jsonDict[@".tag"] = @"team_license_limit";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamMembersSuspendError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_not_found"]) {
        return [[DbxTeamMembersSuspendError alloc] initWithUserNotFound];
    }
    if ([tag isEqualToString:@"user_not_in_team"]) {
        return [[DbxTeamMembersSuspendError alloc] initWithUserNotInTeam];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamMembersSuspendError alloc] initWithOther];
    }
    if ([tag isEqualToString:@"suspend_inactive_user"]) {
        return [[DbxTeamMembersSuspendError alloc] initWithSuspendInactiveUser];
    }
    if ([tag isEqualToString:@"suspend_last_admin"]) {
        return [[DbxTeamMembersSuspendError alloc] initWithSuspendLastAdmin];
    }
    if ([tag isEqualToString:@"team_license_limit"]) {
        return [[DbxTeamMembersSuspendError alloc] initWithTeamLicenseLimit];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
