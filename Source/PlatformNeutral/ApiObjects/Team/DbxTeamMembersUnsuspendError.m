///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamMembersDeactivateError.h"
#import "DbxTeamMembersUnsuspendError.h"

@implementation DbxTeamMembersUnsuspendError 

- (instancetype)initWithUserNotFound {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersUnsuspendErrorUserNotFound;
    }
    return self;
}

- (instancetype)initWithUserNotInTeam {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersUnsuspendErrorUserNotInTeam;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersUnsuspendErrorOther;
    }
    return self;
}

- (instancetype)initWithUnsuspendNonSuspendedMember {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersUnsuspendErrorUnsuspendNonSuspendedMember;
    }
    return self;
}

- (instancetype)initWithTeamLicenseLimit {
    self = [super init];
    if (self != nil) {
        _tag = TeamMembersUnsuspendErrorTeamLicenseLimit;
    }
    return self;
}

- (BOOL)isUserNotFound {
    return _tag == TeamMembersUnsuspendErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
    return _tag == TeamMembersUnsuspendErrorUserNotInTeam;
}

- (BOOL)isOther {
    return _tag == TeamMembersUnsuspendErrorOther;
}

- (BOOL)isUnsuspendNonSuspendedMember {
    return _tag == TeamMembersUnsuspendErrorUnsuspendNonSuspendedMember;
}

- (BOOL)isTeamLicenseLimit {
    return _tag == TeamMembersUnsuspendErrorTeamLicenseLimit;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamMembersUnsuspendErrorUserNotFound:
           return @"TeamMembersUnsuspendErrorUserNotFound";
        case TeamMembersUnsuspendErrorUserNotInTeam:
           return @"TeamMembersUnsuspendErrorUserNotInTeam";
        case TeamMembersUnsuspendErrorOther:
           return @"TeamMembersUnsuspendErrorOther";
        case TeamMembersUnsuspendErrorUnsuspendNonSuspendedMember:
           return @"TeamMembersUnsuspendErrorUnsuspendNonSuspendedMember";
        case TeamMembersUnsuspendErrorTeamLicenseLimit:
           return @"TeamMembersUnsuspendErrorTeamLicenseLimit";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamMembersUnsuspendErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamMembersUnsuspendErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamMembersUnsuspendErrorSerializer serialize:self] description];
}

@end


@implementation DbxTeamMembersUnsuspendErrorSerializer 

+ (NSDictionary *)serialize:(DbxTeamMembersUnsuspendError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserNotFound]) {
        jsonDict[@".tag"] = @"user_not_found";
    }
    else if ([valueObj isUserNotInTeam]) {
        jsonDict[@".tag"] = @"user_not_in_team";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else if ([valueObj isUnsuspendNonSuspendedMember]) {
        jsonDict[@".tag"] = @"unsuspend_non_suspended_member";
    }
    else if ([valueObj isTeamLicenseLimit]) {
        jsonDict[@".tag"] = @"team_license_limit";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamMembersUnsuspendError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_not_found"]) {
        return [[DbxTeamMembersUnsuspendError alloc] initWithUserNotFound];
    }
    if ([tag isEqualToString:@"user_not_in_team"]) {
        return [[DbxTeamMembersUnsuspendError alloc] initWithUserNotInTeam];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamMembersUnsuspendError alloc] initWithOther];
    }
    if ([tag isEqualToString:@"unsuspend_non_suspended_member"]) {
        return [[DbxTeamMembersUnsuspendError alloc] initWithUnsuspendNonSuspendedMember];
    }
    if ([tag isEqualToString:@"team_license_limit"]) {
        return [[DbxTeamMembersUnsuspendError alloc] initWithTeamLicenseLimit];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
