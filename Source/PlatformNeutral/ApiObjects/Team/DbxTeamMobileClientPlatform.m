///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamMobileClientPlatform.h"

@implementation DbxTeamMobileClientPlatform 

- (instancetype)initWithIphone {
    self = [super init];
    if (self != nil) {
        _tag = TeamMobileClientPlatformIphone;
    }
    return self;
}

- (instancetype)initWithIpad {
    self = [super init];
    if (self != nil) {
        _tag = TeamMobileClientPlatformIpad;
    }
    return self;
}

- (instancetype)initWithAndroid {
    self = [super init];
    if (self != nil) {
        _tag = TeamMobileClientPlatformAndroid;
    }
    return self;
}

- (instancetype)initWithWindowsPhone {
    self = [super init];
    if (self != nil) {
        _tag = TeamMobileClientPlatformWindowsPhone;
    }
    return self;
}

- (instancetype)initWithBlackberry {
    self = [super init];
    if (self != nil) {
        _tag = TeamMobileClientPlatformBlackberry;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = TeamMobileClientPlatformOther;
    }
    return self;
}

- (BOOL)isIphone {
    return _tag == TeamMobileClientPlatformIphone;
}

- (BOOL)isIpad {
    return _tag == TeamMobileClientPlatformIpad;
}

- (BOOL)isAndroid {
    return _tag == TeamMobileClientPlatformAndroid;
}

- (BOOL)isWindowsPhone {
    return _tag == TeamMobileClientPlatformWindowsPhone;
}

- (BOOL)isBlackberry {
    return _tag == TeamMobileClientPlatformBlackberry;
}

- (BOOL)isOther {
    return _tag == TeamMobileClientPlatformOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamMobileClientPlatformIphone:
           return @"TeamMobileClientPlatformIphone";
        case TeamMobileClientPlatformIpad:
           return @"TeamMobileClientPlatformIpad";
        case TeamMobileClientPlatformAndroid:
           return @"TeamMobileClientPlatformAndroid";
        case TeamMobileClientPlatformWindowsPhone:
           return @"TeamMobileClientPlatformWindowsPhone";
        case TeamMobileClientPlatformBlackberry:
           return @"TeamMobileClientPlatformBlackberry";
        case TeamMobileClientPlatformOther:
           return @"TeamMobileClientPlatformOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamMobileClientPlatformSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamMobileClientPlatformSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamMobileClientPlatformSerializer serialize:self] description];
}

@end


@implementation DbxTeamMobileClientPlatformSerializer 

+ (NSDictionary *)serialize:(DbxTeamMobileClientPlatform *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isIphone]) {
        jsonDict[@".tag"] = @"iphone";
    }
    else if ([valueObj isIpad]) {
        jsonDict[@".tag"] = @"ipad";
    }
    else if ([valueObj isAndroid]) {
        jsonDict[@".tag"] = @"android";
    }
    else if ([valueObj isWindowsPhone]) {
        jsonDict[@".tag"] = @"windows_phone";
    }
    else if ([valueObj isBlackberry]) {
        jsonDict[@".tag"] = @"blackberry";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamMobileClientPlatform *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"iphone"]) {
        return [[DbxTeamMobileClientPlatform alloc] initWithIphone];
    }
    if ([tag isEqualToString:@"ipad"]) {
        return [[DbxTeamMobileClientPlatform alloc] initWithIpad];
    }
    if ([tag isEqualToString:@"android"]) {
        return [[DbxTeamMobileClientPlatform alloc] initWithAndroid];
    }
    if ([tag isEqualToString:@"windows_phone"]) {
        return [[DbxTeamMobileClientPlatform alloc] initWithWindowsPhone];
    }
    if ([tag isEqualToString:@"blackberry"]) {
        return [[DbxTeamMobileClientPlatform alloc] initWithBlackberry];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamMobileClientPlatform alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
