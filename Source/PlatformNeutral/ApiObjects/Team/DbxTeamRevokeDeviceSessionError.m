///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamRevokeDeviceSessionError.h"

@implementation DbxTeamRevokeDeviceSessionError 

- (instancetype)initWithDeviceSessionNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (TeamRevokeDeviceSessionErrorTag)TeamRevokeDeviceSessionErrorDeviceSessionNotFound;
    }
    return self;
}

- (instancetype)initWithMemberNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (TeamRevokeDeviceSessionErrorTag)TeamRevokeDeviceSessionErrorMemberNotFound;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (TeamRevokeDeviceSessionErrorTag)TeamRevokeDeviceSessionErrorOther;
    }
    return self;
}

- (BOOL)isDeviceSessionNotFound {
    return _tag == (TeamRevokeDeviceSessionErrorTag)TeamRevokeDeviceSessionErrorDeviceSessionNotFound;
}

- (BOOL)isMemberNotFound {
    return _tag == (TeamRevokeDeviceSessionErrorTag)TeamRevokeDeviceSessionErrorMemberNotFound;
}

- (BOOL)isOther {
    return _tag == (TeamRevokeDeviceSessionErrorTag)TeamRevokeDeviceSessionErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (TeamRevokeDeviceSessionErrorTag)TeamRevokeDeviceSessionErrorDeviceSessionNotFound) {
        return @"(TeamRevokeDeviceSessionErrorTag)TeamRevokeDeviceSessionErrorDeviceSessionNotFound";
    }
    if (_tag == (TeamRevokeDeviceSessionErrorTag)TeamRevokeDeviceSessionErrorMemberNotFound) {
        return @"(TeamRevokeDeviceSessionErrorTag)TeamRevokeDeviceSessionErrorMemberNotFound";
    }
    if (_tag == (TeamRevokeDeviceSessionErrorTag)TeamRevokeDeviceSessionErrorOther) {
        return @"(TeamRevokeDeviceSessionErrorTag)TeamRevokeDeviceSessionErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamRevokeDeviceSessionErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamRevokeDeviceSessionErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamRevokeDeviceSessionErrorSerializer serialize:self] description];
}

@end


@implementation DbxTeamRevokeDeviceSessionErrorSerializer 

+ (NSDictionary *)serialize:(DbxTeamRevokeDeviceSessionError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isDeviceSessionNotFound]) {
        jsonDict[@".tag"] = @"device_session_not_found";
    }
    else if ([valueObj isMemberNotFound]) {
        jsonDict[@".tag"] = @"member_not_found";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamRevokeDeviceSessionError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"device_session_not_found"]) {
        return [[DbxTeamRevokeDeviceSessionError alloc] initWithDeviceSessionNotFound];
    }
    if ([tag isEqualToString:@"member_not_found"]) {
        return [[DbxTeamRevokeDeviceSessionError alloc] initWithMemberNotFound];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamRevokeDeviceSessionError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
