///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamRevokeLinkedAppError.h"

@implementation DbxTeamRevokeLinkedAppError 

- (instancetype)initWithAppNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (TeamRevokeLinkedAppErrorTag)TeamRevokeLinkedAppErrorAppNotFound;
    }
    return self;
}

- (instancetype)initWithMemberNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (TeamRevokeLinkedAppErrorTag)TeamRevokeLinkedAppErrorMemberNotFound;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = (TeamRevokeLinkedAppErrorTag)TeamRevokeLinkedAppErrorOther;
    }
    return self;
}

- (BOOL)isAppNotFound {
    return _tag == (TeamRevokeLinkedAppErrorTag)TeamRevokeLinkedAppErrorAppNotFound;
}

- (BOOL)isMemberNotFound {
    return _tag == (TeamRevokeLinkedAppErrorTag)TeamRevokeLinkedAppErrorMemberNotFound;
}

- (BOOL)isOther {
    return _tag == (TeamRevokeLinkedAppErrorTag)TeamRevokeLinkedAppErrorOther;
}

- (NSString *)getTagName {
    if (_tag == (TeamRevokeLinkedAppErrorTag)TeamRevokeLinkedAppErrorAppNotFound) {
        return @"(TeamRevokeLinkedAppErrorTag)TeamRevokeLinkedAppErrorAppNotFound";
    }
    if (_tag == (TeamRevokeLinkedAppErrorTag)TeamRevokeLinkedAppErrorMemberNotFound) {
        return @"(TeamRevokeLinkedAppErrorTag)TeamRevokeLinkedAppErrorMemberNotFound";
    }
    if (_tag == (TeamRevokeLinkedAppErrorTag)TeamRevokeLinkedAppErrorOther) {
        return @"(TeamRevokeLinkedAppErrorTag)TeamRevokeLinkedAppErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamRevokeLinkedAppErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamRevokeLinkedAppErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamRevokeLinkedAppErrorSerializer serialize:self] description];
}

@end


@implementation DbxTeamRevokeLinkedAppErrorSerializer 

+ (NSDictionary *)serialize:(DbxTeamRevokeLinkedAppError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isAppNotFound]) {
        jsonDict[@".tag"] = @"app_not_found";
    }
    else if ([valueObj isMemberNotFound]) {
        jsonDict[@".tag"] = @"member_not_found";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamRevokeLinkedAppError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"app_not_found"]) {
        return [[DbxTeamRevokeLinkedAppError alloc] initWithAppNotFound];
    }
    if ([tag isEqualToString:@"member_not_found"]) {
        return [[DbxTeamRevokeLinkedAppError alloc] initWithMemberNotFound];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamRevokeLinkedAppError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
