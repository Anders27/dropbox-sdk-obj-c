///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMMemberProfile.h"
#import "DBXTEAMTeamMemberProfile.h"
#import "DBXTEAMTeamMemberStatus.h"
#import "DBXTEAMTeamMembershipType.h"
#import "DBXUSERSName.h"

@implementation DBXTEAMTeamMemberProfile 

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId email:(NSString *)email emailVerified:(NSNumber *)emailVerified status:(DBXTEAMTeamMemberStatus *)status name:(DBXUSERSName *)name membershipType:(DBXTEAMTeamMembershipType *)membershipType groups:(NSArray<NSString *> *)groups externalId:(NSString *)externalId accountId:(NSString *)accountId {
    [DBXStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](groups);
    [DBXStoneValidators nullableValidator:[DBXStoneValidators stringValidator:[NSNumber numberWithInt:40] maxLength:[NSNumber numberWithInt:40] pattern:nil]](accountId);

    self = [super initWithTeamMemberId:teamMemberId email:email emailVerified:emailVerified status:status name:name membershipType:membershipType externalId:externalId accountId:accountId];
    if (self != nil) {
        _groups = groups;
    }
    return self;
}

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId email:(NSString *)email emailVerified:(NSNumber *)emailVerified status:(DBXTEAMTeamMemberStatus *)status name:(DBXUSERSName *)name membershipType:(DBXTEAMTeamMembershipType *)membershipType groups:(NSArray<NSString *> *)groups {
    return [self initWithTeamMemberId:teamMemberId email:email emailVerified:emailVerified status:status name:name membershipType:membershipType groups:groups externalId:nil accountId:nil];
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXTEAMTeamMemberProfileSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMTeamMemberProfileSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMTeamMemberProfileSerializer serialize:self] description];
}

@end


@implementation DBXTEAMTeamMemberProfileSerializer 

+ (NSDictionary *)serialize:(DBXTEAMTeamMemberProfile *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    jsonDict[@"team_member_id"] = valueObj.teamMemberId;
    jsonDict[@"email"] = valueObj.email;
    jsonDict[@"email_verified"] = valueObj.emailVerified;
    jsonDict[@"status"] = [DBXTEAMTeamMemberStatusSerializer serialize:valueObj.status];
    jsonDict[@"name"] = [DBXUSERSNameSerializer serialize:valueObj.name];
    jsonDict[@"membership_type"] = [DBXTEAMTeamMembershipTypeSerializer serialize:valueObj.membershipType];
    jsonDict[@"groups"] = [DBXArraySerializer serialize:valueObj.groups withBlock:^id(id elem) { return elem; }];
    if (valueObj.externalId) {
        jsonDict[@"external_id"] = valueObj.externalId;
    }
    if (valueObj.accountId) {
        jsonDict[@"account_id"] = valueObj.accountId;
    }

    return jsonDict;
}

+ (DBXTEAMTeamMemberProfile *)deserialize:(NSDictionary *)valueDict {
    NSString *teamMemberId = valueDict[@"team_member_id"];
    NSString *email = valueDict[@"email"];
    NSNumber *emailVerified = valueDict[@"email_verified"];
    DBXTEAMTeamMemberStatus *status = [DBXTEAMTeamMemberStatusSerializer deserialize:valueDict[@"status"]];
    DBXUSERSName *name = [DBXUSERSNameSerializer deserialize:valueDict[@"name"]];
    DBXTEAMTeamMembershipType *membershipType = [DBXTEAMTeamMembershipTypeSerializer deserialize:valueDict[@"membership_type"]];
    NSArray<NSString *> *groups = [DBXArraySerializer deserialize:valueDict[@"groups"] withBlock:^id(id elem) { return elem; }];
    NSString *externalId = valueDict[@"external_id"] ?: nil;
    NSString *accountId = valueDict[@"account_id"] ?: nil;

    return [[DBXTEAMTeamMemberProfile alloc] initWithTeamMemberId:teamMemberId email:email emailVerified:emailVerified status:status name:name membershipType:membershipType groups:groups externalId:externalId accountId:accountId];
}

@end
