///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamMemberProfile.h"
#import "DbxTeamTeamMemberProfile.h"
#import "DbxTeamTeamMemberStatus.h"
#import "DbxTeamTeamMembershipType.h"
#import "DbxUsersName.h"

@implementation DbxTeamTeamMemberProfile 

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId email:(NSString *)email emailVerified:(NSNumber *)emailVerified status:(DbxTeamTeamMemberStatus *)status name:(DbxUsersName *)name membershipType:(DbxTeamTeamMembershipType *)membershipType groups:(NSArray<NSString *> *)groups externalId:(NSString *)externalId accountId:(NSString *)accountId {
    [DbxStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](groups);
    [DbxStoneValidators nullableValidator:[DbxStoneValidators stringValidator:[NSNumber numberWithInt:40] maxLength:[NSNumber numberWithInt:40] pattern:nil]](accountId);

    self = [super initWithTeamMemberId:teamMemberId email:email emailVerified:emailVerified status:status name:name membershipType:membershipType externalId:externalId accountId:accountId];
    if (self != nil) {
        _groups = groups;
    }
    return self;
}

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId email:(NSString *)email emailVerified:(NSNumber *)emailVerified status:(DbxTeamTeamMemberStatus *)status name:(DbxUsersName *)name membershipType:(DbxTeamTeamMembershipType *)membershipType groups:(NSArray<NSString *> *)groups {
    return [self initWithTeamMemberId:teamMemberId email:email emailVerified:emailVerified status:status name:name membershipType:membershipType groups:groups externalId:nil accountId:nil];
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamTeamMemberProfileSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamTeamMemberProfileSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamTeamMemberProfileSerializer serialize:self] description];
}

@end


@implementation DbxTeamTeamMemberProfileSerializer 

+ (NSDictionary *)serialize:(DbxTeamTeamMemberProfile *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    jsonDict[@"team_member_id"] = [DbxStringSerializer serialize:valueObj.teamMemberId];
    jsonDict[@"email"] = [DbxStringSerializer serialize:valueObj.email];
    jsonDict[@"email_verified"] = [DbxBoolSerializer serialize:valueObj.emailVerified];
    jsonDict[@"status"] = [DbxTeamTeamMemberStatusSerializer serialize:valueObj.status];
    jsonDict[@"name"] = [DbxUsersNameSerializer serialize:valueObj.name];
    jsonDict[@"membership_type"] = [DbxTeamTeamMembershipTypeSerializer serialize:valueObj.membershipType];
    jsonDict[@"groups"] = [DbxArraySerializer serialize:valueObj.groups withBlock:^id(id obj) { return [DbxStringSerializer serialize:obj]; }];
    if (valueObj.externalId != nil) {
        jsonDict[@"external_id"] = [DbxStringSerializer serialize:valueObj.externalId];
    }
    if (valueObj.accountId != nil) {
        jsonDict[@"account_id"] = [DbxStringSerializer serialize:valueObj.accountId];
    }

    return jsonDict;
}

+ (DbxTeamTeamMemberProfile *)deserialize:(NSDictionary *)valueDict {
    NSString *teamMemberId = [DbxStringSerializer deserialize:valueDict];
    NSString *email = [DbxStringSerializer deserialize:valueDict];
    NSNumber *emailVerified = [DbxBoolSerializer deserialize:valueDict];
    DbxTeamTeamMemberStatus *status = [DbxTeamTeamMemberStatusSerializer deserialize:valueDict];
    DbxUsersName *name = [DbxUsersNameSerializer deserialize:valueDict];
    DbxTeamTeamMembershipType *membershipType = [DbxTeamTeamMembershipTypeSerializer deserialize:valueDict];
    NSArray<NSString *> *groups = [DbxArraySerializer deserialize:valueDict withBlock:^id(id obj) { return [DbxStringSerializer deserialize:obj]; }];
    NSString *externalId = valueDict != nil ? [DbxStringSerializer deserialize:valueDict] : nil;
    NSString *accountId = valueDict != nil ? [DbxStringSerializer deserialize:valueDict] : nil;

    return [[DbxTeamTeamMemberProfile alloc] initWithTeamMemberId:teamMemberId email:email emailVerified:emailVerified status:status name:name membershipType:membershipType groups:groups externalId:externalId accountId:accountId];
}

@end
