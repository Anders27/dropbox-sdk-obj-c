///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamRemovedStatus.h"
#import "DbxTeamTeamMemberStatus.h"

@implementation DbxTeamTeamMemberStatus 

- (instancetype)initWithActive {
    self = [super init];
    if (self != nil) {
        _tag = (TeamTeamMemberStatusTag)TeamTeamMemberStatusActive;
    }
    return self;
}

- (instancetype)initWithInvited {
    self = [super init];
    if (self != nil) {
        _tag = (TeamTeamMemberStatusTag)TeamTeamMemberStatusInvited;
    }
    return self;
}

- (instancetype)initWithSuspended {
    self = [super init];
    if (self != nil) {
        _tag = (TeamTeamMemberStatusTag)TeamTeamMemberStatusSuspended;
    }
    return self;
}

- (instancetype)initWithRemoved:(DbxTeamRemovedStatus *)removed {
    self = [super init];
    if (self != nil) {
        _tag = (TeamTeamMemberStatusTag)TeamTeamMemberStatusRemoved;
        _removed = removed;
    }
    return self;
}

- (BOOL)isActive {
    return _tag == (TeamTeamMemberStatusTag)TeamTeamMemberStatusActive;
}

- (BOOL)isInvited {
    return _tag == (TeamTeamMemberStatusTag)TeamTeamMemberStatusInvited;
}

- (BOOL)isSuspended {
    return _tag == (TeamTeamMemberStatusTag)TeamTeamMemberStatusSuspended;
}

- (BOOL)isRemoved {
    return _tag == (TeamTeamMemberStatusTag)TeamTeamMemberStatusRemoved;
}

- (NSString *)getTagName {
    if (_tag == (TeamTeamMemberStatusTag)TeamTeamMemberStatusActive) {
        return @"(TeamTeamMemberStatusTag)TeamTeamMemberStatusActive";
    }
    if (_tag == (TeamTeamMemberStatusTag)TeamTeamMemberStatusInvited) {
        return @"(TeamTeamMemberStatusTag)TeamTeamMemberStatusInvited";
    }
    if (_tag == (TeamTeamMemberStatusTag)TeamTeamMemberStatusSuspended) {
        return @"(TeamTeamMemberStatusTag)TeamTeamMemberStatusSuspended";
    }
    if (_tag == (TeamTeamMemberStatusTag)TeamTeamMemberStatusRemoved) {
        return @"(TeamTeamMemberStatusTag)TeamTeamMemberStatusRemoved";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (DbxTeamRemovedStatus *)removed {
    if (_tag != (TeamTeamMemberStatusTag)TeamTeamMemberStatusRemoved) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required (TeamTeamMemberStatusTag)TeamTeamMemberStatusRemoved, but was %@.", [self getTagName]];
    }
    return _removed;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamTeamMemberStatusSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamTeamMemberStatusSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamTeamMemberStatusSerializer serialize:self] description];
}

@end


@implementation DbxTeamTeamMemberStatusSerializer 

+ (NSDictionary *)serialize:(DbxTeamTeamMemberStatus *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isActive]) {
        jsonDict[@".tag"] = @"active";
    }
    else if ([valueObj isInvited]) {
        jsonDict[@".tag"] = @"invited";
    }
    else if ([valueObj isSuspended]) {
        jsonDict[@".tag"] = @"suspended";
    }
    else if ([valueObj isRemoved]) {
        jsonDict = [[DbxTeamRemovedStatusSerializer serialize:valueObj.removed] mutableCopy];
        jsonDict[@".tag"] = @"removed";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamTeamMemberStatus *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"active"]) {
        return [[DbxTeamTeamMemberStatus alloc] initWithActive];
    }
    if ([tag isEqualToString:@"invited"]) {
        return [[DbxTeamTeamMemberStatus alloc] initWithInvited];
    }
    if ([tag isEqualToString:@"suspended"]) {
        return [[DbxTeamTeamMemberStatus alloc] initWithSuspended];
    }
    if ([tag isEqualToString:@"removed"]) {
        DbxTeamRemovedStatus *removed = [DbxTeamRemovedStatusSerializer deserialize:valueDict];
        return [[DbxTeamTeamMemberStatus alloc] initWithRemoved:removed];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
