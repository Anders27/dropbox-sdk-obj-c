///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamUserSelectorArg.h"

@implementation DbxTeamUserSelectorArg 

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId {
    self = [super init];
    if (self != nil) {
        _tag = TeamUserSelectorArgTeamMemberId;
        _teamMemberId = teamMemberId;
    }
    return self;
}

- (instancetype)initWithExternalId:(NSString *)externalId {
    self = [super init];
    if (self != nil) {
        _tag = TeamUserSelectorArgExternalId;
        _externalId = externalId;
    }
    return self;
}

- (instancetype)initWithEmail:(NSString *)email {
    self = [super init];
    if (self != nil) {
        _tag = TeamUserSelectorArgEmail;
        _email = email;
    }
    return self;
}

- (BOOL)isTeamMemberId {
    return _tag == TeamUserSelectorArgTeamMemberId;
}

- (BOOL)isExternalId {
    return _tag == TeamUserSelectorArgExternalId;
}

- (BOOL)isEmail {
    return _tag == TeamUserSelectorArgEmail;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamUserSelectorArgTeamMemberId:
           return @"TeamUserSelectorArgTeamMemberId";
        case TeamUserSelectorArgExternalId:
           return @"TeamUserSelectorArgExternalId";
        case TeamUserSelectorArgEmail:
           return @"TeamUserSelectorArgEmail";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)teamMemberId {
    if (_tag != TeamUserSelectorArgTeamMemberId) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamUserSelectorArgTeamMemberId, but was %@.", [self getTagName]];
    }
    return _teamMemberId;
}

- (NSString *)externalId {
    if (_tag != TeamUserSelectorArgExternalId) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamUserSelectorArgExternalId, but was %@.", [self getTagName]];
    }
    return _externalId;
}

- (NSString *)email {
    if (_tag != TeamUserSelectorArgEmail) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required TeamUserSelectorArgEmail, but was %@.", [self getTagName]];
    }
    return _email;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamUserSelectorArgSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamUserSelectorArgSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamUserSelectorArgSerializer serialize:self] description];
}

@end


@implementation DbxTeamUserSelectorArgSerializer 

+ (NSDictionary *)serialize:(DbxTeamUserSelectorArg *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isTeamMemberId]) {
        jsonDict[@"team_member_id"] = valueObj.teamMemberId;
        jsonDict[@".tag"] = @"team_member_id";
    }
    else if ([valueObj isExternalId]) {
        jsonDict[@"external_id"] = valueObj.externalId;
        jsonDict[@".tag"] = @"external_id";
    }
    else if ([valueObj isEmail]) {
        jsonDict[@"email"] = valueObj.email;
        jsonDict[@".tag"] = @"email";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamUserSelectorArg *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"team_member_id"]) {
        NSString *teamMemberId = valueDict[@"team_member_id"];
        return [[DbxTeamUserSelectorArg alloc] initWithTeamMemberId:teamMemberId];
    }
    if ([tag isEqualToString:@"external_id"]) {
        NSString *externalId = valueDict[@"external_id"];
        return [[DbxTeamUserSelectorArg alloc] initWithExternalId:externalId];
    }
    if ([tag isEqualToString:@"email"]) {
        NSString *email = valueDict[@"email"];
        return [[DbxTeamUserSelectorArg alloc] initWithEmail:email];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
