///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamUserSelectorError.h"

@implementation DbxTeamUserSelectorError 

- (instancetype)initWithUserNotFound {
    self = [super init];
    if (self != nil) {
        _tag = (TeamUserSelectorErrorTag)TeamUserSelectorErrorUserNotFound;
    }
    return self;
}

- (BOOL)isUserNotFound {
    return _tag == (TeamUserSelectorErrorTag)TeamUserSelectorErrorUserNotFound;
}

- (NSString *)getTagName {
    if (_tag == (TeamUserSelectorErrorTag)TeamUserSelectorErrorUserNotFound) {
        return @"(TeamUserSelectorErrorTag)TeamUserSelectorErrorUserNotFound";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamUserSelectorErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamUserSelectorErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamUserSelectorErrorSerializer serialize:self] description];
}

@end


@implementation DbxTeamUserSelectorErrorSerializer 

+ (NSDictionary *)serialize:(DbxTeamUserSelectorError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isUserNotFound]) {
        jsonDict[@".tag"] = @"user_not_found";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamUserSelectorError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"user_not_found"]) {
        return [[DbxTeamUserSelectorError alloc] initWithUserNotFound];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
