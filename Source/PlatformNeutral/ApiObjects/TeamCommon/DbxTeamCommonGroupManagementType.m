///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamCommonGroupManagementType.h"

@implementation DbxTeamCommonGroupManagementType 

- (instancetype)initWithCompanyManaged {
    self = [super init];
    if (self != nil) {
        _tag = TeamCommonGroupManagementTypeCompanyManaged;
    }
    return self;
}

- (instancetype)initWithUserManaged {
    self = [super init];
    if (self != nil) {
        _tag = TeamCommonGroupManagementTypeUserManaged;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = TeamCommonGroupManagementTypeOther;
    }
    return self;
}

- (BOOL)isCompanyManaged {
    return _tag == TeamCommonGroupManagementTypeCompanyManaged;
}

- (BOOL)isUserManaged {
    return _tag == TeamCommonGroupManagementTypeUserManaged;
}

- (BOOL)isOther {
    return _tag == TeamCommonGroupManagementTypeOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamCommonGroupManagementTypeCompanyManaged:
           return @"TeamCommonGroupManagementTypeCompanyManaged";
        case TeamCommonGroupManagementTypeUserManaged:
           return @"TeamCommonGroupManagementTypeUserManaged";
        case TeamCommonGroupManagementTypeOther:
           return @"TeamCommonGroupManagementTypeOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamCommonGroupManagementTypeSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamCommonGroupManagementTypeSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamCommonGroupManagementTypeSerializer serialize:self] description];
}

@end


@implementation DbxTeamCommonGroupManagementTypeSerializer 

+ (NSDictionary *)serialize:(DbxTeamCommonGroupManagementType *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isCompanyManaged]) {
        jsonDict[@".tag"] = @"company_managed";
    }
    else if ([valueObj isUserManaged]) {
        jsonDict[@".tag"] = @"user_managed";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamCommonGroupManagementType *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"company_managed"]) {
        return [[DbxTeamCommonGroupManagementType alloc] initWithCompanyManaged];
    }
    if ([tag isEqualToString:@"user_managed"]) {
        return [[DbxTeamCommonGroupManagementType alloc] initWithUserManaged];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamCommonGroupManagementType alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
