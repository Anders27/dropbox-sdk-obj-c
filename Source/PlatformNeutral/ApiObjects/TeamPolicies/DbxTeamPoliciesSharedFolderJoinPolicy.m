///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxTeamPoliciesSharedFolderJoinPolicy.h"

@implementation DbxTeamPoliciesSharedFolderJoinPolicy 

- (instancetype)initWithFromTeamOnly {
    self = [super init];
    if (self != nil) {
        _tag = TeamPoliciesSharedFolderJoinPolicyFromTeamOnly;
    }
    return self;
}

- (instancetype)initWithFromAnyone {
    self = [super init];
    if (self != nil) {
        _tag = TeamPoliciesSharedFolderJoinPolicyFromAnyone;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = TeamPoliciesSharedFolderJoinPolicyOther;
    }
    return self;
}

- (BOOL)isFromTeamOnly {
    return _tag == TeamPoliciesSharedFolderJoinPolicyFromTeamOnly;
}

- (BOOL)isFromAnyone {
    return _tag == TeamPoliciesSharedFolderJoinPolicyFromAnyone;
}

- (BOOL)isOther {
    return _tag == TeamPoliciesSharedFolderJoinPolicyOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case TeamPoliciesSharedFolderJoinPolicyFromTeamOnly:
           return @"TeamPoliciesSharedFolderJoinPolicyFromTeamOnly";
        case TeamPoliciesSharedFolderJoinPolicyFromAnyone:
           return @"TeamPoliciesSharedFolderJoinPolicyFromAnyone";
        case TeamPoliciesSharedFolderJoinPolicyOther:
           return @"TeamPoliciesSharedFolderJoinPolicyOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxTeamPoliciesSharedFolderJoinPolicySerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxTeamPoliciesSharedFolderJoinPolicySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxTeamPoliciesSharedFolderJoinPolicySerializer serialize:self] description];
}

@end


@implementation DbxTeamPoliciesSharedFolderJoinPolicySerializer 

+ (NSDictionary *)serialize:(DbxTeamPoliciesSharedFolderJoinPolicy *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isFromTeamOnly]) {
        jsonDict[@".tag"] = @"from_team_only";
    }
    else if ([valueObj isFromAnyone]) {
        jsonDict[@".tag"] = @"from_anyone";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxTeamPoliciesSharedFolderJoinPolicy *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"from_team_only"]) {
        return [[DbxTeamPoliciesSharedFolderJoinPolicy alloc] initWithFromTeamOnly];
    }
    if ([tag isEqualToString:@"from_anyone"]) {
        return [[DbxTeamPoliciesSharedFolderJoinPolicy alloc] initWithFromAnyone];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxTeamPoliciesSharedFolderJoinPolicy alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
