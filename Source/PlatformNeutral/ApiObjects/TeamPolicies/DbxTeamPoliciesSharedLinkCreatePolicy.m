///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXTEAMPOLICIESSharedLinkCreatePolicy.h"

@implementation DBXTEAMPOLICIESSharedLinkCreatePolicy 

- (instancetype)initWithDefaultPublic {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMPOLICIESSharedLinkCreatePolicyDefaultPublic;
    }
    return self;
}

- (instancetype)initWithDefaultTeamOnly {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMPOLICIESSharedLinkCreatePolicyDefaultTeamOnly;
    }
    return self;
}

- (instancetype)initWithTeamOnly {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMPOLICIESSharedLinkCreatePolicyTeamOnly;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = DBXTEAMPOLICIESSharedLinkCreatePolicyOther;
    }
    return self;
}

- (BOOL)isDefaultPublic {
    return _tag == DBXTEAMPOLICIESSharedLinkCreatePolicyDefaultPublic;
}

- (BOOL)isDefaultTeamOnly {
    return _tag == DBXTEAMPOLICIESSharedLinkCreatePolicyDefaultTeamOnly;
}

- (BOOL)isTeamOnly {
    return _tag == DBXTEAMPOLICIESSharedLinkCreatePolicyTeamOnly;
}

- (BOOL)isOther {
    return _tag == DBXTEAMPOLICIESSharedLinkCreatePolicyOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXTEAMPOLICIESSharedLinkCreatePolicyDefaultPublic:
           return @"DBXTEAMPOLICIESSharedLinkCreatePolicyDefaultPublic";
        case DBXTEAMPOLICIESSharedLinkCreatePolicyDefaultTeamOnly:
           return @"DBXTEAMPOLICIESSharedLinkCreatePolicyDefaultTeamOnly";
        case DBXTEAMPOLICIESSharedLinkCreatePolicyTeamOnly:
           return @"DBXTEAMPOLICIESSharedLinkCreatePolicyTeamOnly";
        case DBXTEAMPOLICIESSharedLinkCreatePolicyOther:
           return @"DBXTEAMPOLICIESSharedLinkCreatePolicyOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DBXTEAMPOLICIESSharedLinkCreatePolicySerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXTEAMPOLICIESSharedLinkCreatePolicySerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXTEAMPOLICIESSharedLinkCreatePolicySerializer serialize:self] description];
}

@end


@implementation DBXTEAMPOLICIESSharedLinkCreatePolicySerializer 

+ (NSDictionary *)serialize:(DBXTEAMPOLICIESSharedLinkCreatePolicy *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isDefaultPublic]) {
        jsonDict[@".tag"] = @"default_public";
    }
    else if ([valueObj isDefaultTeamOnly]) {
        jsonDict[@".tag"] = @"default_team_only";
    }
    else if ([valueObj isTeamOnly]) {
        jsonDict[@".tag"] = @"team_only";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXTEAMPOLICIESSharedLinkCreatePolicy *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"default_public"]) {
        return [[DBXTEAMPOLICIESSharedLinkCreatePolicy alloc] initWithDefaultPublic];
    }
    else if ([tag isEqualToString:@"default_team_only"]) {
        return [[DBXTEAMPOLICIESSharedLinkCreatePolicy alloc] initWithDefaultTeamOnly];
    }
    else if ([tag isEqualToString:@"team_only"]) {
        return [[DBXTEAMPOLICIESSharedLinkCreatePolicy alloc] initWithTeamOnly];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXTEAMPOLICIESSharedLinkCreatePolicy alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
