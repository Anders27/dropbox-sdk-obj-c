///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXUSERSAccountType.h"

@implementation DBXUSERSAccountType 

- (instancetype)initWithBasic {
    self = [super init];
    if (self) {
        _tag = DBXUSERSAccountTypeBasic;
    }
    return self;
}

- (instancetype)initWithPro {
    self = [super init];
    if (self) {
        _tag = DBXUSERSAccountTypePro;
    }
    return self;
}

- (instancetype)initWithBusiness {
    self = [super init];
    if (self) {
        _tag = DBXUSERSAccountTypeBusiness;
    }
    return self;
}

- (BOOL)isBasic {
    return _tag == DBXUSERSAccountTypeBasic;
}

- (BOOL)isPro {
    return _tag == DBXUSERSAccountTypePro;
}

- (BOOL)isBusiness {
    return _tag == DBXUSERSAccountTypeBusiness;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXUSERSAccountTypeBasic:
           return @"DBXUSERSAccountTypeBasic";
        case DBXUSERSAccountTypePro:
           return @"DBXUSERSAccountTypePro";
        case DBXUSERSAccountTypeBusiness:
           return @"DBXUSERSAccountTypeBusiness";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXUSERSAccountTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXUSERSAccountTypeSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXUSERSAccountTypeSerializer serialize:self] description];
}

@end


@implementation DBXUSERSAccountTypeSerializer 

+ (NSDictionary *)serialize:(DBXUSERSAccountType *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isBasic]) {
        jsonDict[@".tag"] = @"basic";
    }
    else if ([valueObj isPro]) {
        jsonDict[@".tag"] = @"pro";
    }
    else if ([valueObj isBusiness]) {
        jsonDict[@".tag"] = @"business";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXUSERSAccountType *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"basic"]) {
        return [[DBXUSERSAccountType alloc] initWithBasic];
    }
    else if ([tag isEqualToString:@"pro"]) {
        return [[DBXUSERSAccountType alloc] initWithPro];
    }
    else if ([tag isEqualToString:@"business"]) {
        return [[DBXUSERSAccountType alloc] initWithBusiness];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
