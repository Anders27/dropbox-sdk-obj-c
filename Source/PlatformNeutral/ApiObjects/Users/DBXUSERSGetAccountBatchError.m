///
/// Auto-generated by Stone, do not modify.
///

#import "DBXStoneSerializers.h"
#import "DBXStoneValidators.h"
#import "DBXUSERSGetAccountBatchError.h"

@implementation DBXUSERSGetAccountBatchError 

@synthesize noAccount = _noAccount;

- (instancetype)initWithNoAccount:(NSString *)noAccount {
    self = [super init];
    if (self) {
        _tag = DBXUSERSGetAccountBatchErrorNoAccount;
        _noAccount = noAccount;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self) {
        _tag = DBXUSERSGetAccountBatchErrorOther;
    }
    return self;
}

- (BOOL)isNoAccount {
    return _tag == DBXUSERSGetAccountBatchErrorNoAccount;
}

- (BOOL)isOther {
    return _tag == DBXUSERSGetAccountBatchErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case DBXUSERSGetAccountBatchErrorNoAccount:
           return @"DBXUSERSGetAccountBatchErrorNoAccount";
        case DBXUSERSGetAccountBatchErrorOther:
           return @"DBXUSERSGetAccountBatchErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

- (NSString *)noAccount {
    if (![self isNoAccount]) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required `DBXUSERSGetAccountBatchErrorNoAccount`, but was %@.", [self getTagName]];
    }
    return _noAccount;
}

+ (NSDictionary *)serialize:(id)instance {
    return [DBXUSERSGetAccountBatchErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DBXUSERSGetAccountBatchErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DBXUSERSGetAccountBatchErrorSerializer serialize:self] description];
}

@end


@implementation DBXUSERSGetAccountBatchErrorSerializer 

+ (NSDictionary *)serialize:(DBXUSERSGetAccountBatchError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isNoAccount]) {
        jsonDict[@"no_account"] = valueObj.noAccount;
        jsonDict[@".tag"] = @"no_account";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DBXUSERSGetAccountBatchError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"no_account"]) {
        NSString *noAccount = valueDict[@"no_account"];
        return [[DBXUSERSGetAccountBatchError alloc] initWithNoAccount:noAccount];
    }
    else if ([tag isEqualToString:@"other"]) {
        return [[DBXUSERSGetAccountBatchError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an invalid value." userInfo:nil]);
}

@end
