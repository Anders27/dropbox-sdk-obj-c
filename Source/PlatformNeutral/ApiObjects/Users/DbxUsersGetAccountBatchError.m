///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxUsersGetAccountBatchError.h"

@implementation DbxUsersGetAccountBatchError 

- (instancetype)initWithNoAccount:(NSString *)noAccount {
    self = [super init];
    if (self != nil) {
        _tag = UsersGetAccountBatchErrorNoAccount;
        _noAccount = noAccount;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = UsersGetAccountBatchErrorOther;
    }
    return self;
}

- (BOOL)isNoAccount {
    return _tag == UsersGetAccountBatchErrorNoAccount;
}

- (BOOL)isOther {
    return _tag == UsersGetAccountBatchErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case UsersGetAccountBatchErrorNoAccount:
           return @"UsersGetAccountBatchErrorNoAccount";
        case UsersGetAccountBatchErrorOther:
           return @"UsersGetAccountBatchErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

- (NSString *)noAccount {
    if (_tag != UsersGetAccountBatchErrorNoAccount) {
        [NSException raise:@"IllegalStateException" format:@"Invalid tag: required UsersGetAccountBatchErrorNoAccount, but was %@.", [self getTagName]];
    }
    return _noAccount;
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxUsersGetAccountBatchErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxUsersGetAccountBatchErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxUsersGetAccountBatchErrorSerializer serialize:self] description];
}

@end


@implementation DbxUsersGetAccountBatchErrorSerializer 

+ (NSDictionary *)serialize:(DbxUsersGetAccountBatchError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isNoAccount]) {
        jsonDict[@"no_account"] = valueObj.noAccount;
        jsonDict[@".tag"] = @"no_account";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxUsersGetAccountBatchError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"no_account"]) {
        NSString *noAccount = valueDict[@"no_account"];
        return [[DbxUsersGetAccountBatchError alloc] initWithNoAccount:noAccount];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxUsersGetAccountBatchError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
