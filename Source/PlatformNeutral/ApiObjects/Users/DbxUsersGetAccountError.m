///
/// Auto-generated by Stone, do not modify.
///

#import "DbxStoneSerializers.h"
#import "DbxStoneValidators.h"
#import "DbxUsersGetAccountError.h"

@implementation DbxUsersGetAccountError 

- (instancetype)initWithNoAccount {
    self = [super init];
    if (self != nil) {
        _tag = UsersGetAccountErrorNoAccount;
    }
    return self;
}

- (instancetype)initWithOther {
    self = [super init];
    if (self != nil) {
        _tag = UsersGetAccountErrorOther;
    }
    return self;
}

- (BOOL)isNoAccount {
    return _tag == UsersGetAccountErrorNoAccount;
}

- (BOOL)isOther {
    return _tag == UsersGetAccountErrorOther;
}

- (NSString *)getTagName {
    switch (_tag) {
        case UsersGetAccountErrorNoAccount:
           return @"UsersGetAccountErrorNoAccount";
        case UsersGetAccountErrorOther:
           return @"UsersGetAccountErrorOther";
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

+ (NSDictionary *)serialize:(id)obj {
    return [DbxUsersGetAccountErrorSerializer serialize:obj];
}

+ (id)deserialize:(NSDictionary *)dict {
    return [DbxUsersGetAccountErrorSerializer deserialize:dict];
}

- (NSString *)description {
    return [[DbxUsersGetAccountErrorSerializer serialize:self] description];
}

@end


@implementation DbxUsersGetAccountErrorSerializer 

+ (NSDictionary *)serialize:(DbxUsersGetAccountError *)valueObj {
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

    if ([valueObj isNoAccount]) {
        jsonDict[@".tag"] = @"no_account";
    }
    else if ([valueObj isOther]) {
        jsonDict[@".tag"] = @"other";
    }
    else {
        @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
    }

    return jsonDict;
}

+ (DbxUsersGetAccountError *)deserialize:(NSDictionary *)valueDict {
    NSString *tag = valueDict[@".tag"];

    if ([tag isEqualToString:@"no_account"]) {
        return [[DbxUsersGetAccountError alloc] initWithNoAccount];
    }
    if ([tag isEqualToString:@"other"]) {
        return [[DbxUsersGetAccountError alloc] initWithOther];
    }

    @throw([NSException exceptionWithName:@"InvalidTagEnum" reason:@"Supplied tag enum has an invalid value." userInfo:nil]);
}

@end
