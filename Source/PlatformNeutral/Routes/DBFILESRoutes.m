///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBFILESRoutes.h"

@implementation DBFILESRoutes 

- (instancetype)init:(DBTransportClient *)client {
    self = [super init];
    if (self) {
        _client = client;
    }
    return self;
}
- (DBRpcTask *)alphaGetMetadata:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESAlphaGetMetadata;
    DBFILESAlphaGetMetadataArg *arg = [[DBFILESAlphaGetMetadataArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)alphaGetMetadata:(NSString *)path includeMediaInfo:(NSNumber *)includeMediaInfo includeDeleted:(NSNumber *)includeDeleted includeHasExplicitSharedMembers:(NSNumber *)includeHasExplicitSharedMembers includePropertyTemplates:(NSArray<NSString *> *)includePropertyTemplates {
    DBRoute *route = DBFILESRouteObjects.DBFILESAlphaGetMetadata;
    DBFILESAlphaGetMetadataArg *arg = [[DBFILESAlphaGetMetadataArg alloc] initWithPath:path includeMediaInfo:includeMediaInfo includeDeleted:includeDeleted includeHasExplicitSharedMembers:includeHasExplicitSharedMembers includePropertyTemplates:includePropertyTemplates];
    return [self.client requestRpc:route arg:arg];
}

- (DBUploadTask *)alphaUploadURL:(NSString *)path inputURL:(NSURL *)inputURL {
    DBRoute *route = DBFILESRouteObjects.DBFILESAlphaUpload;
    DBFILESCommitInfoWithProperties *arg = [[DBFILESCommitInfoWithProperties alloc] initWithPath:path];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBUploadTask *)alphaUploadURL:(NSString *)path mode:(DBFILESWriteMode *)mode autorename:(NSNumber *)autorename clientModified:(NSDate *)clientModified mute:(NSNumber *)mute propertyGroups:(NSArray<DBPROPERTIESPropertyGroup *> *)propertyGroups inputURL:(NSURL *)inputURL {
    DBRoute *route = DBFILESRouteObjects.DBFILESAlphaUpload;
    DBFILESCommitInfoWithProperties *arg = [[DBFILESCommitInfoWithProperties alloc] initWithPath:path mode:mode autorename:autorename clientModified:clientModified mute:mute propertyGroups:propertyGroups];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBUploadTask *)alphaUploadData:(NSString *)path inputData:(NSData *)inputData {
    DBRoute *route = DBFILESRouteObjects.DBFILESAlphaUpload;
    DBFILESCommitInfoWithProperties *arg = [[DBFILESCommitInfoWithProperties alloc] initWithPath:path];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)alphaUploadData:(NSString *)path mode:(DBFILESWriteMode *)mode autorename:(NSNumber *)autorename clientModified:(NSDate *)clientModified mute:(NSNumber *)mute propertyGroups:(NSArray<DBPROPERTIESPropertyGroup *> *)propertyGroups inputData:(NSData *)inputData {
    DBRoute *route = DBFILESRouteObjects.DBFILESAlphaUpload;
    DBFILESCommitInfoWithProperties *arg = [[DBFILESCommitInfoWithProperties alloc] initWithPath:path mode:mode autorename:autorename clientModified:clientModified mute:mute propertyGroups:propertyGroups];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)alphaUploadStream:(NSString *)path inputStream:(NSInputStream *)inputStream {
    DBRoute *route = DBFILESRouteObjects.DBFILESAlphaUpload;
    DBFILESCommitInfoWithProperties *arg = [[DBFILESCommitInfoWithProperties alloc] initWithPath:path];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)alphaUploadStream:(NSString *)path mode:(DBFILESWriteMode *)mode autorename:(NSNumber *)autorename clientModified:(NSDate *)clientModified mute:(NSNumber *)mute propertyGroups:(NSArray<DBPROPERTIESPropertyGroup *> *)propertyGroups inputStream:(NSInputStream *)inputStream {
    DBRoute *route = DBFILESRouteObjects.DBFILESAlphaUpload;
    DBFILESCommitInfoWithProperties *arg = [[DBFILESCommitInfoWithProperties alloc] initWithPath:path mode:mode autorename:autorename clientModified:clientModified mute:mute propertyGroups:propertyGroups];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBRpcTask *)dCopy:(NSString *)fromPath toPath:(NSString *)toPath {
    DBRoute *route = DBFILESRouteObjects.DBFILESDCopy;
    DBFILESRelocationArg *arg = [[DBFILESRelocationArg alloc] initWithFromPath:fromPath toPath:toPath];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)dCopyReferenceGet:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESDCopyReferenceGet;
    DBFILESGetCopyReferenceArg *arg = [[DBFILESGetCopyReferenceArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)dCopyReferenceSave:(NSString *)dCopyReference path:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESDCopyReferenceSave;
    DBFILESSaveCopyReferenceArg *arg = [[DBFILESSaveCopyReferenceArg alloc] initWithDCopyReference:dCopyReference path:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)createFolder:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESCreateFolder;
    DBFILESCreateFolderArg *arg = [[DBFILESCreateFolderArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)delete_:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESDelete_;
    DBFILESDeleteArg *arg = [[DBFILESDeleteArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBDownloadURLTask *)downloadURL:(NSString *)path overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBRoute *route = DBFILESRouteObjects.DBFILESDownload;
    DBFILESDownloadArg *arg = [[DBFILESDownloadArg alloc] initWithPath:path];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadURLTask *)downloadURL:(NSString *)path rev:(NSString *)rev overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBRoute *route = DBFILESRouteObjects.DBFILESDownload;
    DBFILESDownloadArg *arg = [[DBFILESDownloadArg alloc] initWithPath:path rev:rev];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadDataTask *)downloadData:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESDownload;
    DBFILESDownloadArg *arg = [[DBFILESDownloadArg alloc] initWithPath:path];
    return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)downloadData:(NSString *)path rev:(NSString *)rev {
    DBRoute *route = DBFILESRouteObjects.DBFILESDownload;
    DBFILESDownloadArg *arg = [[DBFILESDownloadArg alloc] initWithPath:path rev:rev];
    return [self.client requestDownload:route arg:arg];
}

- (DBRpcTask *)getMetadata:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESGetMetadata;
    DBFILESGetMetadataArg *arg = [[DBFILESGetMetadataArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getMetadata:(NSString *)path includeMediaInfo:(NSNumber *)includeMediaInfo includeDeleted:(NSNumber *)includeDeleted includeHasExplicitSharedMembers:(NSNumber *)includeHasExplicitSharedMembers {
    DBRoute *route = DBFILESRouteObjects.DBFILESGetMetadata;
    DBFILESGetMetadataArg *arg = [[DBFILESGetMetadataArg alloc] initWithPath:path includeMediaInfo:includeMediaInfo includeDeleted:includeDeleted includeHasExplicitSharedMembers:includeHasExplicitSharedMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DBDownloadURLTask *)getPreviewURL:(NSString *)path overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBRoute *route = DBFILESRouteObjects.DBFILESGetPreview;
    DBFILESPreviewArg *arg = [[DBFILESPreviewArg alloc] initWithPath:path];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadURLTask *)getPreviewURL:(NSString *)path rev:(NSString *)rev overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBRoute *route = DBFILESRouteObjects.DBFILESGetPreview;
    DBFILESPreviewArg *arg = [[DBFILESPreviewArg alloc] initWithPath:path rev:rev];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadDataTask *)getPreviewData:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESGetPreview;
    DBFILESPreviewArg *arg = [[DBFILESPreviewArg alloc] initWithPath:path];
    return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)getPreviewData:(NSString *)path rev:(NSString *)rev {
    DBRoute *route = DBFILESRouteObjects.DBFILESGetPreview;
    DBFILESPreviewArg *arg = [[DBFILESPreviewArg alloc] initWithPath:path rev:rev];
    return [self.client requestDownload:route arg:arg];
}

- (DBRpcTask *)getTemporaryLink:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESGetTemporaryLink;
    DBFILESGetTemporaryLinkArg *arg = [[DBFILESGetTemporaryLinkArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBDownloadURLTask *)getThumbnailURL:(NSString *)path overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBRoute *route = DBFILESRouteObjects.DBFILESGetThumbnail;
    DBFILESThumbnailArg *arg = [[DBFILESThumbnailArg alloc] initWithPath:path];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadURLTask *)getThumbnailURL:(NSString *)path format:(DBFILESThumbnailFormat *)format size:(DBFILESThumbnailSize *)size overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBRoute *route = DBFILESRouteObjects.DBFILESGetThumbnail;
    DBFILESThumbnailArg *arg = [[DBFILESThumbnailArg alloc] initWithPath:path format:format size:size];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadDataTask *)getThumbnailData:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESGetThumbnail;
    DBFILESThumbnailArg *arg = [[DBFILESThumbnailArg alloc] initWithPath:path];
    return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)getThumbnailData:(NSString *)path format:(DBFILESThumbnailFormat *)format size:(DBFILESThumbnailSize *)size {
    DBRoute *route = DBFILESRouteObjects.DBFILESGetThumbnail;
    DBFILESThumbnailArg *arg = [[DBFILESThumbnailArg alloc] initWithPath:path format:format size:size];
    return [self.client requestDownload:route arg:arg];
}

- (DBRpcTask *)listFolder:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESListFolder;
    DBFILESListFolderArg *arg = [[DBFILESListFolderArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolder:(NSString *)path recursive:(NSNumber *)recursive includeMediaInfo:(NSNumber *)includeMediaInfo includeDeleted:(NSNumber *)includeDeleted includeHasExplicitSharedMembers:(NSNumber *)includeHasExplicitSharedMembers {
    DBRoute *route = DBFILESRouteObjects.DBFILESListFolder;
    DBFILESListFolderArg *arg = [[DBFILESListFolderArg alloc] initWithPath:path recursive:recursive includeMediaInfo:includeMediaInfo includeDeleted:includeDeleted includeHasExplicitSharedMembers:includeHasExplicitSharedMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderContinue:(NSString *)cursor {
    DBRoute *route = DBFILESRouteObjects.DBFILESListFolderContinue;
    DBFILESListFolderContinueArg *arg = [[DBFILESListFolderContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderGetLatestCursor:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESListFolderGetLatestCursor;
    DBFILESListFolderArg *arg = [[DBFILESListFolderArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderGetLatestCursor:(NSString *)path recursive:(NSNumber *)recursive includeMediaInfo:(NSNumber *)includeMediaInfo includeDeleted:(NSNumber *)includeDeleted includeHasExplicitSharedMembers:(NSNumber *)includeHasExplicitSharedMembers {
    DBRoute *route = DBFILESRouteObjects.DBFILESListFolderGetLatestCursor;
    DBFILESListFolderArg *arg = [[DBFILESListFolderArg alloc] initWithPath:path recursive:recursive includeMediaInfo:includeMediaInfo includeDeleted:includeDeleted includeHasExplicitSharedMembers:includeHasExplicitSharedMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderLongpoll:(NSString *)cursor {
    DBRoute *route = DBFILESRouteObjects.DBFILESListFolderLongpoll;
    DBFILESListFolderLongpollArg *arg = [[DBFILESListFolderLongpollArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderLongpoll:(NSString *)cursor timeout:(NSNumber *)timeout {
    DBRoute *route = DBFILESRouteObjects.DBFILESListFolderLongpoll;
    DBFILESListFolderLongpollArg *arg = [[DBFILESListFolderLongpollArg alloc] initWithCursor:cursor timeout:timeout];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listRevisions:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESListRevisions;
    DBFILESListRevisionsArg *arg = [[DBFILESListRevisionsArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listRevisions:(NSString *)path limit:(NSNumber *)limit {
    DBRoute *route = DBFILESRouteObjects.DBFILESListRevisions;
    DBFILESListRevisionsArg *arg = [[DBFILESListRevisionsArg alloc] initWithPath:path limit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)move:(NSString *)fromPath toPath:(NSString *)toPath {
    DBRoute *route = DBFILESRouteObjects.DBFILESMove;
    DBFILESRelocationArg *arg = [[DBFILESRelocationArg alloc] initWithFromPath:fromPath toPath:toPath];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)permanentlyDelete:(NSString *)path {
    DBRoute *route = DBFILESRouteObjects.DBFILESPermanentlyDelete;
    DBFILESDeleteArg *arg = [[DBFILESDeleteArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesAdd:(NSString *)path propertyGroups:(NSArray<DBPROPERTIESPropertyGroup *> *)propertyGroups {
    DBRoute *route = DBFILESRouteObjects.DBFILESPropertiesAdd;
    DBFILESPropertyGroupWithPath *arg = [[DBFILESPropertyGroupWithPath alloc] initWithPath:path propertyGroups:propertyGroups];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesOverwrite:(NSString *)path propertyGroups:(NSArray<DBPROPERTIESPropertyGroup *> *)propertyGroups {
    DBRoute *route = DBFILESRouteObjects.DBFILESPropertiesOverwrite;
    DBFILESPropertyGroupWithPath *arg = [[DBFILESPropertyGroupWithPath alloc] initWithPath:path propertyGroups:propertyGroups];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesRemove:(NSString *)path propertyTemplateIds:(NSArray<NSString *> *)propertyTemplateIds {
    DBRoute *route = DBFILESRouteObjects.DBFILESPropertiesRemove;
    DBFILESRemovePropertiesArg *arg = [[DBFILESRemovePropertiesArg alloc] initWithPath:path propertyTemplateIds:propertyTemplateIds];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesTemplateGet:(NSString *)templateId {
    DBRoute *route = DBFILESRouteObjects.DBFILESPropertiesTemplateGet;
    DBPROPERTIESGetPropertyTemplateArg *arg = [[DBPROPERTIESGetPropertyTemplateArg alloc] initWithTemplateId:templateId];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesTemplateList {
    DBRoute *route = DBFILESRouteObjects.DBFILESPropertiesTemplateList;
    return [self.client requestRpc:route arg:nil];
}

- (DBRpcTask *)propertiesUpdate:(NSString *)path updatePropertyGroups:(NSArray<DBFILESPropertyGroupUpdate *> *)updatePropertyGroups {
    DBRoute *route = DBFILESRouteObjects.DBFILESPropertiesUpdate;
    DBFILESUpdatePropertyGroupArg *arg = [[DBFILESUpdatePropertyGroupArg alloc] initWithPath:path updatePropertyGroups:updatePropertyGroups];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)restore:(NSString *)path rev:(NSString *)rev {
    DBRoute *route = DBFILESRouteObjects.DBFILESRestore;
    DBFILESRestoreArg *arg = [[DBFILESRestoreArg alloc] initWithPath:path rev:rev];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)saveUrl:(NSString *)path url:(NSString *)url {
    DBRoute *route = DBFILESRouteObjects.DBFILESSaveUrl;
    DBFILESSaveUrlArg *arg = [[DBFILESSaveUrlArg alloc] initWithPath:path url:url];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)saveUrlCheckJobStatus:(NSString *)asyncJobId {
    DBRoute *route = DBFILESRouteObjects.DBFILESSaveUrlCheckJobStatus;
    DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)search:(NSString *)path query:(NSString *)query {
    DBRoute *route = DBFILESRouteObjects.DBFILESSearch;
    DBFILESSearchArg *arg = [[DBFILESSearchArg alloc] initWithPath:path query:query];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)search:(NSString *)path query:(NSString *)query start:(NSNumber *)start maxResults:(NSNumber *)maxResults mode:(DBFILESSearchMode *)mode {
    DBRoute *route = DBFILESRouteObjects.DBFILESSearch;
    DBFILESSearchArg *arg = [[DBFILESSearchArg alloc] initWithPath:path query:query start:start maxResults:maxResults mode:mode];
    return [self.client requestRpc:route arg:arg];
}

- (DBUploadTask *)uploadURL:(NSString *)path inputURL:(NSURL *)inputURL {
    DBRoute *route = DBFILESRouteObjects.DBFILESUpload;
    DBFILESCommitInfo *arg = [[DBFILESCommitInfo alloc] initWithPath:path];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBUploadTask *)uploadURL:(NSString *)path mode:(DBFILESWriteMode *)mode autorename:(NSNumber *)autorename clientModified:(NSDate *)clientModified mute:(NSNumber *)mute inputURL:(NSURL *)inputURL {
    DBRoute *route = DBFILESRouteObjects.DBFILESUpload;
    DBFILESCommitInfo *arg = [[DBFILESCommitInfo alloc] initWithPath:path mode:mode autorename:autorename clientModified:clientModified mute:mute];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBUploadTask *)uploadData:(NSString *)path inputData:(NSData *)inputData {
    DBRoute *route = DBFILESRouteObjects.DBFILESUpload;
    DBFILESCommitInfo *arg = [[DBFILESCommitInfo alloc] initWithPath:path];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadData:(NSString *)path mode:(DBFILESWriteMode *)mode autorename:(NSNumber *)autorename clientModified:(NSDate *)clientModified mute:(NSNumber *)mute inputData:(NSData *)inputData {
    DBRoute *route = DBFILESRouteObjects.DBFILESUpload;
    DBFILESCommitInfo *arg = [[DBFILESCommitInfo alloc] initWithPath:path mode:mode autorename:autorename clientModified:clientModified mute:mute];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadStream:(NSString *)path inputStream:(NSInputStream *)inputStream {
    DBRoute *route = DBFILESRouteObjects.DBFILESUpload;
    DBFILESCommitInfo *arg = [[DBFILESCommitInfo alloc] initWithPath:path];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)uploadStream:(NSString *)path mode:(DBFILESWriteMode *)mode autorename:(NSNumber *)autorename clientModified:(NSDate *)clientModified mute:(NSNumber *)mute inputStream:(NSInputStream *)inputStream {
    DBRoute *route = DBFILESRouteObjects.DBFILESUpload;
    DBFILESCommitInfo *arg = [[DBFILESCommitInfo alloc] initWithPath:path mode:mode autorename:autorename clientModified:clientModified mute:mute];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)uploadSessionAppendURL:(NSString *)sessionId offset:(NSNumber *)offset inputURL:(NSURL *)inputURL {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppend;
    DBFILESUploadSessionCursor *arg = [[DBFILESUploadSessionCursor alloc] initWithSessionId:sessionId offset:offset];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBUploadTask *)uploadSessionAppendData:(NSString *)sessionId offset:(NSNumber *)offset inputData:(NSData *)inputData {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppend;
    DBFILESUploadSessionCursor *arg = [[DBFILESUploadSessionCursor alloc] initWithSessionId:sessionId offset:offset];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadSessionAppendStream:(NSString *)sessionId offset:(NSNumber *)offset inputStream:(NSInputStream *)inputStream {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppend;
    DBFILESUploadSessionCursor *arg = [[DBFILESUploadSessionCursor alloc] initWithSessionId:sessionId offset:offset];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)uploadSessionAppendV2URL:(DBFILESUploadSessionCursor *)cursor inputURL:(NSURL *)inputURL {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppendV2;
    DBFILESUploadSessionAppendArg *arg = [[DBFILESUploadSessionAppendArg alloc] initWithCursor:cursor];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBUploadTask *)uploadSessionAppendV2URL:(DBFILESUploadSessionCursor *)cursor close:(NSNumber *)close inputURL:(NSURL *)inputURL {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppendV2;
    DBFILESUploadSessionAppendArg *arg = [[DBFILESUploadSessionAppendArg alloc] initWithCursor:cursor close:close];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBUploadTask *)uploadSessionAppendV2Data:(DBFILESUploadSessionCursor *)cursor inputData:(NSData *)inputData {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppendV2;
    DBFILESUploadSessionAppendArg *arg = [[DBFILESUploadSessionAppendArg alloc] initWithCursor:cursor];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadSessionAppendV2Data:(DBFILESUploadSessionCursor *)cursor close:(NSNumber *)close inputData:(NSData *)inputData {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppendV2;
    DBFILESUploadSessionAppendArg *arg = [[DBFILESUploadSessionAppendArg alloc] initWithCursor:cursor close:close];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadSessionAppendV2Stream:(DBFILESUploadSessionCursor *)cursor inputStream:(NSInputStream *)inputStream {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppendV2;
    DBFILESUploadSessionAppendArg *arg = [[DBFILESUploadSessionAppendArg alloc] initWithCursor:cursor];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)uploadSessionAppendV2Stream:(DBFILESUploadSessionCursor *)cursor close:(NSNumber *)close inputStream:(NSInputStream *)inputStream {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppendV2;
    DBFILESUploadSessionAppendArg *arg = [[DBFILESUploadSessionAppendArg alloc] initWithCursor:cursor close:close];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)uploadSessionFinishURL:(DBFILESUploadSessionCursor *)cursor commit:(DBFILESCommitInfo *)commit inputURL:(NSURL *)inputURL {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionFinish;
    DBFILESUploadSessionFinishArg *arg = [[DBFILESUploadSessionFinishArg alloc] initWithCursor:cursor commit:commit];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBUploadTask *)uploadSessionFinishData:(DBFILESUploadSessionCursor *)cursor commit:(DBFILESCommitInfo *)commit inputData:(NSData *)inputData {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionFinish;
    DBFILESUploadSessionFinishArg *arg = [[DBFILESUploadSessionFinishArg alloc] initWithCursor:cursor commit:commit];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadSessionFinishStream:(DBFILESUploadSessionCursor *)cursor commit:(DBFILESCommitInfo *)commit inputStream:(NSInputStream *)inputStream {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionFinish;
    DBFILESUploadSessionFinishArg *arg = [[DBFILESUploadSessionFinishArg alloc] initWithCursor:cursor commit:commit];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBRpcTask *)uploadSessionFinishBatch:(NSArray<DBFILESUploadSessionFinishArg *> *)entries {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionFinishBatch;
    DBFILESUploadSessionFinishBatchArg *arg = [[DBFILESUploadSessionFinishBatchArg alloc] initWithEntries:entries];
    return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)uploadSessionFinishBatchCheck:(NSString *)asyncJobId {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionFinishBatchCheck;
    DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DBUploadTask *)uploadSessionStartURL:(NSURL *)inputURL {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionStart;
    DBFILESUploadSessionStartArg *arg = [[DBFILESUploadSessionStartArg alloc] init];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBUploadTask *)uploadSessionStartURL:(NSNumber *)close inputURL:(NSURL *)inputURL {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionStart;
    DBFILESUploadSessionStartArg *arg = [[DBFILESUploadSessionStartArg alloc] initWithClose:close];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBUploadTask *)uploadSessionStartData:(NSData *)inputData {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionStart;
    DBFILESUploadSessionStartArg *arg = [[DBFILESUploadSessionStartArg alloc] init];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadSessionStartData:(NSNumber *)close inputData:(NSData *)inputData {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionStart;
    DBFILESUploadSessionStartArg *arg = [[DBFILESUploadSessionStartArg alloc] initWithClose:close];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadSessionStartStream:(NSInputStream *)inputStream {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionStart;
    DBFILESUploadSessionStartArg *arg = [[DBFILESUploadSessionStartArg alloc] init];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)uploadSessionStartStream:(NSNumber *)close inputStream:(NSInputStream *)inputStream {
    DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionStart;
    DBFILESUploadSessionStartArg *arg = [[DBFILESUploadSessionStartArg alloc] initWithClose:close];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

@end
