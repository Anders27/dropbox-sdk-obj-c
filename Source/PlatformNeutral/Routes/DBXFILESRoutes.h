///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBXASYNCLaunchEmptyResult.h"
#import "DBXASYNCLaunchResultBase.h"
#import "DBXASYNCPollArg.h"
#import "DBXASYNCPollError.h"
#import "DBXASYNCPollResultBase.h"
#import "DBXErrors.h"
#import "DBXFILESAddPropertiesError.h"
#import "DBXFILESAlphaGetMetadataArg.h"
#import "DBXFILESAlphaGetMetadataError.h"
#import "DBXFILESCommitInfo.h"
#import "DBXFILESCommitInfoWithProperties.h"
#import "DBXFILESCreateFolderArg.h"
#import "DBXFILESCreateFolderError.h"
#import "DBXFILESDeleteArg.h"
#import "DBXFILESDeleteError.h"
#import "DBXFILESDeletedMetadata.h"
#import "DBXFILESDownloadArg.h"
#import "DBXFILESDownloadError.h"
#import "DBXFILESFileMetadata.h"
#import "DBXFILESFileSharingInfo.h"
#import "DBXFILESFolderMetadata.h"
#import "DBXFILESFolderSharingInfo.h"
#import "DBXFILESGetCopyReferenceArg.h"
#import "DBXFILESGetCopyReferenceError.h"
#import "DBXFILESGetCopyReferenceResult.h"
#import "DBXFILESGetMetadataArg.h"
#import "DBXFILESGetMetadataError.h"
#import "DBXFILESGetTemporaryLinkArg.h"
#import "DBXFILESGetTemporaryLinkError.h"
#import "DBXFILESGetTemporaryLinkResult.h"
#import "DBXFILESInvalidPropertyGroupError.h"
#import "DBXFILESListFolderArg.h"
#import "DBXFILESListFolderContinueArg.h"
#import "DBXFILESListFolderContinueError.h"
#import "DBXFILESListFolderError.h"
#import "DBXFILESListFolderGetLatestCursorResult.h"
#import "DBXFILESListFolderLongpollArg.h"
#import "DBXFILESListFolderLongpollError.h"
#import "DBXFILESListFolderLongpollResult.h"
#import "DBXFILESListFolderResult.h"
#import "DBXFILESListRevisionsArg.h"
#import "DBXFILESListRevisionsError.h"
#import "DBXFILESListRevisionsResult.h"
#import "DBXFILESLookUpPropertiesError.h"
#import "DBXFILESLookupError.h"
#import "DBXFILESMediaInfo.h"
#import "DBXFILESMetadata.h"
#import "DBXFILESPreviewArg.h"
#import "DBXFILESPreviewError.h"
#import "DBXFILESPropertiesError.h"
#import "DBXFILESPropertyGroupUpdate.h"
#import "DBXFILESPropertyGroupWithPath.h"
#import "DBXFILESRelocationArg.h"
#import "DBXFILESRelocationError.h"
#import "DBXFILESRemovePropertiesArg.h"
#import "DBXFILESRemovePropertiesError.h"
#import "DBXFILESRestoreArg.h"
#import "DBXFILESRestoreError.h"
#import "DBXFILESRouteObjects.h"
#import "DBXFILESRoutes.h"
#import "DBXFILESSaveCopyReferenceArg.h"
#import "DBXFILESSaveCopyReferenceError.h"
#import "DBXFILESSaveCopyReferenceResult.h"
#import "DBXFILESSaveUrlArg.h"
#import "DBXFILESSaveUrlError.h"
#import "DBXFILESSaveUrlJobStatus.h"
#import "DBXFILESSaveUrlResult.h"
#import "DBXFILESSearchArg.h"
#import "DBXFILESSearchError.h"
#import "DBXFILESSearchMatch.h"
#import "DBXFILESSearchMode.h"
#import "DBXFILESSearchResult.h"
#import "DBXFILESThumbnailArg.h"
#import "DBXFILESThumbnailError.h"
#import "DBXFILESThumbnailFormat.h"
#import "DBXFILESThumbnailSize.h"
#import "DBXFILESUpdatePropertiesError.h"
#import "DBXFILESUpdatePropertyGroupArg.h"
#import "DBXFILESUploadError.h"
#import "DBXFILESUploadErrorWithProperties.h"
#import "DBXFILESUploadSessionAppendArg.h"
#import "DBXFILESUploadSessionCursor.h"
#import "DBXFILESUploadSessionFinishArg.h"
#import "DBXFILESUploadSessionFinishBatchArg.h"
#import "DBXFILESUploadSessionFinishBatchJobStatus.h"
#import "DBXFILESUploadSessionFinishBatchResult.h"
#import "DBXFILESUploadSessionFinishError.h"
#import "DBXFILESUploadSessionLookupError.h"
#import "DBXFILESUploadSessionOffsetError.h"
#import "DBXFILESUploadSessionStartArg.h"
#import "DBXFILESUploadSessionStartResult.h"
#import "DBXFILESUploadWriteFailed.h"
#import "DBXFILESWriteError.h"
#import "DBXFILESWriteMode.h"
#import "DBXPROPERTIESGetPropertyTemplateArg.h"
#import "DBXPROPERTIESGetPropertyTemplateResult.h"
#import "DBXPROPERTIESListPropertyTemplateIds.h"
#import "DBXPROPERTIESPropertyFieldTemplate.h"
#import "DBXPROPERTIESPropertyGroup.h"
#import "DBXPROPERTIESPropertyGroupTemplate.h"
#import "DBXPROPERTIESPropertyTemplateError.h"
#import "DBXStoneBase.h"
#import "DBXTasks.h"
#import "DBXTransportClient.h"

/// 
/// Routes for the Files namespace
/// 
@interface DBXFILESRoutes : NSObject 

/// An instance of the networking client that each route will use to submit a
/// request.
@property (nonatomic) DBXTransportClient * _Nonnull client;

/// Initializes the `DBXFILESRoutes` namespace container object with a
/// networking client.
- (nonnull instancetype)init:(DBXTransportClient * _Nonnull)client;

/// 
/// Returns the metadata for a file or folder. This is an alpha endpoint compatible with the properties API. Note:
/// Metadata for the root folder is unsupported.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESMetadata * _Nonnull` object on success
/// or a `DBXFILESAlphaGetMetadataError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESMetadata *, DBXFILESAlphaGetMetadataError *> * _Nonnull)alphaGetMetadata:(NSString * _Nonnull)path;

/// 
/// Returns the metadata for a file or folder. This is an alpha endpoint compatible with the properties API. Note:
/// Metadata for the root folder is unsupported.
/// 
/// - parameter includePropertyTemplates: If true, propertyGroups in FileMetadata is set for files with custom
/// properties.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESMetadata * _Nonnull` object on success
/// or a `DBXFILESAlphaGetMetadataError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESMetadata *, DBXFILESAlphaGetMetadataError *> * _Nonnull)alphaGetMetadata:(NSString * _Nonnull)path includeMediaInfo:(NSNumber * _Nullable)includeMediaInfo includeDeleted:(NSNumber * _Nullable)includeDeleted includeHasExplicitSharedMembers:(NSNumber * _Nullable)includeHasExplicitSharedMembers includePropertyTemplates:(NSArray<NSString *> * _Nullable)includePropertyTemplates;

/// 
/// Create a new file with the contents provided in the request. Note that this endpoint is part of the properties API
/// alpha and is slightly different from upload. Do not use this to upload a file larger than 150 MB. Instead, create an
/// upload session with uploadSessionStart.
/// 
/// - parameter inputURL: The file to upload, as an NSURL * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadErrorWithProperties * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadErrorWithProperties *> * _Nonnull)alphaUploadURL:(NSString * _Nonnull)path inputURL:(NSURL * _Nonnull)inputURL;

/// 
/// Create a new file with the contents provided in the request. Note that this endpoint is part of the properties API
/// alpha and is slightly different from upload. Do not use this to upload a file larger than 150 MB. Instead, create an
/// upload session with uploadSessionStart.
/// 
/// - parameter propertyGroups: List of custom properties to add to file.
/// - parameter inputURL: The file to upload, as an NSURL * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadErrorWithProperties * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadErrorWithProperties *> * _Nonnull)alphaUploadURL:(NSString * _Nonnull)path mode:(DBXFILESWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute propertyGroups:(NSArray<DBXPROPERTIESPropertyGroup *> * _Nullable)propertyGroups inputURL:(NSURL * _Nonnull)inputURL;

/// 
/// Create a new file with the contents provided in the request. Note that this endpoint is part of the properties API
/// alpha and is slightly different from upload. Do not use this to upload a file larger than 150 MB. Instead, create an
/// upload session with uploadSessionStart.
/// 
/// - parameter inputData: The file to upload, as an NSData * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadErrorWithProperties * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadErrorWithProperties *> * _Nonnull)alphaUploadData:(NSString * _Nonnull)path inputData:(NSData * _Nonnull)inputData;

/// 
/// Create a new file with the contents provided in the request. Note that this endpoint is part of the properties API
/// alpha and is slightly different from upload. Do not use this to upload a file larger than 150 MB. Instead, create an
/// upload session with uploadSessionStart.
/// 
/// - parameter propertyGroups: List of custom properties to add to file.
/// - parameter inputData: The file to upload, as an NSData * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadErrorWithProperties * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadErrorWithProperties *> * _Nonnull)alphaUploadData:(NSString * _Nonnull)path mode:(DBXFILESWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute propertyGroups:(NSArray<DBXPROPERTIESPropertyGroup *> * _Nullable)propertyGroups inputData:(NSData * _Nonnull)inputData;

/// 
/// Create a new file with the contents provided in the request. Note that this endpoint is part of the properties API
/// alpha and is slightly different from upload. Do not use this to upload a file larger than 150 MB. Instead, create an
/// upload session with uploadSessionStart.
/// 
/// - parameter inputStream: The file to upload, as an NSInputStream * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadErrorWithProperties * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadErrorWithProperties *> * _Nonnull)alphaUploadStream:(NSString * _Nonnull)path inputStream:(NSInputStream * _Nonnull)inputStream;

/// 
/// Create a new file with the contents provided in the request. Note that this endpoint is part of the properties API
/// alpha and is slightly different from upload. Do not use this to upload a file larger than 150 MB. Instead, create an
/// upload session with uploadSessionStart.
/// 
/// - parameter propertyGroups: List of custom properties to add to file.
/// - parameter inputStream: The file to upload, as an NSInputStream * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadErrorWithProperties * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadErrorWithProperties *> * _Nonnull)alphaUploadStream:(NSString * _Nonnull)path mode:(DBXFILESWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute propertyGroups:(NSArray<DBXPROPERTIESPropertyGroup *> * _Nullable)propertyGroups inputStream:(NSInputStream * _Nonnull)inputStream;

/// 
/// Copy a file or folder to a different location in the user's Dropbox. If the source path is a folder all its contents
/// will be copied.
/// 
/// - parameter fromPath: Path in the user's Dropbox to be copied or moved.
/// - parameter toPath: Path in the user's Dropbox that is the destination.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESMetadata * _Nonnull` object on success
/// or a `DBXFILESRelocationError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESMetadata *, DBXFILESRelocationError *> * _Nonnull)dCopy:(NSString * _Nonnull)fromPath toPath:(NSString * _Nonnull)toPath;

/// 
/// Get a copy reference to a file or folder. This reference string can be used to save that file or folder to another
/// user's Dropbox by passing it to dCopyReferenceSave.
/// 
/// - parameter path: The path to the file or folder you want to get a copy reference to.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESGetCopyReferenceResult * _Nonnull`
/// object on success or a `DBXFILESGetCopyReferenceError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESGetCopyReferenceResult *, DBXFILESGetCopyReferenceError *> * _Nonnull)dCopyReferenceGet:(NSString * _Nonnull)path;

/// 
/// Save a copy reference returned by dCopyReferenceGet to the user's Dropbox.
/// 
/// - parameter dCopyReference: A copy reference returned by dCopyReferenceGet.
/// - parameter path: Path in the user's Dropbox that is the destination.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESSaveCopyReferenceResult * _Nonnull`
/// object on success or a `DBXFILESSaveCopyReferenceError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESSaveCopyReferenceResult *, DBXFILESSaveCopyReferenceError *> * _Nonnull)dCopyReferenceSave:(NSString * _Nonnull)dCopyReference path:(NSString * _Nonnull)path;

/// 
/// Create a folder at a given path.
/// 
/// - parameter path: Path in the user's Dropbox to create.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFolderMetadata * _Nonnull` object on
/// success or a `DBXFILESCreateFolderError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESFolderMetadata *, DBXFILESCreateFolderError *> * _Nonnull)createFolder:(NSString * _Nonnull)path;

/// 
/// Delete the file or folder at a given path. If the path is a folder, all its contents will be deleted too. A
/// successful response indicates that the file or folder was deleted. The returned metadata will be the corresponding
/// FileMetadata or FolderMetadata for the item at time of deletion, and not a DeletedMetadata object.
/// 
/// - parameter path: Path in the user's Dropbox to delete.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESMetadata * _Nonnull` object on success
/// or a `DBXFILESDeleteError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESMetadata *, DBXFILESDeleteError *> * _Nonnull)delete_:(NSString * _Nonnull)path;

/// 
/// Download a file from a user's Dropbox.
/// 
/// - parameter path: The path of the file to download.
/// - parameter overwrite: A boolean to set behavior in the event of a naming conflict. `True` will overwrite
/// conflicting file at destination. `False` will take no action (but if left unhandled in destination closure, an
/// NSError will be thrown).
/// - parameter destination: A closure used to compute the destination, given the temporary file location and the
/// response.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESDownloadError * _Nonnull` object on failure.
/// 
- (DBXDownloadURLTask<DBXFILESFileMetadata *, DBXFILESDownloadError *> * _Nonnull)downloadURL:(NSString * _Nonnull)path overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination;

/// 
/// Download a file from a user's Dropbox.
/// 
/// - parameter path: The path of the file to download.
/// - parameter rev: Deprecated. Please specify revision in path instead
/// - parameter overwrite: A boolean to set behavior in the event of a naming conflict. `True` will overwrite
/// conflicting file at destination. `False` will take no action (but if left unhandled in destination closure, an
/// NSError will be thrown).
/// - parameter destination: A closure used to compute the destination, given the temporary file location and the
/// response.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESDownloadError * _Nonnull` object on failure.
/// 
- (DBXDownloadURLTask<DBXFILESFileMetadata *, DBXFILESDownloadError *> * _Nonnull)downloadURL:(NSString * _Nonnull)path rev:(NSString * _Nullable)rev overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination;

/// 
/// Download a file from a user's Dropbox.
/// 
/// - parameter path: The path of the file to download.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESDownloadError * _Nonnull` object on failure.
/// 
- (DBXDownloadDataTask<DBXFILESFileMetadata *, DBXFILESDownloadError *> * _Nonnull)downloadData:(NSString * _Nonnull)path;

/// 
/// Download a file from a user's Dropbox.
/// 
/// - parameter path: The path of the file to download.
/// - parameter rev: Deprecated. Please specify revision in path instead
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESDownloadError * _Nonnull` object on failure.
/// 
- (DBXDownloadDataTask<DBXFILESFileMetadata *, DBXFILESDownloadError *> * _Nonnull)downloadData:(NSString * _Nonnull)path rev:(NSString * _Nullable)rev;

/// 
/// Returns the metadata for a file or folder. Note: Metadata for the root folder is unsupported.
/// 
/// - parameter path: The path of a file or folder on Dropbox.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESMetadata * _Nonnull` object on success
/// or a `DBXFILESGetMetadataError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESMetadata *, DBXFILESGetMetadataError *> * _Nonnull)getMetadata:(NSString * _Nonnull)path;

/// 
/// Returns the metadata for a file or folder. Note: Metadata for the root folder is unsupported.
/// 
/// - parameter path: The path of a file or folder on Dropbox.
/// - parameter includeMediaInfo: If true, mediaInfo in FileMetadata is set for photo and video.
/// - parameter includeDeleted: If true, DeletedMetadata will be returned for deleted file or folder, otherwise notFound
/// in LookupError will be returned.
/// - parameter includeHasExplicitSharedMembers: If true, the results will include a flag for each file indicating
/// whether or not  that file has any explicit members.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESMetadata * _Nonnull` object on success
/// or a `DBXFILESGetMetadataError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESMetadata *, DBXFILESGetMetadataError *> * _Nonnull)getMetadata:(NSString * _Nonnull)path includeMediaInfo:(NSNumber * _Nullable)includeMediaInfo includeDeleted:(NSNumber * _Nullable)includeDeleted includeHasExplicitSharedMembers:(NSNumber * _Nullable)includeHasExplicitSharedMembers;

/// 
/// Get a preview for a file. Currently previews are only generated for the files with  the following extensions: .doc,
/// .docx, .docm, .ppt, .pps, .ppsx, .ppsm, .pptx, .pptm,  .xls, .xlsx, .xlsm, .rtf
/// 
/// - parameter path: The path of the file to preview.
/// - parameter overwrite: A boolean to set behavior in the event of a naming conflict. `True` will overwrite
/// conflicting file at destination. `False` will take no action (but if left unhandled in destination closure, an
/// NSError will be thrown).
/// - parameter destination: A closure used to compute the destination, given the temporary file location and the
/// response.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESPreviewError * _Nonnull` object on failure.
/// 
- (DBXDownloadURLTask<DBXFILESFileMetadata *, DBXFILESPreviewError *> * _Nonnull)getPreviewURL:(NSString * _Nonnull)path overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination;

/// 
/// Get a preview for a file. Currently previews are only generated for the files with  the following extensions: .doc,
/// .docx, .docm, .ppt, .pps, .ppsx, .ppsm, .pptx, .pptm,  .xls, .xlsx, .xlsm, .rtf
/// 
/// - parameter path: The path of the file to preview.
/// - parameter rev: Deprecated. Please specify revision in path instead
/// - parameter overwrite: A boolean to set behavior in the event of a naming conflict. `True` will overwrite
/// conflicting file at destination. `False` will take no action (but if left unhandled in destination closure, an
/// NSError will be thrown).
/// - parameter destination: A closure used to compute the destination, given the temporary file location and the
/// response.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESPreviewError * _Nonnull` object on failure.
/// 
- (DBXDownloadURLTask<DBXFILESFileMetadata *, DBXFILESPreviewError *> * _Nonnull)getPreviewURL:(NSString * _Nonnull)path rev:(NSString * _Nullable)rev overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination;

/// 
/// Get a preview for a file. Currently previews are only generated for the files with  the following extensions: .doc,
/// .docx, .docm, .ppt, .pps, .ppsx, .ppsm, .pptx, .pptm,  .xls, .xlsx, .xlsm, .rtf
/// 
/// - parameter path: The path of the file to preview.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESPreviewError * _Nonnull` object on failure.
/// 
- (DBXDownloadDataTask<DBXFILESFileMetadata *, DBXFILESPreviewError *> * _Nonnull)getPreviewData:(NSString * _Nonnull)path;

/// 
/// Get a preview for a file. Currently previews are only generated for the files with  the following extensions: .doc,
/// .docx, .docm, .ppt, .pps, .ppsx, .ppsm, .pptx, .pptm,  .xls, .xlsx, .xlsm, .rtf
/// 
/// - parameter path: The path of the file to preview.
/// - parameter rev: Deprecated. Please specify revision in path instead
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESPreviewError * _Nonnull` object on failure.
/// 
- (DBXDownloadDataTask<DBXFILESFileMetadata *, DBXFILESPreviewError *> * _Nonnull)getPreviewData:(NSString * _Nonnull)path rev:(NSString * _Nullable)rev;

/// 
/// Get a temporary link to stream content of a file. This link will expire in four hours and afterwards you will get
/// 410 Gone. Content-Type of the link is determined automatically by the file's mime type.
/// 
/// - parameter path: The path to the file you want a temporary link to.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESGetTemporaryLinkResult * _Nonnull`
/// object on success or a `DBXFILESGetTemporaryLinkError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESGetTemporaryLinkResult *, DBXFILESGetTemporaryLinkError *> * _Nonnull)getTemporaryLink:(NSString * _Nonnull)path;

/// 
/// Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg,
/// png, tiff, tif, gif and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.
/// 
/// - parameter path: The path to the image file you want to thumbnail.
/// - parameter overwrite: A boolean to set behavior in the event of a naming conflict. `True` will overwrite
/// conflicting file at destination. `False` will take no action (but if left unhandled in destination closure, an
/// NSError will be thrown).
/// - parameter destination: A closure used to compute the destination, given the temporary file location and the
/// response.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESThumbnailError * _Nonnull` object on failure.
/// 
- (DBXDownloadURLTask<DBXFILESFileMetadata *, DBXFILESThumbnailError *> * _Nonnull)getThumbnailURL:(NSString * _Nonnull)path overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination;

/// 
/// Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg,
/// png, tiff, tif, gif and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.
/// 
/// - parameter path: The path to the image file you want to thumbnail.
/// - parameter format: The format for the thumbnail image, jpeg (default) or png. For  images that are photos, jpeg
/// should be preferred, while png is  better for screenshots and digital arts.
/// - parameter size: The size for the thumbnail image.
/// - parameter overwrite: A boolean to set behavior in the event of a naming conflict. `True` will overwrite
/// conflicting file at destination. `False` will take no action (but if left unhandled in destination closure, an
/// NSError will be thrown).
/// - parameter destination: A closure used to compute the destination, given the temporary file location and the
/// response.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESThumbnailError * _Nonnull` object on failure.
/// 
- (DBXDownloadURLTask<DBXFILESFileMetadata *, DBXFILESThumbnailError *> * _Nonnull)getThumbnailURL:(NSString * _Nonnull)path format:(DBXFILESThumbnailFormat * _Nullable)format size:(DBXFILESThumbnailSize * _Nullable)size overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination;

/// 
/// Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg,
/// png, tiff, tif, gif and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.
/// 
/// - parameter path: The path to the image file you want to thumbnail.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESThumbnailError * _Nonnull` object on failure.
/// 
- (DBXDownloadDataTask<DBXFILESFileMetadata *, DBXFILESThumbnailError *> * _Nonnull)getThumbnailData:(NSString * _Nonnull)path;

/// 
/// Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg,
/// png, tiff, tif, gif and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.
/// 
/// - parameter path: The path to the image file you want to thumbnail.
/// - parameter format: The format for the thumbnail image, jpeg (default) or png. For  images that are photos, jpeg
/// should be preferred, while png is  better for screenshots and digital arts.
/// - parameter size: The size for the thumbnail image.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESThumbnailError * _Nonnull` object on failure.
/// 
- (DBXDownloadDataTask<DBXFILESFileMetadata *, DBXFILESThumbnailError *> * _Nonnull)getThumbnailData:(NSString * _Nonnull)path format:(DBXFILESThumbnailFormat * _Nullable)format size:(DBXFILESThumbnailSize * _Nullable)size;

/// 
/// Returns the contents of a folder.
/// 
/// - parameter path: The path to the folder you want to see the contents of.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESListFolderResult * _Nonnull` object on
/// success or a `DBXFILESListFolderError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESListFolderResult *, DBXFILESListFolderError *> * _Nonnull)listFolder:(NSString * _Nonnull)path;

/// 
/// Returns the contents of a folder.
/// 
/// - parameter path: The path to the folder you want to see the contents of.
/// - parameter recursive: If true, the list folder operation will be applied recursively to all subfolders and the
/// response will contain contents of all subfolders.
/// - parameter includeMediaInfo: If true, mediaInfo in FileMetadata is set for photo and video.
/// - parameter includeDeleted: If true, the results will include entries for files and folders that used to exist but
/// were deleted.
/// - parameter includeHasExplicitSharedMembers: If true, the results will include a flag for each file indicating
/// whether or not  that file has any explicit members.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESListFolderResult * _Nonnull` object on
/// success or a `DBXFILESListFolderError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESListFolderResult *, DBXFILESListFolderError *> * _Nonnull)listFolder:(NSString * _Nonnull)path recursive:(NSNumber * _Nullable)recursive includeMediaInfo:(NSNumber * _Nullable)includeMediaInfo includeDeleted:(NSNumber * _Nullable)includeDeleted includeHasExplicitSharedMembers:(NSNumber * _Nullable)includeHasExplicitSharedMembers;

/// 
/// Once a cursor has been retrieved from listFolder, use this to paginate through all files and retrieve updates to the
/// folder.
/// 
/// - parameter cursor: The cursor returned by your last call to listFolder or listFolderContinue.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESListFolderResult * _Nonnull` object on
/// success or a `DBXFILESListFolderContinueError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESListFolderResult *, DBXFILESListFolderContinueError *> * _Nonnull)listFolderContinue:(NSString * _Nonnull)cursor;

/// 
/// A way to quickly get a cursor for the folder's state. Unlike listFolder, listFolderGetLatestCursor doesn't return
/// any entries. This endpoint is for app which only needs to know about new files and modifications and doesn't need to
/// know about files that already exist in Dropbox.
/// 
/// - parameter path: The path to the folder you want to see the contents of.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESListFolderGetLatestCursorResult *
/// _Nonnull` object on success or a `DBXFILESListFolderError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESListFolderGetLatestCursorResult *, DBXFILESListFolderError *> * _Nonnull)listFolderGetLatestCursor:(NSString * _Nonnull)path;

/// 
/// A way to quickly get a cursor for the folder's state. Unlike listFolder, listFolderGetLatestCursor doesn't return
/// any entries. This endpoint is for app which only needs to know about new files and modifications and doesn't need to
/// know about files that already exist in Dropbox.
/// 
/// - parameter path: The path to the folder you want to see the contents of.
/// - parameter recursive: If true, the list folder operation will be applied recursively to all subfolders and the
/// response will contain contents of all subfolders.
/// - parameter includeMediaInfo: If true, mediaInfo in FileMetadata is set for photo and video.
/// - parameter includeDeleted: If true, the results will include entries for files and folders that used to exist but
/// were deleted.
/// - parameter includeHasExplicitSharedMembers: If true, the results will include a flag for each file indicating
/// whether or not  that file has any explicit members.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESListFolderGetLatestCursorResult *
/// _Nonnull` object on success or a `DBXFILESListFolderError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESListFolderGetLatestCursorResult *, DBXFILESListFolderError *> * _Nonnull)listFolderGetLatestCursor:(NSString * _Nonnull)path recursive:(NSNumber * _Nullable)recursive includeMediaInfo:(NSNumber * _Nullable)includeMediaInfo includeDeleted:(NSNumber * _Nullable)includeDeleted includeHasExplicitSharedMembers:(NSNumber * _Nullable)includeHasExplicitSharedMembers;

/// 
/// A longpoll endpoint to wait for changes on an account. In conjunction with listFolderContinue, this call gives you a
/// low-latency way to monitor an account for file changes. The connection will block until there are changes available
/// or a timeout occurs. This endpoint is useful mostly for client-side apps. If you're looking for server-side
/// notifications, check out our webhooks documentation https://www.dropbox.com/developers/reference/webhooks.
/// 
/// - parameter cursor: A cursor as returned by listFolder or listFolderContinue. Cursors retrieved by setting
/// includeMediaInfo in ListFolderArg to true are not supported.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESListFolderLongpollResult * _Nonnull`
/// object on success or a `DBXFILESListFolderLongpollError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESListFolderLongpollResult *, DBXFILESListFolderLongpollError *> * _Nonnull)listFolderLongpoll:(NSString * _Nonnull)cursor;

/// 
/// A longpoll endpoint to wait for changes on an account. In conjunction with listFolderContinue, this call gives you a
/// low-latency way to monitor an account for file changes. The connection will block until there are changes available
/// or a timeout occurs. This endpoint is useful mostly for client-side apps. If you're looking for server-side
/// notifications, check out our webhooks documentation https://www.dropbox.com/developers/reference/webhooks.
/// 
/// - parameter cursor: A cursor as returned by listFolder or listFolderContinue. Cursors retrieved by setting
/// includeMediaInfo in ListFolderArg to true are not supported.
/// - parameter timeout: A timeout in seconds. The request will block for at most this length of time, plus up to 90
/// seconds of random jitter added to avoid the thundering herd problem. Care should be taken when using this parameter,
/// as some network infrastructure does not support long timeouts.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESListFolderLongpollResult * _Nonnull`
/// object on success or a `DBXFILESListFolderLongpollError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESListFolderLongpollResult *, DBXFILESListFolderLongpollError *> * _Nonnull)listFolderLongpoll:(NSString * _Nonnull)cursor timeout:(NSNumber * _Nullable)timeout;

/// 
/// Return revisions of a file
/// 
/// - parameter path: The path to the file you want to see the revisions of.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESListRevisionsResult * _Nonnull` object
/// on success or a `DBXFILESListRevisionsError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESListRevisionsResult *, DBXFILESListRevisionsError *> * _Nonnull)listRevisions:(NSString * _Nonnull)path;

/// 
/// Return revisions of a file
/// 
/// - parameter path: The path to the file you want to see the revisions of.
/// - parameter limit: The maximum number of revision entries returned.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESListRevisionsResult * _Nonnull` object
/// on success or a `DBXFILESListRevisionsError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESListRevisionsResult *, DBXFILESListRevisionsError *> * _Nonnull)listRevisions:(NSString * _Nonnull)path limit:(NSNumber * _Nullable)limit;

/// 
/// Move a file or folder to a different location in the user's Dropbox. If the source path is a folder all its contents
/// will be moved.
/// 
/// - parameter fromPath: Path in the user's Dropbox to be copied or moved.
/// - parameter toPath: Path in the user's Dropbox that is the destination.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESMetadata * _Nonnull` object on success
/// or a `DBXFILESRelocationError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESMetadata *, DBXFILESRelocationError *> * _Nonnull)move:(NSString * _Nonnull)fromPath toPath:(NSString * _Nonnull)toPath;

/// 
/// Permanently delete the file or folder at a given path (see https://www.dropbox.com/en/help/40). Note: This endpoint
/// is only available for Dropbox Business apps.
/// 
/// - parameter path: Path in the user's Dropbox to delete.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESDeleteError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXFILESDeleteError *> * _Nonnull)permanentlyDelete:(NSString * _Nonnull)path;

/// 
/// Add custom properties to a file using a filled property template. See properties/template/add to create new property
/// templates.
/// 
/// - parameter path: A unique identifier for the file.
/// - parameter propertyGroups: Filled custom property templates associated with a file.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESAddPropertiesError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXFILESAddPropertiesError *> * _Nonnull)propertiesAdd:(NSString * _Nonnull)path propertyGroups:(NSArray<DBXPROPERTIESPropertyGroup *> * _Nonnull)propertyGroups;

/// 
/// Overwrite custom properties from a specified template associated with a file.
/// 
/// - parameter path: A unique identifier for the file.
/// - parameter propertyGroups: Filled custom property templates associated with a file.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESInvalidPropertyGroupError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXFILESInvalidPropertyGroupError *> * _Nonnull)propertiesOverwrite:(NSString * _Nonnull)path propertyGroups:(NSArray<DBXPROPERTIESPropertyGroup *> * _Nonnull)propertyGroups;

/// 
/// Remove all custom properties from a specified template associated with a file. To remove specific property key value
/// pairs, see propertiesUpdate. To update a property template, see properties/template/update. Property templates can't
/// be removed once created.
/// 
/// - parameter path: A unique identifier for the file.
/// - parameter propertyTemplateIds: A list of identifiers for a property template created by route
/// properties/template/add.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESRemovePropertiesError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXFILESRemovePropertiesError *> * _Nonnull)propertiesRemove:(NSString * _Nonnull)path propertyTemplateIds:(NSArray<NSString *> * _Nonnull)propertyTemplateIds;

/// 
/// Get the schema for a specified template.
/// 
/// - parameter templateId: An identifier for property template added by route properties/template/add.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXPROPERTIESGetPropertyTemplateResult *
/// _Nonnull` object on success or a `DBXPROPERTIESPropertyTemplateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXPROPERTIESGetPropertyTemplateResult *, DBXPROPERTIESPropertyTemplateError *> * _Nonnull)propertiesTemplateGet:(NSString * _Nonnull)templateId;

/// 
/// Get the property template identifiers for a user. To get the schema of each template use propertiesTemplateGet.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXPROPERTIESListPropertyTemplateIds *
/// _Nonnull` object on success or a `DBXPROPERTIESPropertyTemplateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXPROPERTIESListPropertyTemplateIds *, DBXPROPERTIESPropertyTemplateError *> * _Nonnull)propertiesTemplateList;

/// 
/// Add, update or remove custom properties from a specified template associated with a file. Fields that already exist
/// and not described in the request will not be modified.
/// 
/// - parameter path: A unique identifier for the file.
/// - parameter updatePropertyGroups: Filled custom property templates associated with a file.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESUpdatePropertiesError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXFILESUpdatePropertiesError *> * _Nonnull)propertiesUpdate:(NSString * _Nonnull)path updatePropertyGroups:(NSArray<DBXFILESPropertyGroupUpdate *> * _Nonnull)updatePropertyGroups;

/// 
/// Restore a file to a specific revision
/// 
/// - parameter path: The path to the file you want to restore.
/// - parameter rev: The revision to restore for the file.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESRestoreError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESFileMetadata *, DBXFILESRestoreError *> * _Nonnull)restore:(NSString * _Nonnull)path rev:(NSString * _Nonnull)rev;

/// 
/// Save a specified URL into a file in user's Dropbox. If the given path already exists, the file will be renamed to
/// avoid the conflict (e.g. myfile (1).txt).
/// 
/// - parameter path: The path in Dropbox where the URL will be saved to.
/// - parameter url: The URL to be saved.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESSaveUrlResult * _Nonnull` object on
/// success or a `DBXFILESSaveUrlError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESSaveUrlResult *, DBXFILESSaveUrlError *> * _Nonnull)saveUrl:(NSString * _Nonnull)path url:(NSString * _Nonnull)url;

/// 
/// Check the status of a saveUrl job.
/// 
/// - parameter asyncJobId: Id of the asynchronous job. This is the value of a response returned from the method that
/// launched the job.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESSaveUrlJobStatus * _Nonnull` object on
/// success or a `DBXASYNCPollError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESSaveUrlJobStatus *, DBXASYNCPollError *> * _Nonnull)saveUrlCheckJobStatus:(NSString * _Nonnull)asyncJobId;

/// 
/// Searches for files and folders. Note: Recent changes may not immediately be reflected in search results due to a
/// short delay in indexing.
/// 
/// - parameter path: The path in the user's Dropbox to search. Should probably be a folder.
/// - parameter query: The string to search for. The search string is split on spaces into multiple tokens. For file
/// name searching, the last token is used for prefix matching (i.e. "bat c" matches "bat cave" but not "batman car").
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESSearchResult * _Nonnull` object on
/// success or a `DBXFILESSearchError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESSearchResult *, DBXFILESSearchError *> * _Nonnull)search:(NSString * _Nonnull)path query:(NSString * _Nonnull)query;

/// 
/// Searches for files and folders. Note: Recent changes may not immediately be reflected in search results due to a
/// short delay in indexing.
/// 
/// - parameter path: The path in the user's Dropbox to search. Should probably be a folder.
/// - parameter query: The string to search for. The search string is split on spaces into multiple tokens. For file
/// name searching, the last token is used for prefix matching (i.e. "bat c" matches "bat cave" but not "batman car").
/// - parameter start: The starting index within the search results (used for paging).
/// - parameter maxResults: The maximum number of search results to return.
/// - parameter mode: The search mode (filename, filename_and_content, or deleted_filename). Note that searching file
/// content is only available for Dropbox Business accounts.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESSearchResult * _Nonnull` object on
/// success or a `DBXFILESSearchError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESSearchResult *, DBXFILESSearchError *> * _Nonnull)search:(NSString * _Nonnull)path query:(NSString * _Nonnull)query start:(NSNumber * _Nullable)start maxResults:(NSNumber * _Nullable)maxResults mode:(DBXFILESSearchMode * _Nullable)mode;

/// 
/// Create a new file with the contents provided in the request. Do not use this to upload a file larger than 150 MB.
/// Instead, create an upload session with uploadSessionStart.
/// 
/// - parameter path: Path in the user's Dropbox to save the file.
/// - parameter inputURL: The file to upload, as an NSURL * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadError *> * _Nonnull)uploadURL:(NSString * _Nonnull)path inputURL:(NSURL * _Nonnull)inputURL;

/// 
/// Create a new file with the contents provided in the request. Do not use this to upload a file larger than 150 MB.
/// Instead, create an upload session with uploadSessionStart.
/// 
/// - parameter path: Path in the user's Dropbox to save the file.
/// - parameter mode: Selects what to do if the file already exists.
/// - parameter autorename: If there's a conflict, as determined by mode, have the Dropbox server try to autorename the
/// file to avoid conflict.
/// - parameter clientModified: The value to store as the clientModified timestamp. Dropbox automatically records the
/// time at which the file was written to the Dropbox servers. It can also record an additional timestamp, provided by
/// Dropbox desktop clients, mobile clients, and API apps of when the file was actually created or modified.
/// - parameter mute: Normally, users are made aware of any file modifications in their Dropbox account via
/// notifications in the client software. If true, this tells the clients that this modification shouldn't result in a
/// user notification.
/// - parameter inputURL: The file to upload, as an NSURL * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadError *> * _Nonnull)uploadURL:(NSString * _Nonnull)path mode:(DBXFILESWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute inputURL:(NSURL * _Nonnull)inputURL;

/// 
/// Create a new file with the contents provided in the request. Do not use this to upload a file larger than 150 MB.
/// Instead, create an upload session with uploadSessionStart.
/// 
/// - parameter path: Path in the user's Dropbox to save the file.
/// - parameter inputData: The file to upload, as an NSData * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadError *> * _Nonnull)uploadData:(NSString * _Nonnull)path inputData:(NSData * _Nonnull)inputData;

/// 
/// Create a new file with the contents provided in the request. Do not use this to upload a file larger than 150 MB.
/// Instead, create an upload session with uploadSessionStart.
/// 
/// - parameter path: Path in the user's Dropbox to save the file.
/// - parameter mode: Selects what to do if the file already exists.
/// - parameter autorename: If there's a conflict, as determined by mode, have the Dropbox server try to autorename the
/// file to avoid conflict.
/// - parameter clientModified: The value to store as the clientModified timestamp. Dropbox automatically records the
/// time at which the file was written to the Dropbox servers. It can also record an additional timestamp, provided by
/// Dropbox desktop clients, mobile clients, and API apps of when the file was actually created or modified.
/// - parameter mute: Normally, users are made aware of any file modifications in their Dropbox account via
/// notifications in the client software. If true, this tells the clients that this modification shouldn't result in a
/// user notification.
/// - parameter inputData: The file to upload, as an NSData * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadError *> * _Nonnull)uploadData:(NSString * _Nonnull)path mode:(DBXFILESWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute inputData:(NSData * _Nonnull)inputData;

/// 
/// Create a new file with the contents provided in the request. Do not use this to upload a file larger than 150 MB.
/// Instead, create an upload session with uploadSessionStart.
/// 
/// - parameter path: Path in the user's Dropbox to save the file.
/// - parameter inputStream: The file to upload, as an NSInputStream * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadError *> * _Nonnull)uploadStream:(NSString * _Nonnull)path inputStream:(NSInputStream * _Nonnull)inputStream;

/// 
/// Create a new file with the contents provided in the request. Do not use this to upload a file larger than 150 MB.
/// Instead, create an upload session with uploadSessionStart.
/// 
/// - parameter path: Path in the user's Dropbox to save the file.
/// - parameter mode: Selects what to do if the file already exists.
/// - parameter autorename: If there's a conflict, as determined by mode, have the Dropbox server try to autorename the
/// file to avoid conflict.
/// - parameter clientModified: The value to store as the clientModified timestamp. Dropbox automatically records the
/// time at which the file was written to the Dropbox servers. It can also record an additional timestamp, provided by
/// Dropbox desktop clients, mobile clients, and API apps of when the file was actually created or modified.
/// - parameter mute: Normally, users are made aware of any file modifications in their Dropbox account via
/// notifications in the client software. If true, this tells the clients that this modification shouldn't result in a
/// user notification.
/// - parameter inputStream: The file to upload, as an NSInputStream * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadError *> * _Nonnull)uploadStream:(NSString * _Nonnull)path mode:(DBXFILESWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute inputStream:(NSInputStream * _Nonnull)inputStream;

/// 
/// DEPRECATED: Append more data to an upload session. A single request should not upload more than 150 MB of file
/// contents.
/// 
/// - parameter sessionId: The upload session ID (returned by uploadSessionStart).
/// - parameter offset: The amount of data that has been uploaded so far. We use this to make sure upload data isn't
/// lost or duplicated in the event of a network error.
/// - parameter inputURL: The file to upload, as an NSURL * object.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESUploadSessionLookupError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXNilObject *, DBXFILESUploadSessionLookupError *> * _Nonnull)uploadSessionAppendURL:(NSString * _Nonnull)sessionId offset:(NSNumber * _Nonnull)offset inputURL:(NSURL * _Nonnull)inputURL __deprecated_msg("upload_session/append is deprecated. Use upload_session/append_v2.");

/// 
/// DEPRECATED: Append more data to an upload session. A single request should not upload more than 150 MB of file
/// contents.
/// 
/// - parameter sessionId: The upload session ID (returned by uploadSessionStart).
/// - parameter offset: The amount of data that has been uploaded so far. We use this to make sure upload data isn't
/// lost or duplicated in the event of a network error.
/// - parameter inputData: The file to upload, as an NSData * object.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESUploadSessionLookupError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXNilObject *, DBXFILESUploadSessionLookupError *> * _Nonnull)uploadSessionAppendData:(NSString * _Nonnull)sessionId offset:(NSNumber * _Nonnull)offset inputData:(NSData * _Nonnull)inputData __deprecated_msg("upload_session/append is deprecated. Use upload_session/append_v2.");

/// 
/// DEPRECATED: Append more data to an upload session. A single request should not upload more than 150 MB of file
/// contents.
/// 
/// - parameter sessionId: The upload session ID (returned by uploadSessionStart).
/// - parameter offset: The amount of data that has been uploaded so far. We use this to make sure upload data isn't
/// lost or duplicated in the event of a network error.
/// - parameter inputStream: The file to upload, as an NSInputStream * object.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESUploadSessionLookupError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXNilObject *, DBXFILESUploadSessionLookupError *> * _Nonnull)uploadSessionAppendStream:(NSString * _Nonnull)sessionId offset:(NSNumber * _Nonnull)offset inputStream:(NSInputStream * _Nonnull)inputStream __deprecated_msg("upload_session/append is deprecated. Use upload_session/append_v2.");

/// 
/// Append more data to an upload session. When the parameter close is set, this call will close the session. A single
/// request should not upload more than 150 MB of file contents.
/// 
/// - parameter cursor: Contains the upload session ID and the offset.
/// - parameter inputURL: The file to upload, as an NSURL * object.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESUploadSessionLookupError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXNilObject *, DBXFILESUploadSessionLookupError *> * _Nonnull)uploadSessionAppendV2URL:(DBXFILESUploadSessionCursor * _Nonnull)cursor inputURL:(NSURL * _Nonnull)inputURL;

/// 
/// Append more data to an upload session. When the parameter close is set, this call will close the session. A single
/// request should not upload more than 150 MB of file contents.
/// 
/// - parameter cursor: Contains the upload session ID and the offset.
/// - parameter close: If true, the current session will be closed, at which point you won't be able to call
/// uploadSessionAppendV2 anymore with the current session.
/// - parameter inputURL: The file to upload, as an NSURL * object.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESUploadSessionLookupError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXNilObject *, DBXFILESUploadSessionLookupError *> * _Nonnull)uploadSessionAppendV2URL:(DBXFILESUploadSessionCursor * _Nonnull)cursor close:(NSNumber * _Nullable)close inputURL:(NSURL * _Nonnull)inputURL;

/// 
/// Append more data to an upload session. When the parameter close is set, this call will close the session. A single
/// request should not upload more than 150 MB of file contents.
/// 
/// - parameter cursor: Contains the upload session ID and the offset.
/// - parameter inputData: The file to upload, as an NSData * object.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESUploadSessionLookupError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXNilObject *, DBXFILESUploadSessionLookupError *> * _Nonnull)uploadSessionAppendV2Data:(DBXFILESUploadSessionCursor * _Nonnull)cursor inputData:(NSData * _Nonnull)inputData;

/// 
/// Append more data to an upload session. When the parameter close is set, this call will close the session. A single
/// request should not upload more than 150 MB of file contents.
/// 
/// - parameter cursor: Contains the upload session ID and the offset.
/// - parameter close: If true, the current session will be closed, at which point you won't be able to call
/// uploadSessionAppendV2 anymore with the current session.
/// - parameter inputData: The file to upload, as an NSData * object.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESUploadSessionLookupError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXNilObject *, DBXFILESUploadSessionLookupError *> * _Nonnull)uploadSessionAppendV2Data:(DBXFILESUploadSessionCursor * _Nonnull)cursor close:(NSNumber * _Nullable)close inputData:(NSData * _Nonnull)inputData;

/// 
/// Append more data to an upload session. When the parameter close is set, this call will close the session. A single
/// request should not upload more than 150 MB of file contents.
/// 
/// - parameter cursor: Contains the upload session ID and the offset.
/// - parameter inputStream: The file to upload, as an NSInputStream * object.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESUploadSessionLookupError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXNilObject *, DBXFILESUploadSessionLookupError *> * _Nonnull)uploadSessionAppendV2Stream:(DBXFILESUploadSessionCursor * _Nonnull)cursor inputStream:(NSInputStream * _Nonnull)inputStream;

/// 
/// Append more data to an upload session. When the parameter close is set, this call will close the session. A single
/// request should not upload more than 150 MB of file contents.
/// 
/// - parameter cursor: Contains the upload session ID and the offset.
/// - parameter close: If true, the current session will be closed, at which point you won't be able to call
/// uploadSessionAppendV2 anymore with the current session.
/// - parameter inputStream: The file to upload, as an NSInputStream * object.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXFILESUploadSessionLookupError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXNilObject *, DBXFILESUploadSessionLookupError *> * _Nonnull)uploadSessionAppendV2Stream:(DBXFILESUploadSessionCursor * _Nonnull)cursor close:(NSNumber * _Nullable)close inputStream:(NSInputStream * _Nonnull)inputStream;

/// 
/// Finish an upload session and save the uploaded data to the given file path. A single request should not upload more
/// than 150 MB of file contents.
/// 
/// - parameter cursor: Contains the upload session ID and the offset.
/// - parameter commit: Contains the path and other optional modifiers for the commit.
/// - parameter inputURL: The file to upload, as an NSURL * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadSessionFinishError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadSessionFinishError *> * _Nonnull)uploadSessionFinishURL:(DBXFILESUploadSessionCursor * _Nonnull)cursor commit:(DBXFILESCommitInfo * _Nonnull)commit inputURL:(NSURL * _Nonnull)inputURL;

/// 
/// Finish an upload session and save the uploaded data to the given file path. A single request should not upload more
/// than 150 MB of file contents.
/// 
/// - parameter cursor: Contains the upload session ID and the offset.
/// - parameter commit: Contains the path and other optional modifiers for the commit.
/// - parameter inputData: The file to upload, as an NSData * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadSessionFinishError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadSessionFinishError *> * _Nonnull)uploadSessionFinishData:(DBXFILESUploadSessionCursor * _Nonnull)cursor commit:(DBXFILESCommitInfo * _Nonnull)commit inputData:(NSData * _Nonnull)inputData;

/// 
/// Finish an upload session and save the uploaded data to the given file path. A single request should not upload more
/// than 150 MB of file contents.
/// 
/// - parameter cursor: Contains the upload session ID and the offset.
/// - parameter commit: Contains the path and other optional modifiers for the commit.
/// - parameter inputStream: The file to upload, as an NSInputStream * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESFileMetadata * _Nonnull` object on
/// success or a `DBXFILESUploadSessionFinishError * _Nonnull` object on failure.
/// 
- (DBXUploadTask<DBXFILESFileMetadata *, DBXFILESUploadSessionFinishError *> * _Nonnull)uploadSessionFinishStream:(DBXFILESUploadSessionCursor * _Nonnull)cursor commit:(DBXFILESCommitInfo * _Nonnull)commit inputStream:(NSInputStream * _Nonnull)inputStream;

/// 
/// This route helps you commit many files at once into a user's Dropbox. Use uploadSessionStart and
/// uploadSessionAppendV2 to upload file contents. We recommend uploading many files in parallel to increase throughput.
/// Once the file contents have been uploaded, rather than calling uploadSessionFinish, use this route to finish all
/// your upload sessions in a single request. close in UploadSessionStartArg or close in UploadSessionAppendArg needs to
/// be true for last uploadSessionStart or uploadSessionAppendV2 call. This route will return job_id immediately and do
/// the async commit job in background. We have another route uploadSessionFinishBatchCheck to check the job status. For
/// the same account, this route should be executed serially. That means you should not start next job before current
/// job finishes. Also we only allow up to 1000 entries in a single request
/// 
/// - parameter entries: Commit information for each file in the batch.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXASYNCLaunchEmptyResult * _Nonnull` object on
/// success or a `void` object on failure.
/// 
- (DBXRpcTask<DBXASYNCLaunchEmptyResult *, DBXNilObject *> * _Nonnull)uploadSessionFinishBatch:(NSArray<DBXFILESUploadSessionFinishArg *> * _Nonnull)entries;

/// 
/// Returns the status of an asynchronous job for uploadSessionFinishBatch. If success, it returns list of result for
/// each entry
/// 
/// - parameter asyncJobId: Id of the asynchronous job. This is the value of a response returned from the method that
/// launched the job.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESUploadSessionFinishBatchJobStatus *
/// _Nonnull` object on success or a `DBXASYNCPollError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXFILESUploadSessionFinishBatchJobStatus *, DBXASYNCPollError *> * _Nonnull)uploadSessionFinishBatchCheck:(NSString * _Nonnull)asyncJobId;

/// 
/// Upload sessions allow you to upload a single file using multiple requests. This call starts a new upload session
/// with the given data.  You can then use uploadSessionAppendV2 to add more data and uploadSessionFinish to save all
/// the data to a file in Dropbox. A single request should not upload more than 150 MB of file contents.
/// 
/// - parameter inputURL: The file to upload, as an NSURL * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESUploadSessionStartResult * _Nonnull`
/// object on success or a `void` object on failure.
/// 
- (DBXUploadTask<DBXFILESUploadSessionStartResult *, DBXNilObject *> * _Nonnull)uploadSessionStartURL:(NSURL * _Nonnull)inputURL;

/// 
/// Upload sessions allow you to upload a single file using multiple requests. This call starts a new upload session
/// with the given data.  You can then use uploadSessionAppendV2 to add more data and uploadSessionFinish to save all
/// the data to a file in Dropbox. A single request should not upload more than 150 MB of file contents.
/// 
/// - parameter close: If true, the current session will be closed, at which point you won't be able to call
/// uploadSessionAppendV2 anymore with the current session.
/// - parameter inputURL: The file to upload, as an NSURL * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESUploadSessionStartResult * _Nonnull`
/// object on success or a `void` object on failure.
/// 
- (DBXUploadTask<DBXFILESUploadSessionStartResult *, DBXNilObject *> * _Nonnull)uploadSessionStartURL:(NSNumber * _Nullable)close inputURL:(NSURL * _Nonnull)inputURL;

/// 
/// Upload sessions allow you to upload a single file using multiple requests. This call starts a new upload session
/// with the given data.  You can then use uploadSessionAppendV2 to add more data and uploadSessionFinish to save all
/// the data to a file in Dropbox. A single request should not upload more than 150 MB of file contents.
/// 
/// - parameter inputData: The file to upload, as an NSData * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESUploadSessionStartResult * _Nonnull`
/// object on success or a `void` object on failure.
/// 
- (DBXUploadTask<DBXFILESUploadSessionStartResult *, DBXNilObject *> * _Nonnull)uploadSessionStartData:(NSData * _Nonnull)inputData;

/// 
/// Upload sessions allow you to upload a single file using multiple requests. This call starts a new upload session
/// with the given data.  You can then use uploadSessionAppendV2 to add more data and uploadSessionFinish to save all
/// the data to a file in Dropbox. A single request should not upload more than 150 MB of file contents.
/// 
/// - parameter close: If true, the current session will be closed, at which point you won't be able to call
/// uploadSessionAppendV2 anymore with the current session.
/// - parameter inputData: The file to upload, as an NSData * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESUploadSessionStartResult * _Nonnull`
/// object on success or a `void` object on failure.
/// 
- (DBXUploadTask<DBXFILESUploadSessionStartResult *, DBXNilObject *> * _Nonnull)uploadSessionStartData:(NSNumber * _Nullable)close inputData:(NSData * _Nonnull)inputData;

/// 
/// Upload sessions allow you to upload a single file using multiple requests. This call starts a new upload session
/// with the given data.  You can then use uploadSessionAppendV2 to add more data and uploadSessionFinish to save all
/// the data to a file in Dropbox. A single request should not upload more than 150 MB of file contents.
/// 
/// - parameter inputStream: The file to upload, as an NSInputStream * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESUploadSessionStartResult * _Nonnull`
/// object on success or a `void` object on failure.
/// 
- (DBXUploadTask<DBXFILESUploadSessionStartResult *, DBXNilObject *> * _Nonnull)uploadSessionStartStream:(NSInputStream * _Nonnull)inputStream;

/// 
/// Upload sessions allow you to upload a single file using multiple requests. This call starts a new upload session
/// with the given data.  You can then use uploadSessionAppendV2 to add more data and uploadSessionFinish to save all
/// the data to a file in Dropbox. A single request should not upload more than 150 MB of file contents.
/// 
/// - parameter close: If true, the current session will be closed, at which point you won't be able to call
/// uploadSessionAppendV2 anymore with the current session.
/// - parameter inputStream: The file to upload, as an NSInputStream * object.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXFILESUploadSessionStartResult * _Nonnull`
/// object on success or a `void` object on failure.
/// 
- (DBXUploadTask<DBXFILESUploadSessionStartResult *, DBXNilObject *> * _Nonnull)uploadSessionStartStream:(NSNumber * _Nullable)close inputStream:(NSInputStream * _Nonnull)inputStream;

@end
