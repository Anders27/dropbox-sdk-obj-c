///
/// Auto-generated by Stone, do not modify.
///

#import "DBXFILESRoutes.h"

@implementation DBXFILESRoutes 

- (instancetype)init:(DBXTransportClient *)client {
    self = [super init];
    if (self != nil) {
        _client = client;
    }
    return self;
}
- (DBXRpcTask *)alphaGetMetadata:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESAlphaGetMetadata;
    DBXFILESAlphaGetMetadataArg *arg = [[DBXFILESAlphaGetMetadataArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)alphaGetMetadata:(NSString *)path includeMediaInfo:(NSNumber *)includeMediaInfo includeDeleted:(NSNumber *)includeDeleted includeHasExplicitSharedMembers:(NSNumber *)includeHasExplicitSharedMembers includePropertyTemplates:(NSArray<NSString *> *)includePropertyTemplates {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESAlphaGetMetadata;
    DBXFILESAlphaGetMetadataArg *arg = [[DBXFILESAlphaGetMetadataArg alloc] initWithPath:path includeMediaInfo:includeMediaInfo includeDeleted:includeDeleted includeHasExplicitSharedMembers:includeHasExplicitSharedMembers includePropertyTemplates:includePropertyTemplates];
    return [self.client requestRpc:route arg:arg];
}

- (DBXUploadTask *)alphaUploadURL:(NSString *)path inputURL:(NSURL *)inputURL {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESAlphaUpload;
    DBXFILESCommitInfoWithProperties *arg = [[DBXFILESCommitInfoWithProperties alloc] initWithPath:path];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBXUploadTask *)alphaUploadURL:(NSString *)path mode:(DBXFILESWriteMode *)mode autorename:(NSNumber *)autorename clientModified:(NSDate *)clientModified mute:(NSNumber *)mute propertyGroups:(NSArray<DBXPROPERTIESPropertyGroup *> *)propertyGroups inputURL:(NSURL *)inputURL {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESAlphaUpload;
    DBXFILESCommitInfoWithProperties *arg = [[DBXFILESCommitInfoWithProperties alloc] initWithPath:path mode:mode autorename:autorename clientModified:clientModified mute:mute propertyGroups:propertyGroups];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBXUploadTask *)alphaUploadData:(NSString *)path inputData:(NSData *)inputData {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESAlphaUpload;
    DBXFILESCommitInfoWithProperties *arg = [[DBXFILESCommitInfoWithProperties alloc] initWithPath:path];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBXUploadTask *)alphaUploadData:(NSString *)path mode:(DBXFILESWriteMode *)mode autorename:(NSNumber *)autorename clientModified:(NSDate *)clientModified mute:(NSNumber *)mute propertyGroups:(NSArray<DBXPROPERTIESPropertyGroup *> *)propertyGroups inputData:(NSData *)inputData {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESAlphaUpload;
    DBXFILESCommitInfoWithProperties *arg = [[DBXFILESCommitInfoWithProperties alloc] initWithPath:path mode:mode autorename:autorename clientModified:clientModified mute:mute propertyGroups:propertyGroups];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBXUploadTask *)alphaUploadStream:(NSString *)path inputStream:(NSInputStream *)inputStream {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESAlphaUpload;
    DBXFILESCommitInfoWithProperties *arg = [[DBXFILESCommitInfoWithProperties alloc] initWithPath:path];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBXUploadTask *)alphaUploadStream:(NSString *)path mode:(DBXFILESWriteMode *)mode autorename:(NSNumber *)autorename clientModified:(NSDate *)clientModified mute:(NSNumber *)mute propertyGroups:(NSArray<DBXPROPERTIESPropertyGroup *> *)propertyGroups inputStream:(NSInputStream *)inputStream {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESAlphaUpload;
    DBXFILESCommitInfoWithProperties *arg = [[DBXFILESCommitInfoWithProperties alloc] initWithPath:path mode:mode autorename:autorename clientModified:clientModified mute:mute propertyGroups:propertyGroups];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBXRpcTask *)dCopy:(NSString *)fromPath toPath:(NSString *)toPath {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESDCopy;
    DBXFILESRelocationArg *arg = [[DBXFILESRelocationArg alloc] initWithFromPath:fromPath toPath:toPath];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)dCopyReferenceGet:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESDCopyReferenceGet;
    DBXFILESGetCopyReferenceArg *arg = [[DBXFILESGetCopyReferenceArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)dCopyReferenceSave:(NSString *)dCopyReference path:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESDCopyReferenceSave;
    DBXFILESSaveCopyReferenceArg *arg = [[DBXFILESSaveCopyReferenceArg alloc] initWithDCopyReference:dCopyReference path:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)createFolder:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESCreateFolder;
    DBXFILESCreateFolderArg *arg = [[DBXFILESCreateFolderArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)delete_:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESDelete_;
    DBXFILESDeleteArg *arg = [[DBXFILESDeleteArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXDownloadURLTask *)downloadURL:(NSString *)path overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESDownload;
    DBXFILESDownloadArg *arg = [[DBXFILESDownloadArg alloc] initWithPath:path];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBXDownloadURLTask *)downloadURL:(NSString *)path rev:(NSString *)rev overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESDownload;
    DBXFILESDownloadArg *arg = [[DBXFILESDownloadArg alloc] initWithPath:path rev:rev];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBXDownloadDataTask *)downloadData:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESDownload;
    DBXFILESDownloadArg *arg = [[DBXFILESDownloadArg alloc] initWithPath:path];
    return [self.client requestDownload:route arg:arg];
}

- (DBXDownloadDataTask *)downloadData:(NSString *)path rev:(NSString *)rev {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESDownload;
    DBXFILESDownloadArg *arg = [[DBXFILESDownloadArg alloc] initWithPath:path rev:rev];
    return [self.client requestDownload:route arg:arg];
}

- (DBXRpcTask *)getMetadata:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESGetMetadata;
    DBXFILESGetMetadataArg *arg = [[DBXFILESGetMetadataArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)getMetadata:(NSString *)path includeMediaInfo:(NSNumber *)includeMediaInfo includeDeleted:(NSNumber *)includeDeleted includeHasExplicitSharedMembers:(NSNumber *)includeHasExplicitSharedMembers {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESGetMetadata;
    DBXFILESGetMetadataArg *arg = [[DBXFILESGetMetadataArg alloc] initWithPath:path includeMediaInfo:includeMediaInfo includeDeleted:includeDeleted includeHasExplicitSharedMembers:includeHasExplicitSharedMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DBXDownloadURLTask *)getPreviewURL:(NSString *)path overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESGetPreview;
    DBXFILESPreviewArg *arg = [[DBXFILESPreviewArg alloc] initWithPath:path];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBXDownloadURLTask *)getPreviewURL:(NSString *)path rev:(NSString *)rev overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESGetPreview;
    DBXFILESPreviewArg *arg = [[DBXFILESPreviewArg alloc] initWithPath:path rev:rev];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBXDownloadDataTask *)getPreviewData:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESGetPreview;
    DBXFILESPreviewArg *arg = [[DBXFILESPreviewArg alloc] initWithPath:path];
    return [self.client requestDownload:route arg:arg];
}

- (DBXDownloadDataTask *)getPreviewData:(NSString *)path rev:(NSString *)rev {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESGetPreview;
    DBXFILESPreviewArg *arg = [[DBXFILESPreviewArg alloc] initWithPath:path rev:rev];
    return [self.client requestDownload:route arg:arg];
}

- (DBXRpcTask *)getTemporaryLink:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESGetTemporaryLink;
    DBXFILESGetTemporaryLinkArg *arg = [[DBXFILESGetTemporaryLinkArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXDownloadURLTask *)getThumbnailURL:(NSString *)path overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESGetThumbnail;
    DBXFILESThumbnailArg *arg = [[DBXFILESThumbnailArg alloc] initWithPath:path];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBXDownloadURLTask *)getThumbnailURL:(NSString *)path format:(DBXFILESThumbnailFormat *)format size:(DBXFILESThumbnailSize *)size overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESGetThumbnail;
    DBXFILESThumbnailArg *arg = [[DBXFILESThumbnailArg alloc] initWithPath:path format:format size:size];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBXDownloadDataTask *)getThumbnailData:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESGetThumbnail;
    DBXFILESThumbnailArg *arg = [[DBXFILESThumbnailArg alloc] initWithPath:path];
    return [self.client requestDownload:route arg:arg];
}

- (DBXDownloadDataTask *)getThumbnailData:(NSString *)path format:(DBXFILESThumbnailFormat *)format size:(DBXFILESThumbnailSize *)size {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESGetThumbnail;
    DBXFILESThumbnailArg *arg = [[DBXFILESThumbnailArg alloc] initWithPath:path format:format size:size];
    return [self.client requestDownload:route arg:arg];
}

- (DBXRpcTask *)listFolder:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESListFolder;
    DBXFILESListFolderArg *arg = [[DBXFILESListFolderArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFolder:(NSString *)path recursive:(NSNumber *)recursive includeMediaInfo:(NSNumber *)includeMediaInfo includeDeleted:(NSNumber *)includeDeleted includeHasExplicitSharedMembers:(NSNumber *)includeHasExplicitSharedMembers {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESListFolder;
    DBXFILESListFolderArg *arg = [[DBXFILESListFolderArg alloc] initWithPath:path recursive:recursive includeMediaInfo:includeMediaInfo includeDeleted:includeDeleted includeHasExplicitSharedMembers:includeHasExplicitSharedMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFolderContinue:(NSString *)cursor {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESListFolderContinue;
    DBXFILESListFolderContinueArg *arg = [[DBXFILESListFolderContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFolderGetLatestCursor:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESListFolderGetLatestCursor;
    DBXFILESListFolderArg *arg = [[DBXFILESListFolderArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFolderGetLatestCursor:(NSString *)path recursive:(NSNumber *)recursive includeMediaInfo:(NSNumber *)includeMediaInfo includeDeleted:(NSNumber *)includeDeleted includeHasExplicitSharedMembers:(NSNumber *)includeHasExplicitSharedMembers {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESListFolderGetLatestCursor;
    DBXFILESListFolderArg *arg = [[DBXFILESListFolderArg alloc] initWithPath:path recursive:recursive includeMediaInfo:includeMediaInfo includeDeleted:includeDeleted includeHasExplicitSharedMembers:includeHasExplicitSharedMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFolderLongpoll:(NSString *)cursor {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESListFolderLongpoll;
    DBXFILESListFolderLongpollArg *arg = [[DBXFILESListFolderLongpollArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFolderLongpoll:(NSString *)cursor timeout:(NSNumber *)timeout {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESListFolderLongpoll;
    DBXFILESListFolderLongpollArg *arg = [[DBXFILESListFolderLongpollArg alloc] initWithCursor:cursor timeout:timeout];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listRevisions:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESListRevisions;
    DBXFILESListRevisionsArg *arg = [[DBXFILESListRevisionsArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listRevisions:(NSString *)path limit:(NSNumber *)limit {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESListRevisions;
    DBXFILESListRevisionsArg *arg = [[DBXFILESListRevisionsArg alloc] initWithPath:path limit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)move:(NSString *)fromPath toPath:(NSString *)toPath {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESMove;
    DBXFILESRelocationArg *arg = [[DBXFILESRelocationArg alloc] initWithFromPath:fromPath toPath:toPath];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)permanentlyDelete:(NSString *)path {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESPermanentlyDelete;
    DBXFILESDeleteArg *arg = [[DBXFILESDeleteArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)propertiesAdd:(NSString *)path propertyGroups:(NSArray<DBXPROPERTIESPropertyGroup *> *)propertyGroups {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESPropertiesAdd;
    DBXFILESPropertyGroupWithPath *arg = [[DBXFILESPropertyGroupWithPath alloc] initWithPath:path propertyGroups:propertyGroups];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)propertiesOverwrite:(NSString *)path propertyGroups:(NSArray<DBXPROPERTIESPropertyGroup *> *)propertyGroups {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESPropertiesOverwrite;
    DBXFILESPropertyGroupWithPath *arg = [[DBXFILESPropertyGroupWithPath alloc] initWithPath:path propertyGroups:propertyGroups];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)propertiesRemove:(NSString *)path propertyTemplateIds:(NSArray<NSString *> *)propertyTemplateIds {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESPropertiesRemove;
    DBXFILESRemovePropertiesArg *arg = [[DBXFILESRemovePropertiesArg alloc] initWithPath:path propertyTemplateIds:propertyTemplateIds];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)propertiesTemplateGet:(NSString *)templateId {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESPropertiesTemplateGet;
    DBXPROPERTIESGetPropertyTemplateArg *arg = [[DBXPROPERTIESGetPropertyTemplateArg alloc] initWithTemplateId:templateId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)propertiesTemplateList {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESPropertiesTemplateList;
    return [self.client requestRpc:route arg:nil];
}

- (DBXRpcTask *)propertiesUpdate:(NSString *)path updatePropertyGroups:(NSArray<DBXFILESPropertyGroupUpdate *> *)updatePropertyGroups {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESPropertiesUpdate;
    DBXFILESUpdatePropertyGroupArg *arg = [[DBXFILESUpdatePropertyGroupArg alloc] initWithPath:path updatePropertyGroups:updatePropertyGroups];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)restore:(NSString *)path rev:(NSString *)rev {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESRestore;
    DBXFILESRestoreArg *arg = [[DBXFILESRestoreArg alloc] initWithPath:path rev:rev];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)saveUrl:(NSString *)path url:(NSString *)url {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESSaveUrl;
    DBXFILESSaveUrlArg *arg = [[DBXFILESSaveUrlArg alloc] initWithPath:path url:url];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)saveUrlCheckJobStatus:(NSString *)asyncJobId {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESSaveUrlCheckJobStatus;
    DBXASYNCPollArg *arg = [[DBXASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)search:(NSString *)path query:(NSString *)query {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESSearch;
    DBXFILESSearchArg *arg = [[DBXFILESSearchArg alloc] initWithPath:path query:query];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)search:(NSString *)path query:(NSString *)query start:(NSNumber *)start maxResults:(NSNumber *)maxResults mode:(DBXFILESSearchMode *)mode {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESSearch;
    DBXFILESSearchArg *arg = [[DBXFILESSearchArg alloc] initWithPath:path query:query start:start maxResults:maxResults mode:mode];
    return [self.client requestRpc:route arg:arg];
}

- (DBXUploadTask *)uploadURL:(NSString *)path inputURL:(NSURL *)inputURL {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUpload;
    DBXFILESCommitInfo *arg = [[DBXFILESCommitInfo alloc] initWithPath:path];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBXUploadTask *)uploadURL:(NSString *)path mode:(DBXFILESWriteMode *)mode autorename:(NSNumber *)autorename clientModified:(NSDate *)clientModified mute:(NSNumber *)mute inputURL:(NSURL *)inputURL {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUpload;
    DBXFILESCommitInfo *arg = [[DBXFILESCommitInfo alloc] initWithPath:path mode:mode autorename:autorename clientModified:clientModified mute:mute];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBXUploadTask *)uploadData:(NSString *)path inputData:(NSData *)inputData {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUpload;
    DBXFILESCommitInfo *arg = [[DBXFILESCommitInfo alloc] initWithPath:path];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBXUploadTask *)uploadData:(NSString *)path mode:(DBXFILESWriteMode *)mode autorename:(NSNumber *)autorename clientModified:(NSDate *)clientModified mute:(NSNumber *)mute inputData:(NSData *)inputData {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUpload;
    DBXFILESCommitInfo *arg = [[DBXFILESCommitInfo alloc] initWithPath:path mode:mode autorename:autorename clientModified:clientModified mute:mute];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBXUploadTask *)uploadStream:(NSString *)path inputStream:(NSInputStream *)inputStream {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUpload;
    DBXFILESCommitInfo *arg = [[DBXFILESCommitInfo alloc] initWithPath:path];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBXUploadTask *)uploadStream:(NSString *)path mode:(DBXFILESWriteMode *)mode autorename:(NSNumber *)autorename clientModified:(NSDate *)clientModified mute:(NSNumber *)mute inputStream:(NSInputStream *)inputStream {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUpload;
    DBXFILESCommitInfo *arg = [[DBXFILESCommitInfo alloc] initWithPath:path mode:mode autorename:autorename clientModified:clientModified mute:mute];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBXUploadTask *)uploadSessionAppendURL:(NSString *)sessionId offset:(NSNumber *)offset inputURL:(NSURL *)inputURL {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionAppend;
    DBXFILESUploadSessionCursor *arg = [[DBXFILESUploadSessionCursor alloc] initWithSessionId:sessionId offset:offset];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBXUploadTask *)uploadSessionAppendData:(NSString *)sessionId offset:(NSNumber *)offset inputData:(NSData *)inputData {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionAppend;
    DBXFILESUploadSessionCursor *arg = [[DBXFILESUploadSessionCursor alloc] initWithSessionId:sessionId offset:offset];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBXUploadTask *)uploadSessionAppendStream:(NSString *)sessionId offset:(NSNumber *)offset inputStream:(NSInputStream *)inputStream {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionAppend;
    DBXFILESUploadSessionCursor *arg = [[DBXFILESUploadSessionCursor alloc] initWithSessionId:sessionId offset:offset];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBXUploadTask *)uploadSessionAppendV2URL:(DBXFILESUploadSessionCursor *)cursor inputURL:(NSURL *)inputURL {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionAppendV2;
    DBXFILESUploadSessionAppendArg *arg = [[DBXFILESUploadSessionAppendArg alloc] initWithCursor:cursor];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBXUploadTask *)uploadSessionAppendV2URL:(DBXFILESUploadSessionCursor *)cursor close:(NSNumber *)close inputURL:(NSURL *)inputURL {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionAppendV2;
    DBXFILESUploadSessionAppendArg *arg = [[DBXFILESUploadSessionAppendArg alloc] initWithCursor:cursor close:close];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBXUploadTask *)uploadSessionAppendV2Data:(DBXFILESUploadSessionCursor *)cursor inputData:(NSData *)inputData {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionAppendV2;
    DBXFILESUploadSessionAppendArg *arg = [[DBXFILESUploadSessionAppendArg alloc] initWithCursor:cursor];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBXUploadTask *)uploadSessionAppendV2Data:(DBXFILESUploadSessionCursor *)cursor close:(NSNumber *)close inputData:(NSData *)inputData {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionAppendV2;
    DBXFILESUploadSessionAppendArg *arg = [[DBXFILESUploadSessionAppendArg alloc] initWithCursor:cursor close:close];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBXUploadTask *)uploadSessionAppendV2Stream:(DBXFILESUploadSessionCursor *)cursor inputStream:(NSInputStream *)inputStream {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionAppendV2;
    DBXFILESUploadSessionAppendArg *arg = [[DBXFILESUploadSessionAppendArg alloc] initWithCursor:cursor];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBXUploadTask *)uploadSessionAppendV2Stream:(DBXFILESUploadSessionCursor *)cursor close:(NSNumber *)close inputStream:(NSInputStream *)inputStream {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionAppendV2;
    DBXFILESUploadSessionAppendArg *arg = [[DBXFILESUploadSessionAppendArg alloc] initWithCursor:cursor close:close];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBXUploadTask *)uploadSessionFinishURL:(DBXFILESUploadSessionCursor *)cursor commit:(DBXFILESCommitInfo *)commit inputURL:(NSURL *)inputURL {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionFinish;
    DBXFILESUploadSessionFinishArg *arg = [[DBXFILESUploadSessionFinishArg alloc] initWithCursor:cursor commit:commit];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBXUploadTask *)uploadSessionFinishData:(DBXFILESUploadSessionCursor *)cursor commit:(DBXFILESCommitInfo *)commit inputData:(NSData *)inputData {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionFinish;
    DBXFILESUploadSessionFinishArg *arg = [[DBXFILESUploadSessionFinishArg alloc] initWithCursor:cursor commit:commit];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBXUploadTask *)uploadSessionFinishStream:(DBXFILESUploadSessionCursor *)cursor commit:(DBXFILESCommitInfo *)commit inputStream:(NSInputStream *)inputStream {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionFinish;
    DBXFILESUploadSessionFinishArg *arg = [[DBXFILESUploadSessionFinishArg alloc] initWithCursor:cursor commit:commit];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBXRpcTask *)uploadSessionFinishBatch:(NSArray<DBXFILESUploadSessionFinishArg *> *)entries {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionFinishBatch;
    DBXFILESUploadSessionFinishBatchArg *arg = [[DBXFILESUploadSessionFinishBatchArg alloc] initWithEntries:entries];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)uploadSessionFinishBatchCheck:(NSString *)asyncJobId {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionFinishBatchCheck;
    DBXASYNCPollArg *arg = [[DBXASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXUploadTask *)uploadSessionStartURL:(NSURL *)inputURL {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionStart;
    DBXFILESUploadSessionStartArg *arg = [[DBXFILESUploadSessionStartArg alloc] init];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBXUploadTask *)uploadSessionStartURL:(NSNumber *)close inputURL:(NSURL *)inputURL {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionStart;
    DBXFILESUploadSessionStartArg *arg = [[DBXFILESUploadSessionStartArg alloc] initWithClose:close];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DBXUploadTask *)uploadSessionStartData:(NSData *)inputData {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionStart;
    DBXFILESUploadSessionStartArg *arg = [[DBXFILESUploadSessionStartArg alloc] init];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBXUploadTask *)uploadSessionStartData:(NSNumber *)close inputData:(NSData *)inputData {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionStart;
    DBXFILESUploadSessionStartArg *arg = [[DBXFILESUploadSessionStartArg alloc] initWithClose:close];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBXUploadTask *)uploadSessionStartStream:(NSInputStream *)inputStream {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionStart;
    DBXFILESUploadSessionStartArg *arg = [[DBXFILESUploadSessionStartArg alloc] init];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBXUploadTask *)uploadSessionStartStream:(NSNumber *)close inputStream:(NSInputStream *)inputStream {
    DBXRoute *route = DBXFILESRouteObjects.DBXFILESUploadSessionStart;
    DBXFILESUploadSessionStartArg *arg = [[DBXFILESUploadSessionStartArg alloc] initWithClose:close];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

@end
