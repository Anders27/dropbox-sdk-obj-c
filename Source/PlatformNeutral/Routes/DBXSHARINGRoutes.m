///
/// Auto-generated by Stone, do not modify.
///

#import "DBXSHARINGRoutes.h"

@implementation DBXSHARINGRoutes 

- (instancetype)init:(DBXTransportClient *)client {
    self = [super init];
    if (self) {
        _client = client;
    }
    return self;
}
- (DBXRpcTask *)addFileMember:(NSString *)file members:(NSArray<DBXSHARINGMemberSelector *> *)members {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGAddFileMember;
    DBXSHARINGAddFileMemberArgs *arg = [[DBXSHARINGAddFileMemberArgs alloc] initWithFile:file members:members];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)addFileMember:(NSString *)file members:(NSArray<DBXSHARINGMemberSelector *> *)members customMessage:(NSString *)customMessage quiet:(NSNumber *)quiet accessLevel:(DBXSHARINGAccessLevel *)accessLevel addMessageAsComment:(NSNumber *)addMessageAsComment {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGAddFileMember;
    DBXSHARINGAddFileMemberArgs *arg = [[DBXSHARINGAddFileMemberArgs alloc] initWithFile:file members:members customMessage:customMessage quiet:quiet accessLevel:accessLevel addMessageAsComment:addMessageAsComment];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)addFolderMember:(NSString *)sharedFolderId members:(NSArray<DBXSHARINGAddMember *> *)members {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGAddFolderMember;
    DBXSHARINGAddFolderMemberArg *arg = [[DBXSHARINGAddFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId members:members];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)addFolderMember:(NSString *)sharedFolderId members:(NSArray<DBXSHARINGAddMember *> *)members quiet:(NSNumber *)quiet customMessage:(NSString *)customMessage {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGAddFolderMember;
    DBXSHARINGAddFolderMemberArg *arg = [[DBXSHARINGAddFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId members:members quiet:quiet customMessage:customMessage];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)changeFileMemberAccess:(NSString *)file member:(DBXSHARINGMemberSelector *)member accessLevel:(DBXSHARINGAccessLevel *)accessLevel {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGChangeFileMemberAccess;
    DBXSHARINGChangeFileMemberAccessArgs *arg = [[DBXSHARINGChangeFileMemberAccessArgs alloc] initWithFile:file member:member accessLevel:accessLevel];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)checkJobStatus:(NSString *)asyncJobId {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGCheckJobStatus;
    DBXASYNCPollArg *arg = [[DBXASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)checkRemoveMemberJobStatus:(NSString *)asyncJobId {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGCheckRemoveMemberJobStatus;
    DBXASYNCPollArg *arg = [[DBXASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)checkShareJobStatus:(NSString *)asyncJobId {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGCheckShareJobStatus;
    DBXASYNCPollArg *arg = [[DBXASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)createSharedLink:(NSString *)path {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGCreateSharedLink;
    DBXSHARINGCreateSharedLinkArg *arg = [[DBXSHARINGCreateSharedLinkArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)createSharedLink:(NSString *)path shortUrl:(NSNumber *)shortUrl pendingUpload:(DBXSHARINGPendingUploadMode *)pendingUpload {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGCreateSharedLink;
    DBXSHARINGCreateSharedLinkArg *arg = [[DBXSHARINGCreateSharedLinkArg alloc] initWithPath:path shortUrl:shortUrl pendingUpload:pendingUpload];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)createSharedLinkWithSettings:(NSString *)path {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGCreateSharedLinkWithSettings;
    DBXSHARINGCreateSharedLinkWithSettingsArg *arg = [[DBXSHARINGCreateSharedLinkWithSettingsArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)createSharedLinkWithSettings:(NSString *)path settings:(DBXSHARINGSharedLinkSettings *)settings {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGCreateSharedLinkWithSettings;
    DBXSHARINGCreateSharedLinkWithSettingsArg *arg = [[DBXSHARINGCreateSharedLinkWithSettingsArg alloc] initWithPath:path settings:settings];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)getFileMetadata:(NSString *)file {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetFileMetadata;
    DBXSHARINGGetFileMetadataArg *arg = [[DBXSHARINGGetFileMetadataArg alloc] initWithFile:file];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)getFileMetadata:(NSString *)file actions:(NSArray<DBXSHARINGFileAction *> *)actions {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetFileMetadata;
    DBXSHARINGGetFileMetadataArg *arg = [[DBXSHARINGGetFileMetadataArg alloc] initWithFile:file actions:actions];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)getFileMetadataBatch:(NSArray<NSString *> *)files {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetFileMetadataBatch;
    DBXSHARINGGetFileMetadataBatchArg *arg = [[DBXSHARINGGetFileMetadataBatchArg alloc] initWithFiles:files];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)getFileMetadataBatch:(NSArray<NSString *> *)files actions:(NSArray<DBXSHARINGFileAction *> *)actions {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetFileMetadataBatch;
    DBXSHARINGGetFileMetadataBatchArg *arg = [[DBXSHARINGGetFileMetadataBatchArg alloc] initWithFiles:files actions:actions];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)getFolderMetadata:(NSString *)sharedFolderId {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetFolderMetadata;
    DBXSHARINGGetMetadataArgs *arg = [[DBXSHARINGGetMetadataArgs alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)getFolderMetadata:(NSString *)sharedFolderId actions:(NSArray<DBXSHARINGFolderAction *> *)actions {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetFolderMetadata;
    DBXSHARINGGetMetadataArgs *arg = [[DBXSHARINGGetMetadataArgs alloc] initWithSharedFolderId:sharedFolderId actions:actions];
    return [self.client requestRpc:route arg:arg];
}

- (DBXDownloadURLTask *)getSharedLinkFileURL:(NSString *)url overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetSharedLinkFile;
    DBXSHARINGGetSharedLinkMetadataArg *arg = [[DBXSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBXDownloadURLTask *)getSharedLinkFileURL:(NSString *)url path:(NSString *)path linkPassword:(NSString *)linkPassword overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetSharedLinkFile;
    DBXSHARINGGetSharedLinkMetadataArg *arg = [[DBXSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url path:path linkPassword:linkPassword];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBXDownloadDataTask *)getSharedLinkFileData:(NSString *)url {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetSharedLinkFile;
    DBXSHARINGGetSharedLinkMetadataArg *arg = [[DBXSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url];
    return [self.client requestDownload:route arg:arg];
}

- (DBXDownloadDataTask *)getSharedLinkFileData:(NSString *)url path:(NSString *)path linkPassword:(NSString *)linkPassword {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetSharedLinkFile;
    DBXSHARINGGetSharedLinkMetadataArg *arg = [[DBXSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url path:path linkPassword:linkPassword];
    return [self.client requestDownload:route arg:arg];
}

- (DBXRpcTask *)getSharedLinkMetadata:(NSString *)url {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetSharedLinkMetadata;
    DBXSHARINGGetSharedLinkMetadataArg *arg = [[DBXSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)getSharedLinkMetadata:(NSString *)url path:(NSString *)path linkPassword:(NSString *)linkPassword {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetSharedLinkMetadata;
    DBXSHARINGGetSharedLinkMetadataArg *arg = [[DBXSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url path:path linkPassword:linkPassword];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)getSharedLinks {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetSharedLinks;
    DBXSHARINGGetSharedLinksArg *arg = [[DBXSHARINGGetSharedLinksArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)getSharedLinks:(NSString *)path {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGGetSharedLinks;
    DBXSHARINGGetSharedLinksArg *arg = [[DBXSHARINGGetSharedLinksArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFileMembers:(NSString *)file {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListFileMembers;
    DBXSHARINGListFileMembersArg *arg = [[DBXSHARINGListFileMembersArg alloc] initWithFile:file];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFileMembers:(NSString *)file actions:(NSArray<DBXSHARINGMemberAction *> *)actions includeInherited:(NSNumber *)includeInherited limit:(NSNumber *)limit {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListFileMembers;
    DBXSHARINGListFileMembersArg *arg = [[DBXSHARINGListFileMembersArg alloc] initWithFile:file actions:actions includeInherited:includeInherited limit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFileMembersBatch:(NSArray<NSString *> *)files {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListFileMembersBatch;
    DBXSHARINGListFileMembersBatchArg *arg = [[DBXSHARINGListFileMembersBatchArg alloc] initWithFiles:files];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFileMembersBatch:(NSArray<NSString *> *)files limit:(NSNumber *)limit {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListFileMembersBatch;
    DBXSHARINGListFileMembersBatchArg *arg = [[DBXSHARINGListFileMembersBatchArg alloc] initWithFiles:files limit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFileMembersContinue:(NSString *)cursor {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListFileMembersContinue;
    DBXSHARINGListFileMembersContinueArg *arg = [[DBXSHARINGListFileMembersContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFolderMembers:(NSString *)sharedFolderId {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListFolderMembers;
    DBXSHARINGListFolderMembersArgs *arg = [[DBXSHARINGListFolderMembersArgs alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFolderMembers:(NSString *)sharedFolderId actions:(NSArray<DBXSHARINGMemberAction *> *)actions limit:(NSNumber *)limit {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListFolderMembers;
    DBXSHARINGListFolderMembersArgs *arg = [[DBXSHARINGListFolderMembersArgs alloc] initWithSharedFolderId:sharedFolderId actions:actions limit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFolderMembersContinue:(NSString *)cursor {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListFolderMembersContinue;
    DBXSHARINGListFolderMembersContinueArg *arg = [[DBXSHARINGListFolderMembersContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFolders {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListFolders;
    DBXSHARINGListFoldersArgs *arg = [[DBXSHARINGListFoldersArgs alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFolders:(NSNumber *)limit actions:(NSArray<DBXSHARINGFolderAction *> *)actions {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListFolders;
    DBXSHARINGListFoldersArgs *arg = [[DBXSHARINGListFoldersArgs alloc] initWithLimit:limit actions:actions];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listFoldersContinue:(NSString *)cursor {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListFoldersContinue;
    DBXSHARINGListFoldersContinueArg *arg = [[DBXSHARINGListFoldersContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listMountableFolders {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListMountableFolders;
    DBXSHARINGListFoldersArgs *arg = [[DBXSHARINGListFoldersArgs alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listMountableFolders:(NSNumber *)limit actions:(NSArray<DBXSHARINGFolderAction *> *)actions {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListMountableFolders;
    DBXSHARINGListFoldersArgs *arg = [[DBXSHARINGListFoldersArgs alloc] initWithLimit:limit actions:actions];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listMountableFoldersContinue:(NSString *)cursor {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListMountableFoldersContinue;
    DBXSHARINGListFoldersContinueArg *arg = [[DBXSHARINGListFoldersContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listReceivedFiles {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListReceivedFiles;
    DBXSHARINGListFilesArg *arg = [[DBXSHARINGListFilesArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listReceivedFiles:(NSNumber *)limit actions:(NSArray<DBXSHARINGFileAction *> *)actions {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListReceivedFiles;
    DBXSHARINGListFilesArg *arg = [[DBXSHARINGListFilesArg alloc] initWithLimit:limit actions:actions];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listReceivedFilesContinue:(NSString *)cursor {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListReceivedFilesContinue;
    DBXSHARINGListFilesContinueArg *arg = [[DBXSHARINGListFilesContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listSharedLinks {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListSharedLinks;
    DBXSHARINGListSharedLinksArg *arg = [[DBXSHARINGListSharedLinksArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)listSharedLinks:(NSString *)path cursor:(NSString *)cursor directOnly:(NSNumber *)directOnly {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGListSharedLinks;
    DBXSHARINGListSharedLinksArg *arg = [[DBXSHARINGListSharedLinksArg alloc] initWithPath:path cursor:cursor directOnly:directOnly];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)modifySharedLinkSettings:(NSString *)url settings:(DBXSHARINGSharedLinkSettings *)settings {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGModifySharedLinkSettings;
    DBXSHARINGModifySharedLinkSettingsArgs *arg = [[DBXSHARINGModifySharedLinkSettingsArgs alloc] initWithUrl:url settings:settings];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)modifySharedLinkSettings:(NSString *)url settings:(DBXSHARINGSharedLinkSettings *)settings removeExpiration:(NSNumber *)removeExpiration {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGModifySharedLinkSettings;
    DBXSHARINGModifySharedLinkSettingsArgs *arg = [[DBXSHARINGModifySharedLinkSettingsArgs alloc] initWithUrl:url settings:settings removeExpiration:removeExpiration];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)mountFolder:(NSString *)sharedFolderId {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGMountFolder;
    DBXSHARINGMountFolderArg *arg = [[DBXSHARINGMountFolderArg alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)relinquishFileMembership:(NSString *)file {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGRelinquishFileMembership;
    DBXSHARINGRelinquishFileMembershipArg *arg = [[DBXSHARINGRelinquishFileMembershipArg alloc] initWithFile:file];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)relinquishFolderMembership:(NSString *)sharedFolderId {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGRelinquishFolderMembership;
    DBXSHARINGRelinquishFolderMembershipArg *arg = [[DBXSHARINGRelinquishFolderMembershipArg alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)relinquishFolderMembership:(NSString *)sharedFolderId leaveACopy:(NSNumber *)leaveACopy {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGRelinquishFolderMembership;
    DBXSHARINGRelinquishFolderMembershipArg *arg = [[DBXSHARINGRelinquishFolderMembershipArg alloc] initWithSharedFolderId:sharedFolderId leaveACopy:leaveACopy];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)removeFileMember:(NSString *)file member:(DBXSHARINGMemberSelector *)member {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGRemoveFileMember;
    DBXSHARINGRemoveFileMemberArg *arg = [[DBXSHARINGRemoveFileMemberArg alloc] initWithFile:file member:member];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)removeFileMember2:(NSString *)file member:(DBXSHARINGMemberSelector *)member {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGRemoveFileMember2;
    DBXSHARINGRemoveFileMemberArg *arg = [[DBXSHARINGRemoveFileMemberArg alloc] initWithFile:file member:member];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)removeFolderMember:(NSString *)sharedFolderId member:(DBXSHARINGMemberSelector *)member leaveACopy:(NSNumber *)leaveACopy {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGRemoveFolderMember;
    DBXSHARINGRemoveFolderMemberArg *arg = [[DBXSHARINGRemoveFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId member:member leaveACopy:leaveACopy];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)revokeSharedLink:(NSString *)url {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGRevokeSharedLink;
    DBXSHARINGRevokeSharedLinkArg *arg = [[DBXSHARINGRevokeSharedLinkArg alloc] initWithUrl:url];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)shareFolder:(NSString *)path {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGShareFolder;
    DBXSHARINGShareFolderArg *arg = [[DBXSHARINGShareFolderArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)shareFolder:(NSString *)path memberPolicy:(DBXSHARINGMemberPolicy *)memberPolicy aclUpdatePolicy:(DBXSHARINGAclUpdatePolicy *)aclUpdatePolicy sharedLinkPolicy:(DBXSHARINGSharedLinkPolicy *)sharedLinkPolicy forceAsync:(NSNumber *)forceAsync {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGShareFolder;
    DBXSHARINGShareFolderArg *arg = [[DBXSHARINGShareFolderArg alloc] initWithPath:path memberPolicy:memberPolicy aclUpdatePolicy:aclUpdatePolicy sharedLinkPolicy:sharedLinkPolicy forceAsync:forceAsync];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)transferFolder:(NSString *)sharedFolderId toDropboxId:(NSString *)toDropboxId {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGTransferFolder;
    DBXSHARINGTransferFolderArg *arg = [[DBXSHARINGTransferFolderArg alloc] initWithSharedFolderId:sharedFolderId toDropboxId:toDropboxId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)unmountFolder:(NSString *)sharedFolderId {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGUnmountFolder;
    DBXSHARINGUnmountFolderArg *arg = [[DBXSHARINGUnmountFolderArg alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)unshareFile:(NSString *)file {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGUnshareFile;
    DBXSHARINGUnshareFileArg *arg = [[DBXSHARINGUnshareFileArg alloc] initWithFile:file];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)unshareFolder:(NSString *)sharedFolderId {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGUnshareFolder;
    DBXSHARINGUnshareFolderArg *arg = [[DBXSHARINGUnshareFolderArg alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)unshareFolder:(NSString *)sharedFolderId leaveACopy:(NSNumber *)leaveACopy {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGUnshareFolder;
    DBXSHARINGUnshareFolderArg *arg = [[DBXSHARINGUnshareFolderArg alloc] initWithSharedFolderId:sharedFolderId leaveACopy:leaveACopy];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)updateFolderMember:(NSString *)sharedFolderId member:(DBXSHARINGMemberSelector *)member accessLevel:(DBXSHARINGAccessLevel *)accessLevel {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGUpdateFolderMember;
    DBXSHARINGUpdateFolderMemberArg *arg = [[DBXSHARINGUpdateFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId member:member accessLevel:accessLevel];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)updateFolderPolicy:(NSString *)sharedFolderId {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGUpdateFolderPolicy;
    DBXSHARINGUpdateFolderPolicyArg *arg = [[DBXSHARINGUpdateFolderPolicyArg alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)updateFolderPolicy:(NSString *)sharedFolderId memberPolicy:(DBXSHARINGMemberPolicy *)memberPolicy aclUpdatePolicy:(DBXSHARINGAclUpdatePolicy *)aclUpdatePolicy sharedLinkPolicy:(DBXSHARINGSharedLinkPolicy *)sharedLinkPolicy {
    DBXRoute *route = DBXSHARINGRouteObjects.DBXSHARINGUpdateFolderPolicy;
    DBXSHARINGUpdateFolderPolicyArg *arg = [[DBXSHARINGUpdateFolderPolicyArg alloc] initWithSharedFolderId:sharedFolderId memberPolicy:memberPolicy aclUpdatePolicy:aclUpdatePolicy sharedLinkPolicy:sharedLinkPolicy];
    return [self.client requestRpc:route arg:arg];
}

@end
