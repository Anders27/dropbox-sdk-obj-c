///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBXASYNCLaunchEmptyResult.h"
#import "DBXASYNCLaunchResultBase.h"
#import "DBXASYNCPollArg.h"
#import "DBXASYNCPollEmptyResult.h"
#import "DBXASYNCPollError.h"
#import "DBXASYNCPollResultBase.h"
#import "DBXErrors.h"
#import "DBXPROPERTIESGetPropertyTemplateArg.h"
#import "DBXPROPERTIESGetPropertyTemplateResult.h"
#import "DBXPROPERTIESListPropertyTemplateIds.h"
#import "DBXPROPERTIESModifyPropertyTemplateError.h"
#import "DBXPROPERTIESPropertyFieldTemplate.h"
#import "DBXPROPERTIESPropertyGroupTemplate.h"
#import "DBXPROPERTIESPropertyTemplateError.h"
#import "DBXStoneBase.h"
#import "DBXTEAMActiveWebSession.h"
#import "DBXTEAMAddPropertyTemplateArg.h"
#import "DBXTEAMAddPropertyTemplateResult.h"
#import "DBXTEAMAdminTier.h"
#import "DBXTEAMApiApp.h"
#import "DBXTEAMBaseDfbReport.h"
#import "DBXTEAMCOMMONGroupManagementType.h"
#import "DBXTEAMCOMMONGroupSummary.h"
#import "DBXTEAMDateRange.h"
#import "DBXTEAMDateRangeError.h"
#import "DBXTEAMDesktopClientSession.h"
#import "DBXTEAMDeviceSessionArg.h"
#import "DBXTEAMDevicesActive.h"
#import "DBXTEAMGetActivityReport.h"
#import "DBXTEAMGetDevicesReport.h"
#import "DBXTEAMGetMembershipReport.h"
#import "DBXTEAMGetStorageReport.h"
#import "DBXTEAMGroupAccessType.h"
#import "DBXTEAMGroupCreateArg.h"
#import "DBXTEAMGroupCreateError.h"
#import "DBXTEAMGroupDeleteError.h"
#import "DBXTEAMGroupFullInfo.h"
#import "DBXTEAMGroupMemberInfo.h"
#import "DBXTEAMGroupMemberSelector.h"
#import "DBXTEAMGroupMemberSelectorError.h"
#import "DBXTEAMGroupMemberSetAccessTypeError.h"
#import "DBXTEAMGroupMembersAddArg.h"
#import "DBXTEAMGroupMembersAddError.h"
#import "DBXTEAMGroupMembersChangeResult.h"
#import "DBXTEAMGroupMembersRemoveArg.h"
#import "DBXTEAMGroupMembersRemoveError.h"
#import "DBXTEAMGroupMembersSelectorError.h"
#import "DBXTEAMGroupMembersSetAccessTypeArg.h"
#import "DBXTEAMGroupSelector.h"
#import "DBXTEAMGroupSelectorError.h"
#import "DBXTEAMGroupUpdateArgs.h"
#import "DBXTEAMGroupUpdateError.h"
#import "DBXTEAMGroupsGetInfoError.h"
#import "DBXTEAMGroupsGetInfoItem.h"
#import "DBXTEAMGroupsListArg.h"
#import "DBXTEAMGroupsListContinueArg.h"
#import "DBXTEAMGroupsListContinueError.h"
#import "DBXTEAMGroupsListResult.h"
#import "DBXTEAMGroupsMembersListArg.h"
#import "DBXTEAMGroupsMembersListContinueArg.h"
#import "DBXTEAMGroupsMembersListContinueError.h"
#import "DBXTEAMGroupsMembersListResult.h"
#import "DBXTEAMGroupsPollError.h"
#import "DBXTEAMGroupsSelector.h"
#import "DBXTEAMIncludeMembersArg.h"
#import "DBXTEAMListMemberAppsArg.h"
#import "DBXTEAMListMemberAppsError.h"
#import "DBXTEAMListMemberAppsResult.h"
#import "DBXTEAMListMemberDevicesArg.h"
#import "DBXTEAMListMemberDevicesError.h"
#import "DBXTEAMListMemberDevicesResult.h"
#import "DBXTEAMListMembersAppsArg.h"
#import "DBXTEAMListMembersAppsError.h"
#import "DBXTEAMListMembersAppsResult.h"
#import "DBXTEAMListMembersDevicesArg.h"
#import "DBXTEAMListMembersDevicesError.h"
#import "DBXTEAMListMembersDevicesResult.h"
#import "DBXTEAMListTeamAppsArg.h"
#import "DBXTEAMListTeamAppsError.h"
#import "DBXTEAMListTeamAppsResult.h"
#import "DBXTEAMListTeamDevicesArg.h"
#import "DBXTEAMListTeamDevicesError.h"
#import "DBXTEAMListTeamDevicesResult.h"
#import "DBXTEAMMemberAccess.h"
#import "DBXTEAMMemberAddArg.h"
#import "DBXTEAMMemberAddResult.h"
#import "DBXTEAMMemberDevices.h"
#import "DBXTEAMMemberLinkedApps.h"
#import "DBXTEAMMemberSelectorError.h"
#import "DBXTEAMMembersAddArg.h"
#import "DBXTEAMMembersAddJobStatus.h"
#import "DBXTEAMMembersAddLaunch.h"
#import "DBXTEAMMembersDeactivateArg.h"
#import "DBXTEAMMembersDeactivateError.h"
#import "DBXTEAMMembersGetInfoArgs.h"
#import "DBXTEAMMembersGetInfoError.h"
#import "DBXTEAMMembersGetInfoItem.h"
#import "DBXTEAMMembersListArg.h"
#import "DBXTEAMMembersListContinueArg.h"
#import "DBXTEAMMembersListContinueError.h"
#import "DBXTEAMMembersListError.h"
#import "DBXTEAMMembersListResult.h"
#import "DBXTEAMMembersRecoverArg.h"
#import "DBXTEAMMembersRecoverError.h"
#import "DBXTEAMMembersRemoveArg.h"
#import "DBXTEAMMembersRemoveError.h"
#import "DBXTEAMMembersSendWelcomeError.h"
#import "DBXTEAMMembersSetPermissionsArg.h"
#import "DBXTEAMMembersSetPermissionsError.h"
#import "DBXTEAMMembersSetPermissionsResult.h"
#import "DBXTEAMMembersSetProfileArg.h"
#import "DBXTEAMMembersSetProfileError.h"
#import "DBXTEAMMembersSuspendError.h"
#import "DBXTEAMMembersUnsuspendArg.h"
#import "DBXTEAMMembersUnsuspendError.h"
#import "DBXTEAMMobileClientSession.h"
#import "DBXTEAMPOLICIESTeamMemberPolicies.h"
#import "DBXTEAMRevokeDesktopClientArg.h"
#import "DBXTEAMRevokeDeviceSessionArg.h"
#import "DBXTEAMRevokeDeviceSessionBatchArg.h"
#import "DBXTEAMRevokeDeviceSessionBatchError.h"
#import "DBXTEAMRevokeDeviceSessionBatchResult.h"
#import "DBXTEAMRevokeDeviceSessionError.h"
#import "DBXTEAMRevokeDeviceSessionStatus.h"
#import "DBXTEAMRevokeLinkedApiAppArg.h"
#import "DBXTEAMRevokeLinkedApiAppBatchArg.h"
#import "DBXTEAMRevokeLinkedAppBatchError.h"
#import "DBXTEAMRevokeLinkedAppBatchResult.h"
#import "DBXTEAMRevokeLinkedAppError.h"
#import "DBXTEAMRevokeLinkedAppStatus.h"
#import "DBXTEAMRouteObjects.h"
#import "DBXTEAMRoutes.h"
#import "DBXTEAMStorageBucket.h"
#import "DBXTEAMTeamGetInfoResult.h"
#import "DBXTEAMTeamMemberInfo.h"
#import "DBXTEAMTeamMemberProfile.h"
#import "DBXTEAMUpdatePropertyTemplateArg.h"
#import "DBXTEAMUpdatePropertyTemplateResult.h"
#import "DBXTEAMUserSelectorArg.h"
#import "DBXTEAMUserSelectorError.h"
#import "DBXTasks.h"
#import "DBXTransportClient.h"

/// 
/// Routes for the Team namespace
/// 
@interface DBXTEAMRoutes : NSObject 

/// An instance of the networking client that each route will use to submit a
/// request.
@property (nonatomic, readonly) DBXTransportClient * _Nonnull client;

/// Initializes the `DBXTEAMRoutes` namespace container object with a networking
/// client.
- (nonnull instancetype)init:(DBXTransportClient * _Nonnull)client;

/// 
/// Creates a new, empty group, with a requested name. Permission : Team member management
/// 
/// - parameter groupName: Group name.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupFullInfo * _Nonnull` object on
/// success or a `DBXTEAMGroupCreateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupFullInfo *, DBXTEAMGroupCreateError *> * _Nonnull)alphaGroupsCreate:(NSString * _Nonnull)groupName;

/// 
/// Creates a new, empty group, with a requested name. Permission : Team member management
/// 
/// - parameter groupName: Group name.
/// - parameter groupExternalId: The creator of a team can associate an arbitrary external ID to the group.
/// - parameter groupManagementType: Whether the team can be managed by selected users, or only by team admins
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupFullInfo * _Nonnull` object on
/// success or a `DBXTEAMGroupCreateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupFullInfo *, DBXTEAMGroupCreateError *> * _Nonnull)alphaGroupsCreate:(NSString * _Nonnull)groupName groupExternalId:(NSString * _Nullable)groupExternalId groupManagementType:(DBXTEAMCOMMONGroupManagementType * _Nullable)groupManagementType;

/// 
/// Retrieves information about one or more groups. Permission : Team Information
/// 
/// - parameter groupsSelector: Argument for selecting a list of groups, either by group_ids, or external group IDs.
/// 
/// - returns: Through the response callback, the caller will receive a `NSArray<DBXTEAMGroupsGetInfoItem *> * _Nonnull`
/// object on success or a `DBXTEAMGroupsGetInfoError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<NSArray<DBXTEAMGroupsGetInfoItem *> *, DBXTEAMGroupsGetInfoError *> * _Nonnull)alphaGroupsGetInfo:(DBXTEAMGroupsSelector * _Nonnull)groupsSelector;

/// 
/// Lists groups on a team. Permission : Team Information
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupsListResult * _Nonnull` object on
/// success or a `void` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupsListResult *, DBXNilObject *> * _Nonnull)alphaGroupsList;

/// 
/// Lists groups on a team. Permission : Team Information
/// 
/// - parameter limit: Number of results to return per call.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupsListResult * _Nonnull` object on
/// success or a `void` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupsListResult *, DBXNilObject *> * _Nonnull)alphaGroupsList:(NSNumber * _Nullable)limit;

/// 
/// Once a cursor has been retrieved from alphaGroupsList, use this to paginate through all groups. Permission : Team
/// information
/// 
/// - parameter cursor: Indicates from what point to get the next set of groups.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupsListResult * _Nonnull` object on
/// success or a `DBXTEAMGroupsListContinueError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupsListResult *, DBXTEAMGroupsListContinueError *> * _Nonnull)alphaGroupsListContinue:(NSString * _Nonnull)cursor;

/// 
/// Updates a group's name, external ID or management type. Permission : Team member management
/// 
/// - parameter group: Specify a group.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupFullInfo * _Nonnull` object on
/// success or a `DBXTEAMGroupUpdateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupFullInfo *, DBXTEAMGroupUpdateError *> * _Nonnull)alphaGroupsUpdate:(DBXTEAMGroupSelector * _Nonnull)group;

/// 
/// Updates a group's name, external ID or management type. Permission : Team member management
/// 
/// - parameter group: Specify a group.
/// - parameter dNewGroupName: Optional argument. Set group name to this if provided.
/// - parameter dNewGroupExternalId: Optional argument. New group external ID. If the argument is None, the group's
/// external_id won't be updated. If the argument is empty string, the group's external id will be cleared.
/// - parameter dNewGroupManagementType: Set new group management type, if provided.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupFullInfo * _Nonnull` object on
/// success or a `DBXTEAMGroupUpdateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupFullInfo *, DBXTEAMGroupUpdateError *> * _Nonnull)alphaGroupsUpdate:(DBXTEAMGroupSelector * _Nonnull)group returnMembers:(NSNumber * _Nullable)returnMembers dNewGroupName:(NSString * _Nullable)dNewGroupName dNewGroupExternalId:(NSString * _Nullable)dNewGroupExternalId dNewGroupManagementType:(DBXTEAMCOMMONGroupManagementType * _Nullable)dNewGroupManagementType;

/// 
/// List all device sessions of a team's member.
/// 
/// - parameter teamMemberId: The team's member id
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMListMemberDevicesResult * _Nonnull`
/// object on success or a `DBXTEAMListMemberDevicesError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMListMemberDevicesResult *, DBXTEAMListMemberDevicesError *> * _Nonnull)devicesListMemberDevices:(NSString * _Nonnull)teamMemberId;

/// 
/// List all device sessions of a team's member.
/// 
/// - parameter teamMemberId: The team's member id
/// - parameter includeWebSessions: Whether to list web sessions of the team's member
/// - parameter includeDesktopClients: Whether to list linked desktop devices of the team's member
/// - parameter includeMobileClients: Whether to list linked mobile devices of the team's member
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMListMemberDevicesResult * _Nonnull`
/// object on success or a `DBXTEAMListMemberDevicesError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMListMemberDevicesResult *, DBXTEAMListMemberDevicesError *> * _Nonnull)devicesListMemberDevices:(NSString * _Nonnull)teamMemberId includeWebSessions:(NSNumber * _Nullable)includeWebSessions includeDesktopClients:(NSNumber * _Nullable)includeDesktopClients includeMobileClients:(NSNumber * _Nullable)includeMobileClients;

/// 
/// List all device sessions of a team.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMListMembersDevicesResult * _Nonnull`
/// object on success or a `DBXTEAMListMembersDevicesError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMListMembersDevicesResult *, DBXTEAMListMembersDevicesError *> * _Nonnull)devicesListMembersDevices;

/// 
/// List all device sessions of a team.
/// 
/// - parameter cursor: At the first call to the devicesListMembersDevices the cursor shouldn't be passed. Then, if the
/// result of the call includes a cursor, the following requests should include the received cursors in order to receive
/// the next sub list of team devices
/// - parameter includeWebSessions: Whether to list web sessions of the team members
/// - parameter includeDesktopClients: Whether to list desktop clients of the team members
/// - parameter includeMobileClients: Whether to list mobile clients of the team members
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMListMembersDevicesResult * _Nonnull`
/// object on success or a `DBXTEAMListMembersDevicesError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMListMembersDevicesResult *, DBXTEAMListMembersDevicesError *> * _Nonnull)devicesListMembersDevices:(NSString * _Nullable)cursor includeWebSessions:(NSNumber * _Nullable)includeWebSessions includeDesktopClients:(NSNumber * _Nullable)includeDesktopClients includeMobileClients:(NSNumber * _Nullable)includeMobileClients;

/// 
/// DEPRECATED: List all device sessions of a team.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMListTeamDevicesResult * _Nonnull` object
/// on success or a `DBXTEAMListTeamDevicesError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMListTeamDevicesResult *, DBXTEAMListTeamDevicesError *> * _Nonnull)devicesListTeamDevices __deprecated_msg("devices/list_team_devices is deprecated. Use devices/list_members_devices.");

/// 
/// DEPRECATED: List all device sessions of a team.
/// 
/// - parameter cursor: At the first call to the devicesListTeamDevices the cursor shouldn't be passed. Then, if the
/// result of the call includes a cursor, the following requests should include the received cursors in order to receive
/// the next sub list of team devices
/// - parameter includeWebSessions: Whether to list web sessions of the team members
/// - parameter includeDesktopClients: Whether to list desktop clients of the team members
/// - parameter includeMobileClients: Whether to list mobile clients of the team members
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMListTeamDevicesResult * _Nonnull` object
/// on success or a `DBXTEAMListTeamDevicesError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMListTeamDevicesResult *, DBXTEAMListTeamDevicesError *> * _Nonnull)devicesListTeamDevices:(NSString * _Nullable)cursor includeWebSessions:(NSNumber * _Nullable)includeWebSessions includeDesktopClients:(NSNumber * _Nullable)includeDesktopClients includeMobileClients:(NSNumber * _Nullable)includeMobileClients __deprecated_msg("devices/list_team_devices is deprecated. Use devices/list_members_devices.");

/// 
/// Revoke a device session of a team's member
/// 
/// - parameter revokeDeviceSessionArg: The RevokeDeviceSessionArg union
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXTEAMRevokeDeviceSessionError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXTEAMRevokeDeviceSessionError *> * _Nonnull)devicesRevokeDeviceSession:(DBXTEAMRevokeDeviceSessionArg * _Nonnull)revokeDeviceSessionArg;

/// 
/// Revoke a list of device sessions of team members
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMRevokeDeviceSessionBatchResult *
/// _Nonnull` object on success or a `DBXTEAMRevokeDeviceSessionBatchError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMRevokeDeviceSessionBatchResult *, DBXTEAMRevokeDeviceSessionBatchError *> * _Nonnull)devicesRevokeDeviceSessionBatch:(NSArray<DBXTEAMRevokeDeviceSessionArg *> * _Nonnull)revokeDevices;

/// 
/// Retrieves information about a team.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMTeamGetInfoResult * _Nonnull` object on
/// success or a `void` object on failure.
/// 
- (DBXRpcTask<DBXTEAMTeamGetInfoResult *, DBXNilObject *> * _Nonnull)getInfo;

/// 
/// Creates a new, empty group, with a requested name. Permission : Team member management
/// 
/// - parameter groupName: Group name.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupFullInfo * _Nonnull` object on
/// success or a `DBXTEAMGroupCreateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupFullInfo *, DBXTEAMGroupCreateError *> * _Nonnull)groupsCreate:(NSString * _Nonnull)groupName;

/// 
/// Creates a new, empty group, with a requested name. Permission : Team member management
/// 
/// - parameter groupName: Group name.
/// - parameter groupExternalId: The creator of a team can associate an arbitrary external ID to the group.
/// - parameter groupManagementType: Whether the team can be managed by selected users, or only by team admins
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupFullInfo * _Nonnull` object on
/// success or a `DBXTEAMGroupCreateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupFullInfo *, DBXTEAMGroupCreateError *> * _Nonnull)groupsCreate:(NSString * _Nonnull)groupName groupExternalId:(NSString * _Nullable)groupExternalId groupManagementType:(DBXTEAMCOMMONGroupManagementType * _Nullable)groupManagementType;

/// 
/// Deletes a group. The group is deleted immediately. However the revoking of group-owned resources may take additional
/// time. Use the groupsJobStatusGet to determine whether this process has completed. Permission : Team member
/// management
/// 
/// - parameter groupSelector: Argument for selecting a single group, either by group_id or by external group ID.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXASYNCLaunchEmptyResult * _Nonnull` object on
/// success or a `DBXTEAMGroupDeleteError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXASYNCLaunchEmptyResult *, DBXTEAMGroupDeleteError *> * _Nonnull)groupsDelete:(DBXTEAMGroupSelector * _Nonnull)groupSelector;

/// 
/// Retrieves information about one or more groups. Permission : Team Information
/// 
/// - parameter groupsSelector: Argument for selecting a list of groups, either by group_ids, or external group IDs.
/// 
/// - returns: Through the response callback, the caller will receive a `NSArray<DBXTEAMGroupsGetInfoItem *> * _Nonnull`
/// object on success or a `DBXTEAMGroupsGetInfoError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<NSArray<DBXTEAMGroupsGetInfoItem *> *, DBXTEAMGroupsGetInfoError *> * _Nonnull)groupsGetInfo:(DBXTEAMGroupsSelector * _Nonnull)groupsSelector;

/// 
/// Once an async_job_id is returned from groupsDelete, groupsMembersAdd , or groupsMembersRemove use this method to
/// poll the status of granting/revoking group members' access to group-owned resources. Permission : Team member
/// management
/// 
/// - parameter asyncJobId: Id of the asynchronous job. This is the value of a response returned from the method that
/// launched the job.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXASYNCPollEmptyResult * _Nonnull` object on
/// success or a `DBXTEAMGroupsPollError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXASYNCPollEmptyResult *, DBXTEAMGroupsPollError *> * _Nonnull)groupsJobStatusGet:(NSString * _Nonnull)asyncJobId;

/// 
/// Lists groups on a team. Permission : Team Information
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupsListResult * _Nonnull` object on
/// success or a `void` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupsListResult *, DBXNilObject *> * _Nonnull)groupsList;

/// 
/// Lists groups on a team. Permission : Team Information
/// 
/// - parameter limit: Number of results to return per call.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupsListResult * _Nonnull` object on
/// success or a `void` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupsListResult *, DBXNilObject *> * _Nonnull)groupsList:(NSNumber * _Nullable)limit;

/// 
/// Once a cursor has been retrieved from groupsList, use this to paginate through all groups. Permission : Team
/// information
/// 
/// - parameter cursor: Indicates from what point to get the next set of groups.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupsListResult * _Nonnull` object on
/// success or a `DBXTEAMGroupsListContinueError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupsListResult *, DBXTEAMGroupsListContinueError *> * _Nonnull)groupsListContinue:(NSString * _Nonnull)cursor;

/// 
/// Adds members to a group. The members are added immediately. However the granting of group-owned resources may take
/// additional time. Use the groupsJobStatusGet to determine whether this process has completed. Permission : Team
/// member management
/// 
/// - parameter group: Group to which users will be added.
/// - parameter members: List of users to be added to the group.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupMembersChangeResult * _Nonnull`
/// object on success or a `DBXTEAMGroupMembersAddError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupMembersChangeResult *, DBXTEAMGroupMembersAddError *> * _Nonnull)groupsMembersAdd:(DBXTEAMGroupSelector * _Nonnull)group members:(NSArray<DBXTEAMMemberAccess *> * _Nonnull)members;

/// 
/// Adds members to a group. The members are added immediately. However the granting of group-owned resources may take
/// additional time. Use the groupsJobStatusGet to determine whether this process has completed. Permission : Team
/// member management
/// 
/// - parameter group: Group to which users will be added.
/// - parameter members: List of users to be added to the group.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupMembersChangeResult * _Nonnull`
/// object on success or a `DBXTEAMGroupMembersAddError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupMembersChangeResult *, DBXTEAMGroupMembersAddError *> * _Nonnull)groupsMembersAdd:(DBXTEAMGroupSelector * _Nonnull)group members:(NSArray<DBXTEAMMemberAccess *> * _Nonnull)members returnMembers:(NSNumber * _Nullable)returnMembers;

/// 
/// Lists members of a group. Permission : Team Information
/// 
/// - parameter group: The group whose members are to be listed.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupsMembersListResult * _Nonnull`
/// object on success or a `DBXTEAMGroupSelectorError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupsMembersListResult *, DBXTEAMGroupSelectorError *> * _Nonnull)groupsMembersList:(DBXTEAMGroupSelector * _Nonnull)group;

/// 
/// Lists members of a group. Permission : Team Information
/// 
/// - parameter group: The group whose members are to be listed.
/// - parameter limit: Number of results to return per call.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupsMembersListResult * _Nonnull`
/// object on success or a `DBXTEAMGroupSelectorError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupsMembersListResult *, DBXTEAMGroupSelectorError *> * _Nonnull)groupsMembersList:(DBXTEAMGroupSelector * _Nonnull)group limit:(NSNumber * _Nullable)limit;

/// 
/// Once a cursor has been retrieved from groupsMembersList, use this to paginate through all members of the group.
/// Permission : Team information
/// 
/// - parameter cursor: Indicates from what point to get the next set of groups.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupsMembersListResult * _Nonnull`
/// object on success or a `DBXTEAMGroupsMembersListContinueError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupsMembersListResult *, DBXTEAMGroupsMembersListContinueError *> * _Nonnull)groupsMembersListContinue:(NSString * _Nonnull)cursor;

/// 
/// Removes members from a group. The members are removed immediately. However the revoking of group-owned resources may
/// take additional time. Use the groupsJobStatusGet to determine whether this process has completed. This method
/// permits removing the only owner of a group, even in cases where this is not possible via the web client. Permission
/// : Team member management
/// 
/// - parameter group: Group from which users will be removed.
/// - parameter users: List of users to be removed from the group.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupMembersChangeResult * _Nonnull`
/// object on success or a `DBXTEAMGroupMembersRemoveError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupMembersChangeResult *, DBXTEAMGroupMembersRemoveError *> * _Nonnull)groupsMembersRemove:(DBXTEAMGroupSelector * _Nonnull)group users:(NSArray<DBXTEAMUserSelectorArg *> * _Nonnull)users;

/// 
/// Removes members from a group. The members are removed immediately. However the revoking of group-owned resources may
/// take additional time. Use the groupsJobStatusGet to determine whether this process has completed. This method
/// permits removing the only owner of a group, even in cases where this is not possible via the web client. Permission
/// : Team member management
/// 
/// - parameter group: Group from which users will be removed.
/// - parameter users: List of users to be removed from the group.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupMembersChangeResult * _Nonnull`
/// object on success or a `DBXTEAMGroupMembersRemoveError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupMembersChangeResult *, DBXTEAMGroupMembersRemoveError *> * _Nonnull)groupsMembersRemove:(DBXTEAMGroupSelector * _Nonnull)group users:(NSArray<DBXTEAMUserSelectorArg *> * _Nonnull)users returnMembers:(NSNumber * _Nullable)returnMembers;

/// 
/// Sets a member's access type in a group. Permission : Team member management
/// 
/// - parameter accessType: New group access type the user will have.
/// 
/// - returns: Through the response callback, the caller will receive a `NSArray<DBXTEAMGroupsGetInfoItem *> * _Nonnull`
/// object on success or a `DBXTEAMGroupMemberSetAccessTypeError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<NSArray<DBXTEAMGroupsGetInfoItem *> *, DBXTEAMGroupMemberSetAccessTypeError *> * _Nonnull)groupsMembersSetAccessType:(DBXTEAMGroupSelector * _Nonnull)group user:(DBXTEAMUserSelectorArg * _Nonnull)user accessType:(DBXTEAMGroupAccessType * _Nonnull)accessType;

/// 
/// Sets a member's access type in a group. Permission : Team member management
/// 
/// - parameter accessType: New group access type the user will have.
/// - parameter returnMembers: Whether to return the list of members in the group.  Note that the default value will
/// cause all the group members  to be returned in the response. This may take a long time for large groups.
/// 
/// - returns: Through the response callback, the caller will receive a `NSArray<DBXTEAMGroupsGetInfoItem *> * _Nonnull`
/// object on success or a `DBXTEAMGroupMemberSetAccessTypeError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<NSArray<DBXTEAMGroupsGetInfoItem *> *, DBXTEAMGroupMemberSetAccessTypeError *> * _Nonnull)groupsMembersSetAccessType:(DBXTEAMGroupSelector * _Nonnull)group user:(DBXTEAMUserSelectorArg * _Nonnull)user accessType:(DBXTEAMGroupAccessType * _Nonnull)accessType returnMembers:(NSNumber * _Nullable)returnMembers;

/// 
/// Updates a group's name and/or external ID. Permission : Team member management
/// 
/// - parameter group: Specify a group.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupFullInfo * _Nonnull` object on
/// success or a `DBXTEAMGroupUpdateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupFullInfo *, DBXTEAMGroupUpdateError *> * _Nonnull)groupsUpdate:(DBXTEAMGroupSelector * _Nonnull)group;

/// 
/// Updates a group's name and/or external ID. Permission : Team member management
/// 
/// - parameter group: Specify a group.
/// - parameter dNewGroupName: Optional argument. Set group name to this if provided.
/// - parameter dNewGroupExternalId: Optional argument. New group external ID. If the argument is None, the group's
/// external_id won't be updated. If the argument is empty string, the group's external id will be cleared.
/// - parameter dNewGroupManagementType: Set new group management type, if provided.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGroupFullInfo * _Nonnull` object on
/// success or a `DBXTEAMGroupUpdateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGroupFullInfo *, DBXTEAMGroupUpdateError *> * _Nonnull)groupsUpdate:(DBXTEAMGroupSelector * _Nonnull)group returnMembers:(NSNumber * _Nullable)returnMembers dNewGroupName:(NSString * _Nullable)dNewGroupName dNewGroupExternalId:(NSString * _Nullable)dNewGroupExternalId dNewGroupManagementType:(DBXTEAMCOMMONGroupManagementType * _Nullable)dNewGroupManagementType;

/// 
/// List all linked applications of the team member. Note, this endpoint does not list any team-linked applications.
/// 
/// - parameter teamMemberId: The team member id
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMListMemberAppsResult * _Nonnull` object
/// on success or a `DBXTEAMListMemberAppsError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMListMemberAppsResult *, DBXTEAMListMemberAppsError *> * _Nonnull)linkedAppsListMemberLinkedApps:(NSString * _Nonnull)teamMemberId;

/// 
/// List all applications linked to the team members' accounts. Note, this endpoint does not list any team-linked
/// applications.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMListMembersAppsResult * _Nonnull` object
/// on success or a `DBXTEAMListMembersAppsError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMListMembersAppsResult *, DBXTEAMListMembersAppsError *> * _Nonnull)linkedAppsListMembersLinkedApps;

/// 
/// List all applications linked to the team members' accounts. Note, this endpoint does not list any team-linked
/// applications.
/// 
/// - parameter cursor: At the first call to the linkedAppsListMembersLinkedApps the cursor shouldn't be passed. Then,
/// if the result of the call includes a cursor, the following requests should include the received cursors in order to
/// receive the next sub list of the team applications
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMListMembersAppsResult * _Nonnull` object
/// on success or a `DBXTEAMListMembersAppsError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMListMembersAppsResult *, DBXTEAMListMembersAppsError *> * _Nonnull)linkedAppsListMembersLinkedApps:(NSString * _Nullable)cursor;

/// 
/// DEPRECATED: List all applications linked to the team members' accounts. Note, this endpoint doesn't list any
/// team-linked applications.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMListTeamAppsResult * _Nonnull` object on
/// success or a `DBXTEAMListTeamAppsError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMListTeamAppsResult *, DBXTEAMListTeamAppsError *> * _Nonnull)linkedAppsListTeamLinkedApps __deprecated_msg("linked_apps/list_team_linked_apps is deprecated. Use linked_apps/list_members_linked_apps.");

/// 
/// DEPRECATED: List all applications linked to the team members' accounts. Note, this endpoint doesn't list any
/// team-linked applications.
/// 
/// - parameter cursor: At the first call to the linkedAppsListTeamLinkedApps the cursor shouldn't be passed. Then, if
/// the result of the call includes a cursor, the following requests should include the received cursors in order to
/// receive the next sub list of the team applications
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMListTeamAppsResult * _Nonnull` object on
/// success or a `DBXTEAMListTeamAppsError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMListTeamAppsResult *, DBXTEAMListTeamAppsError *> * _Nonnull)linkedAppsListTeamLinkedApps:(NSString * _Nullable)cursor __deprecated_msg("linked_apps/list_team_linked_apps is deprecated. Use linked_apps/list_members_linked_apps.");

/// 
/// Revoke a linked application of the team member
/// 
/// - parameter appId: The application's unique id
/// - parameter teamMemberId: The unique id of the member owning the device
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXTEAMRevokeLinkedAppError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXTEAMRevokeLinkedAppError *> * _Nonnull)linkedAppsRevokeLinkedApp:(NSString * _Nonnull)appId teamMemberId:(NSString * _Nonnull)teamMemberId;

/// 
/// Revoke a linked application of the team member
/// 
/// - parameter appId: The application's unique id
/// - parameter teamMemberId: The unique id of the member owning the device
/// - parameter keepAppFolder: Whether to keep the application dedicated folder (in case the application uses  one)
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXTEAMRevokeLinkedAppError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXTEAMRevokeLinkedAppError *> * _Nonnull)linkedAppsRevokeLinkedApp:(NSString * _Nonnull)appId teamMemberId:(NSString * _Nonnull)teamMemberId keepAppFolder:(NSNumber * _Nullable)keepAppFolder;

/// 
/// Revoke a list of linked applications of the team members
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMRevokeLinkedAppBatchResult * _Nonnull`
/// object on success or a `DBXTEAMRevokeLinkedAppBatchError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMRevokeLinkedAppBatchResult *, DBXTEAMRevokeLinkedAppBatchError *> * _Nonnull)linkedAppsRevokeLinkedAppBatch:(NSArray<DBXTEAMRevokeLinkedApiAppArg *> * _Nonnull)revokeLinkedApp;

/// 
/// Adds members to a team. Permission : Team member management A maximum of 20 members can be specified in a single
/// call. If no Dropbox account exists with the email address specified, a new Dropbox account will be created with the
/// given email address, and that account will be invited to the team. If a personal Dropbox account exists with the
/// email address specified in the call, this call will create a placeholder Dropbox account for the user on the team
/// and send an email inviting the user to migrate their existing personal account onto the team. Team member management
/// apps are required to set an initial given_name and surname for a user to use in the team invitation and for 'Perform
/// as team member' actions taken on the user before they become 'active'.
/// 
/// - parameter dNewMembers: Details of new members to be added to the team.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMMembersAddLaunch * _Nonnull` object on
/// success or a `void` object on failure.
/// 
- (DBXRpcTask<DBXTEAMMembersAddLaunch *, DBXNilObject *> * _Nonnull)membersAdd:(NSArray<DBXTEAMMemberAddArg *> * _Nonnull)dNewMembers;

/// 
/// Adds members to a team. Permission : Team member management A maximum of 20 members can be specified in a single
/// call. If no Dropbox account exists with the email address specified, a new Dropbox account will be created with the
/// given email address, and that account will be invited to the team. If a personal Dropbox account exists with the
/// email address specified in the call, this call will create a placeholder Dropbox account for the user on the team
/// and send an email inviting the user to migrate their existing personal account onto the team. Team member management
/// apps are required to set an initial given_name and surname for a user to use in the team invitation and for 'Perform
/// as team member' actions taken on the user before they become 'active'.
/// 
/// - parameter dNewMembers: Details of new members to be added to the team.
/// - parameter forceAsync: Whether to force the add to happen asynchronously.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMMembersAddLaunch * _Nonnull` object on
/// success or a `void` object on failure.
/// 
- (DBXRpcTask<DBXTEAMMembersAddLaunch *, DBXNilObject *> * _Nonnull)membersAdd:(NSArray<DBXTEAMMemberAddArg *> * _Nonnull)dNewMembers forceAsync:(NSNumber * _Nullable)forceAsync;

/// 
/// Once an async_job_id is returned from membersAdd , use this to poll the status of the asynchronous request.
/// Permission : Team member management
/// 
/// - parameter asyncJobId: Id of the asynchronous job. This is the value of a response returned from the method that
/// launched the job.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMMembersAddJobStatus * _Nonnull` object
/// on success or a `DBXASYNCPollError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMMembersAddJobStatus *, DBXASYNCPollError *> * _Nonnull)membersAddJobStatusGet:(NSString * _Nonnull)asyncJobId;

/// 
/// Returns information about multiple team members. Permission : Team information This endpoint will return idNotFound
/// in MembersGetInfoItem, for IDs (or emails) that cannot be matched to a valid team member.
/// 
/// - parameter members: List of team members.
/// 
/// - returns: Through the response callback, the caller will receive a `NSArray<DBXTEAMMembersGetInfoItem *> *
/// _Nonnull` object on success or a `DBXTEAMMembersGetInfoError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<NSArray<DBXTEAMMembersGetInfoItem *> *, DBXTEAMMembersGetInfoError *> * _Nonnull)membersGetInfo:(NSArray<DBXTEAMUserSelectorArg *> * _Nonnull)members;

/// 
/// Lists members of a team. Permission : Team information
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMMembersListResult * _Nonnull` object on
/// success or a `DBXTEAMMembersListError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMMembersListResult *, DBXTEAMMembersListError *> * _Nonnull)membersList;

/// 
/// Lists members of a team. Permission : Team information
/// 
/// - parameter limit: Number of results to return per call.
/// - parameter includeRemoved: Whether to return removed members.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMMembersListResult * _Nonnull` object on
/// success or a `DBXTEAMMembersListError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMMembersListResult *, DBXTEAMMembersListError *> * _Nonnull)membersList:(NSNumber * _Nullable)limit includeRemoved:(NSNumber * _Nullable)includeRemoved;

/// 
/// Once a cursor has been retrieved from membersList, use this to paginate through all team members. Permission : Team
/// information
/// 
/// - parameter cursor: Indicates from what point to get the next set of members.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMMembersListResult * _Nonnull` object on
/// success or a `DBXTEAMMembersListContinueError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMMembersListResult *, DBXTEAMMembersListContinueError *> * _Nonnull)membersListContinue:(NSString * _Nonnull)cursor;

/// 
/// Recover a deleted member. Permission : Team member management Exactly one of team_member_id, email, or external_id
/// must be provided to identify the user account.
/// 
/// - parameter user: Identity of user to recover.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXTEAMMembersRecoverError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXTEAMMembersRecoverError *> * _Nonnull)membersRecover:(DBXTEAMUserSelectorArg * _Nonnull)user;

/// 
/// Removes a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
/// external_id must be provided to identify the user account. This is not a deactivation where the account can be
/// re-activated again. Calling membersAdd with the removed user's email address will create a new account with a new
/// team_member_id that will not have access to any content that was shared with the initial account. This endpoint may
/// initiate an asynchronous job. To obtain the final result of the job, the client should periodically poll
/// membersRemoveJobStatusGet.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXASYNCLaunchEmptyResult * _Nonnull` object on
/// success or a `DBXTEAMMembersRemoveError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXASYNCLaunchEmptyResult *, DBXTEAMMembersRemoveError *> * _Nonnull)membersRemove:(DBXTEAMUserSelectorArg * _Nonnull)user;

/// 
/// Removes a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
/// external_id must be provided to identify the user account. This is not a deactivation where the account can be
/// re-activated again. Calling membersAdd with the removed user's email address will create a new account with a new
/// team_member_id that will not have access to any content that was shared with the initial account. This endpoint may
/// initiate an asynchronous job. To obtain the final result of the job, the client should periodically poll
/// membersRemoveJobStatusGet.
/// 
/// - parameter transferDestId: If provided, files from the deleted member account will be transferred to this user.
/// - parameter transferAdminId: If provided, errors during the transfer process will be sent via email to this user. If
/// the transfer_dest_id argument was provided, then this argument must be provided as well.
/// - parameter keepAccount: Downgrade the member to a Basic account. The user will retain the email address associated
/// with their Dropbox  account and data in their account that is not restricted to team members.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXASYNCLaunchEmptyResult * _Nonnull` object on
/// success or a `DBXTEAMMembersRemoveError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXASYNCLaunchEmptyResult *, DBXTEAMMembersRemoveError *> * _Nonnull)membersRemove:(DBXTEAMUserSelectorArg * _Nonnull)user wipeData:(NSNumber * _Nullable)wipeData transferDestId:(DBXTEAMUserSelectorArg * _Nullable)transferDestId transferAdminId:(DBXTEAMUserSelectorArg * _Nullable)transferAdminId keepAccount:(NSNumber * _Nullable)keepAccount;

/// 
/// Once an async_job_id is returned from membersRemove , use this to poll the status of the asynchronous request.
/// Permission : Team member management
/// 
/// - parameter asyncJobId: Id of the asynchronous job. This is the value of a response returned from the method that
/// launched the job.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXASYNCPollEmptyResult * _Nonnull` object on
/// success or a `DBXASYNCPollError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXASYNCPollEmptyResult *, DBXASYNCPollError *> * _Nonnull)membersRemoveJobStatusGet:(NSString * _Nonnull)asyncJobId;

/// 
/// Sends welcome email to pending team member. Permission : Team member management Exactly one of team_member_id,
/// email, or external_id must be provided to identify the user account. No-op if team member is not pending.
/// 
/// - parameter userSelectorArg: Argument for selecting a single user, either by team_member_id, external_id or email.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXTEAMMembersSendWelcomeError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXTEAMMembersSendWelcomeError *> * _Nonnull)membersSendWelcomeEmail:(DBXTEAMUserSelectorArg * _Nonnull)userSelectorArg;

/// 
/// Updates a team member's permissions. Permission : Team member management
/// 
/// - parameter user: Identity of user whose role will be set.
/// - parameter dNewRole: The new role of the member.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMMembersSetPermissionsResult * _Nonnull`
/// object on success or a `DBXTEAMMembersSetPermissionsError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMMembersSetPermissionsResult *, DBXTEAMMembersSetPermissionsError *> * _Nonnull)membersSetAdminPermissions:(DBXTEAMUserSelectorArg * _Nonnull)user dNewRole:(DBXTEAMAdminTier * _Nonnull)dNewRole;

/// 
/// Updates a team member's profile. Permission : Team member management
/// 
/// - parameter user: Identity of user whose profile will be set.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMTeamMemberInfo * _Nonnull` object on
/// success or a `DBXTEAMMembersSetProfileError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMTeamMemberInfo *, DBXTEAMMembersSetProfileError *> * _Nonnull)membersSetProfile:(DBXTEAMUserSelectorArg * _Nonnull)user;

/// 
/// Updates a team member's profile. Permission : Team member management
/// 
/// - parameter user: Identity of user whose profile will be set.
/// - parameter dNewEmail: New email for member.
/// - parameter dNewExternalId: New external ID for member.
/// - parameter dNewGivenName: New given name for member.
/// - parameter dNewSurname: New surname for member.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMTeamMemberInfo * _Nonnull` object on
/// success or a `DBXTEAMMembersSetProfileError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMTeamMemberInfo *, DBXTEAMMembersSetProfileError *> * _Nonnull)membersSetProfile:(DBXTEAMUserSelectorArg * _Nonnull)user dNewEmail:(NSString * _Nullable)dNewEmail dNewExternalId:(NSString * _Nullable)dNewExternalId dNewGivenName:(NSString * _Nullable)dNewGivenName dNewSurname:(NSString * _Nullable)dNewSurname;

/// 
/// Suspend a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
/// external_id must be provided to identify the user account.
/// 
/// - parameter user: Identity of user to remove/suspend.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXTEAMMembersSuspendError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXTEAMMembersSuspendError *> * _Nonnull)membersSuspend:(DBXTEAMUserSelectorArg * _Nonnull)user;

/// 
/// Suspend a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
/// external_id must be provided to identify the user account.
/// 
/// - parameter user: Identity of user to remove/suspend.
/// - parameter wipeData: If provided, controls if the user's data will be deleted on their linked devices.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXTEAMMembersSuspendError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXTEAMMembersSuspendError *> * _Nonnull)membersSuspend:(DBXTEAMUserSelectorArg * _Nonnull)user wipeData:(NSNumber * _Nullable)wipeData;

/// 
/// Unsuspend a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
/// external_id must be provided to identify the user account.
/// 
/// - parameter user: Identity of user to unsuspend.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DBXTEAMMembersUnsuspendError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXNilObject *, DBXTEAMMembersUnsuspendError *> * _Nonnull)membersUnsuspend:(DBXTEAMUserSelectorArg * _Nonnull)user;

/// 
/// Add a property template. See route files/properties/add to add properties to a file.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMAddPropertyTemplateResult * _Nonnull`
/// object on success or a `DBXPROPERTIESModifyPropertyTemplateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMAddPropertyTemplateResult *, DBXPROPERTIESModifyPropertyTemplateError *> * _Nonnull)propertiesTemplateAdd:(NSString * _Nonnull)name description_:(NSString * _Nonnull)description_ fields:(NSArray<DBXPROPERTIESPropertyFieldTemplate *> * _Nonnull)fields;

/// 
/// Get the schema for a specified template.
/// 
/// - parameter templateId: An identifier for property template added by route properties/template/add.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXPROPERTIESGetPropertyTemplateResult *
/// _Nonnull` object on success or a `DBXPROPERTIESPropertyTemplateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXPROPERTIESGetPropertyTemplateResult *, DBXPROPERTIESPropertyTemplateError *> * _Nonnull)propertiesTemplateGet:(NSString * _Nonnull)templateId;

/// 
/// Get the property template identifiers for a team. To get the schema of each template use propertiesTemplateGet.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXPROPERTIESListPropertyTemplateIds *
/// _Nonnull` object on success or a `DBXPROPERTIESPropertyTemplateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXPROPERTIESListPropertyTemplateIds *, DBXPROPERTIESPropertyTemplateError *> * _Nonnull)propertiesTemplateList;

/// 
/// Update a property template. This route can update the template name, the template description and add optional
/// properties to templates.
/// 
/// - parameter templateId: An identifier for property template added by propertiesTemplateAdd.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMUpdatePropertyTemplateResult * _Nonnull`
/// object on success or a `DBXPROPERTIESModifyPropertyTemplateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMUpdatePropertyTemplateResult *, DBXPROPERTIESModifyPropertyTemplateError *> * _Nonnull)propertiesTemplateUpdate:(NSString * _Nonnull)templateId;

/// 
/// Update a property template. This route can update the template name, the template description and add optional
/// properties to templates.
/// 
/// - parameter templateId: An identifier for property template added by propertiesTemplateAdd.
/// - parameter name: A display name for the property template. Property template names can be up to 256 bytes.
/// - parameter description_: Description for new property template. Property template descriptions can be up to 1024
/// bytes.
/// - parameter addFields: This is a list of custom properties to add to the property template. There can be up to 64
/// properties in a single property template.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMUpdatePropertyTemplateResult * _Nonnull`
/// object on success or a `DBXPROPERTIESModifyPropertyTemplateError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMUpdatePropertyTemplateResult *, DBXPROPERTIESModifyPropertyTemplateError *> * _Nonnull)propertiesTemplateUpdate:(NSString * _Nonnull)templateId name:(NSString * _Nullable)name description_:(NSString * _Nullable)description_ addFields:(NSArray<DBXPROPERTIESPropertyFieldTemplate *> * _Nullable)addFields;

/// 
/// Retrieves reporting data about a team's user activity.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGetActivityReport * _Nonnull` object on
/// success or a `DBXTEAMDateRangeError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGetActivityReport *, DBXTEAMDateRangeError *> * _Nonnull)reportsGetActivity;

/// 
/// Retrieves reporting data about a team's user activity.
/// 
/// - parameter startDate: Optional starting date (inclusive)
/// - parameter endDate: Optional ending date (exclusive)
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGetActivityReport * _Nonnull` object on
/// success or a `DBXTEAMDateRangeError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGetActivityReport *, DBXTEAMDateRangeError *> * _Nonnull)reportsGetActivity:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate;

/// 
/// Retrieves reporting data about a team's linked devices.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGetDevicesReport * _Nonnull` object on
/// success or a `DBXTEAMDateRangeError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGetDevicesReport *, DBXTEAMDateRangeError *> * _Nonnull)reportsGetDevices;

/// 
/// Retrieves reporting data about a team's linked devices.
/// 
/// - parameter startDate: Optional starting date (inclusive)
/// - parameter endDate: Optional ending date (exclusive)
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGetDevicesReport * _Nonnull` object on
/// success or a `DBXTEAMDateRangeError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGetDevicesReport *, DBXTEAMDateRangeError *> * _Nonnull)reportsGetDevices:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate;

/// 
/// Retrieves reporting data about a team's membership.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGetMembershipReport * _Nonnull` object
/// on success or a `DBXTEAMDateRangeError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGetMembershipReport *, DBXTEAMDateRangeError *> * _Nonnull)reportsGetMembership;

/// 
/// Retrieves reporting data about a team's membership.
/// 
/// - parameter startDate: Optional starting date (inclusive)
/// - parameter endDate: Optional ending date (exclusive)
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGetMembershipReport * _Nonnull` object
/// on success or a `DBXTEAMDateRangeError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGetMembershipReport *, DBXTEAMDateRangeError *> * _Nonnull)reportsGetMembership:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate;

/// 
/// Retrieves reporting data about a team's storage usage.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGetStorageReport * _Nonnull` object on
/// success or a `DBXTEAMDateRangeError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGetStorageReport *, DBXTEAMDateRangeError *> * _Nonnull)reportsGetStorage;

/// 
/// Retrieves reporting data about a team's storage usage.
/// 
/// - parameter startDate: Optional starting date (inclusive)
/// - parameter endDate: Optional ending date (exclusive)
/// 
/// - returns: Through the response callback, the caller will receive a `DBXTEAMGetStorageReport * _Nonnull` object on
/// success or a `DBXTEAMDateRangeError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXTEAMGetStorageReport *, DBXTEAMDateRangeError *> * _Nonnull)reportsGetStorage:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate;

@end
