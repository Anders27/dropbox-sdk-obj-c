///
/// Auto-generated by Stone, do not modify.
///

#import "DBXTEAMRoutes.h"

@implementation DBXTEAMRoutes 

- (instancetype)init:(DBXTransportClient *)client {
    self = [super init];
    if (self) {
        _client = client;
    }
    return self;
}
- (DBXRpcTask *)alphaGroupsCreate:(NSString *)groupName {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMAlphaGroupsCreate;
    DBXTEAMGroupCreateArg *arg = [[DBXTEAMGroupCreateArg alloc] initWithGroupName:groupName];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)alphaGroupsCreate:(NSString *)groupName groupExternalId:(NSString *)groupExternalId groupManagementType:(DBXTEAMCOMMONGroupManagementType *)groupManagementType {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMAlphaGroupsCreate;
    DBXTEAMGroupCreateArg *arg = [[DBXTEAMGroupCreateArg alloc] initWithGroupName:groupName groupExternalId:groupExternalId groupManagementType:groupManagementType];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)alphaGroupsGetInfo:(DBXTEAMGroupsSelector *)groupsSelector {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMAlphaGroupsGetInfo;
    DBXTEAMGroupsSelector *arg = groupsSelector;
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)alphaGroupsList {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMAlphaGroupsList;
    DBXTEAMGroupsListArg *arg = [[DBXTEAMGroupsListArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)alphaGroupsList:(NSNumber *)limit {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMAlphaGroupsList;
    DBXTEAMGroupsListArg *arg = [[DBXTEAMGroupsListArg alloc] initWithLimit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)alphaGroupsListContinue:(NSString *)cursor {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMAlphaGroupsListContinue;
    DBXTEAMGroupsListContinueArg *arg = [[DBXTEAMGroupsListContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)alphaGroupsUpdate:(DBXTEAMGroupSelector *)group {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMAlphaGroupsUpdate;
    DBXTEAMGroupUpdateArgs *arg = [[DBXTEAMGroupUpdateArgs alloc] initWithGroup:group];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)alphaGroupsUpdate:(DBXTEAMGroupSelector *)group returnMembers:(NSNumber *)returnMembers dNewGroupName:(NSString *)dNewGroupName dNewGroupExternalId:(NSString *)dNewGroupExternalId dNewGroupManagementType:(DBXTEAMCOMMONGroupManagementType *)dNewGroupManagementType {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMAlphaGroupsUpdate;
    DBXTEAMGroupUpdateArgs *arg = [[DBXTEAMGroupUpdateArgs alloc] initWithGroup:group returnMembers:returnMembers dNewGroupName:dNewGroupName dNewGroupExternalId:dNewGroupExternalId dNewGroupManagementType:dNewGroupManagementType];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)devicesListMemberDevices:(NSString *)teamMemberId {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMDevicesListMemberDevices;
    DBXTEAMListMemberDevicesArg *arg = [[DBXTEAMListMemberDevicesArg alloc] initWithTeamMemberId:teamMemberId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)devicesListMemberDevices:(NSString *)teamMemberId includeWebSessions:(NSNumber *)includeWebSessions includeDesktopClients:(NSNumber *)includeDesktopClients includeMobileClients:(NSNumber *)includeMobileClients {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMDevicesListMemberDevices;
    DBXTEAMListMemberDevicesArg *arg = [[DBXTEAMListMemberDevicesArg alloc] initWithTeamMemberId:teamMemberId includeWebSessions:includeWebSessions includeDesktopClients:includeDesktopClients includeMobileClients:includeMobileClients];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)devicesListMembersDevices {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMDevicesListMembersDevices;
    DBXTEAMListMembersDevicesArg *arg = [[DBXTEAMListMembersDevicesArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)devicesListMembersDevices:(NSString *)cursor includeWebSessions:(NSNumber *)includeWebSessions includeDesktopClients:(NSNumber *)includeDesktopClients includeMobileClients:(NSNumber *)includeMobileClients {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMDevicesListMembersDevices;
    DBXTEAMListMembersDevicesArg *arg = [[DBXTEAMListMembersDevicesArg alloc] initWithCursor:cursor includeWebSessions:includeWebSessions includeDesktopClients:includeDesktopClients includeMobileClients:includeMobileClients];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)devicesListTeamDevices {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMDevicesListTeamDevices;
    DBXTEAMListTeamDevicesArg *arg = [[DBXTEAMListTeamDevicesArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)devicesListTeamDevices:(NSString *)cursor includeWebSessions:(NSNumber *)includeWebSessions includeDesktopClients:(NSNumber *)includeDesktopClients includeMobileClients:(NSNumber *)includeMobileClients {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMDevicesListTeamDevices;
    DBXTEAMListTeamDevicesArg *arg = [[DBXTEAMListTeamDevicesArg alloc] initWithCursor:cursor includeWebSessions:includeWebSessions includeDesktopClients:includeDesktopClients includeMobileClients:includeMobileClients];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)devicesRevokeDeviceSession:(DBXTEAMRevokeDeviceSessionArg *)revokeDeviceSessionArg {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMDevicesRevokeDeviceSession;
    DBXTEAMRevokeDeviceSessionArg *arg = revokeDeviceSessionArg;
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)devicesRevokeDeviceSessionBatch:(NSArray<DBXTEAMRevokeDeviceSessionArg *> *)revokeDevices {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMDevicesRevokeDeviceSessionBatch;
    DBXTEAMRevokeDeviceSessionBatchArg *arg = [[DBXTEAMRevokeDeviceSessionBatchArg alloc] initWithRevokeDevices:revokeDevices];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)getInfo {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGetInfo;
    return [self.client requestRpc:route arg:nil];
}

- (DBXRpcTask *)groupsCreate:(NSString *)groupName {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsCreate;
    DBXTEAMGroupCreateArg *arg = [[DBXTEAMGroupCreateArg alloc] initWithGroupName:groupName];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsCreate:(NSString *)groupName groupExternalId:(NSString *)groupExternalId groupManagementType:(DBXTEAMCOMMONGroupManagementType *)groupManagementType {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsCreate;
    DBXTEAMGroupCreateArg *arg = [[DBXTEAMGroupCreateArg alloc] initWithGroupName:groupName groupExternalId:groupExternalId groupManagementType:groupManagementType];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsDelete:(DBXTEAMGroupSelector *)groupSelector {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsDelete;
    DBXTEAMGroupSelector *arg = groupSelector;
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsGetInfo:(DBXTEAMGroupsSelector *)groupsSelector {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsGetInfo;
    DBXTEAMGroupsSelector *arg = groupsSelector;
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsJobStatusGet:(NSString *)asyncJobId {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsJobStatusGet;
    DBXASYNCPollArg *arg = [[DBXASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsList {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsList;
    DBXTEAMGroupsListArg *arg = [[DBXTEAMGroupsListArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsList:(NSNumber *)limit {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsList;
    DBXTEAMGroupsListArg *arg = [[DBXTEAMGroupsListArg alloc] initWithLimit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsListContinue:(NSString *)cursor {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsListContinue;
    DBXTEAMGroupsListContinueArg *arg = [[DBXTEAMGroupsListContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsMembersAdd:(DBXTEAMGroupSelector *)group members:(NSArray<DBXTEAMMemberAccess *> *)members {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsMembersAdd;
    DBXTEAMGroupMembersAddArg *arg = [[DBXTEAMGroupMembersAddArg alloc] initWithGroup:group members:members];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsMembersAdd:(DBXTEAMGroupSelector *)group members:(NSArray<DBXTEAMMemberAccess *> *)members returnMembers:(NSNumber *)returnMembers {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsMembersAdd;
    DBXTEAMGroupMembersAddArg *arg = [[DBXTEAMGroupMembersAddArg alloc] initWithGroup:group members:members returnMembers:returnMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsMembersList:(DBXTEAMGroupSelector *)group {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsMembersList;
    DBXTEAMGroupsMembersListArg *arg = [[DBXTEAMGroupsMembersListArg alloc] initWithGroup:group];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsMembersList:(DBXTEAMGroupSelector *)group limit:(NSNumber *)limit {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsMembersList;
    DBXTEAMGroupsMembersListArg *arg = [[DBXTEAMGroupsMembersListArg alloc] initWithGroup:group limit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsMembersListContinue:(NSString *)cursor {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsMembersListContinue;
    DBXTEAMGroupsMembersListContinueArg *arg = [[DBXTEAMGroupsMembersListContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsMembersRemove:(DBXTEAMGroupSelector *)group users:(NSArray<DBXTEAMUserSelectorArg *> *)users {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsMembersRemove;
    DBXTEAMGroupMembersRemoveArg *arg = [[DBXTEAMGroupMembersRemoveArg alloc] initWithGroup:group users:users];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsMembersRemove:(DBXTEAMGroupSelector *)group users:(NSArray<DBXTEAMUserSelectorArg *> *)users returnMembers:(NSNumber *)returnMembers {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsMembersRemove;
    DBXTEAMGroupMembersRemoveArg *arg = [[DBXTEAMGroupMembersRemoveArg alloc] initWithGroup:group users:users returnMembers:returnMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsMembersSetAccessType:(DBXTEAMGroupSelector *)group user:(DBXTEAMUserSelectorArg *)user accessType:(DBXTEAMGroupAccessType *)accessType {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsMembersSetAccessType;
    DBXTEAMGroupMembersSetAccessTypeArg *arg = [[DBXTEAMGroupMembersSetAccessTypeArg alloc] initWithGroup:group user:user accessType:accessType];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsMembersSetAccessType:(DBXTEAMGroupSelector *)group user:(DBXTEAMUserSelectorArg *)user accessType:(DBXTEAMGroupAccessType *)accessType returnMembers:(NSNumber *)returnMembers {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsMembersSetAccessType;
    DBXTEAMGroupMembersSetAccessTypeArg *arg = [[DBXTEAMGroupMembersSetAccessTypeArg alloc] initWithGroup:group user:user accessType:accessType returnMembers:returnMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsUpdate:(DBXTEAMGroupSelector *)group {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsUpdate;
    DBXTEAMGroupUpdateArgs *arg = [[DBXTEAMGroupUpdateArgs alloc] initWithGroup:group];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)groupsUpdate:(DBXTEAMGroupSelector *)group returnMembers:(NSNumber *)returnMembers dNewGroupName:(NSString *)dNewGroupName dNewGroupExternalId:(NSString *)dNewGroupExternalId dNewGroupManagementType:(DBXTEAMCOMMONGroupManagementType *)dNewGroupManagementType {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMGroupsUpdate;
    DBXTEAMGroupUpdateArgs *arg = [[DBXTEAMGroupUpdateArgs alloc] initWithGroup:group returnMembers:returnMembers dNewGroupName:dNewGroupName dNewGroupExternalId:dNewGroupExternalId dNewGroupManagementType:dNewGroupManagementType];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)linkedAppsListMemberLinkedApps:(NSString *)teamMemberId {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMLinkedAppsListMemberLinkedApps;
    DBXTEAMListMemberAppsArg *arg = [[DBXTEAMListMemberAppsArg alloc] initWithTeamMemberId:teamMemberId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)linkedAppsListMembersLinkedApps {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMLinkedAppsListMembersLinkedApps;
    DBXTEAMListMembersAppsArg *arg = [[DBXTEAMListMembersAppsArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)linkedAppsListMembersLinkedApps:(NSString *)cursor {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMLinkedAppsListMembersLinkedApps;
    DBXTEAMListMembersAppsArg *arg = [[DBXTEAMListMembersAppsArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)linkedAppsListTeamLinkedApps {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMLinkedAppsListTeamLinkedApps;
    DBXTEAMListTeamAppsArg *arg = [[DBXTEAMListTeamAppsArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)linkedAppsListTeamLinkedApps:(NSString *)cursor {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMLinkedAppsListTeamLinkedApps;
    DBXTEAMListTeamAppsArg *arg = [[DBXTEAMListTeamAppsArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)linkedAppsRevokeLinkedApp:(NSString *)appId teamMemberId:(NSString *)teamMemberId {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMLinkedAppsRevokeLinkedApp;
    DBXTEAMRevokeLinkedApiAppArg *arg = [[DBXTEAMRevokeLinkedApiAppArg alloc] initWithAppId:appId teamMemberId:teamMemberId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)linkedAppsRevokeLinkedApp:(NSString *)appId teamMemberId:(NSString *)teamMemberId keepAppFolder:(NSNumber *)keepAppFolder {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMLinkedAppsRevokeLinkedApp;
    DBXTEAMRevokeLinkedApiAppArg *arg = [[DBXTEAMRevokeLinkedApiAppArg alloc] initWithAppId:appId teamMemberId:teamMemberId keepAppFolder:keepAppFolder];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)linkedAppsRevokeLinkedAppBatch:(NSArray<DBXTEAMRevokeLinkedApiAppArg *> *)revokeLinkedApp {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMLinkedAppsRevokeLinkedAppBatch;
    DBXTEAMRevokeLinkedApiAppBatchArg *arg = [[DBXTEAMRevokeLinkedApiAppBatchArg alloc] initWithRevokeLinkedApp:revokeLinkedApp];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersAdd:(NSArray<DBXTEAMMemberAddArg *> *)dNewMembers {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersAdd;
    DBXTEAMMembersAddArg *arg = [[DBXTEAMMembersAddArg alloc] initWithDNewMembers:dNewMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersAdd:(NSArray<DBXTEAMMemberAddArg *> *)dNewMembers forceAsync:(NSNumber *)forceAsync {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersAdd;
    DBXTEAMMembersAddArg *arg = [[DBXTEAMMembersAddArg alloc] initWithDNewMembers:dNewMembers forceAsync:forceAsync];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersAddJobStatusGet:(NSString *)asyncJobId {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersAddJobStatusGet;
    DBXASYNCPollArg *arg = [[DBXASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersGetInfo:(NSArray<DBXTEAMUserSelectorArg *> *)members {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersGetInfo;
    DBXTEAMMembersGetInfoArgs *arg = [[DBXTEAMMembersGetInfoArgs alloc] initWithMembers:members];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersList {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersList;
    DBXTEAMMembersListArg *arg = [[DBXTEAMMembersListArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersList:(NSNumber *)limit includeRemoved:(NSNumber *)includeRemoved {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersList;
    DBXTEAMMembersListArg *arg = [[DBXTEAMMembersListArg alloc] initWithLimit:limit includeRemoved:includeRemoved];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersListContinue:(NSString *)cursor {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersListContinue;
    DBXTEAMMembersListContinueArg *arg = [[DBXTEAMMembersListContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersRecover:(DBXTEAMUserSelectorArg *)user {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersRecover;
    DBXTEAMMembersRecoverArg *arg = [[DBXTEAMMembersRecoverArg alloc] initWithUser:user];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersRemove:(DBXTEAMUserSelectorArg *)user {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersRemove;
    DBXTEAMMembersRemoveArg *arg = [[DBXTEAMMembersRemoveArg alloc] initWithUser:user];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersRemove:(DBXTEAMUserSelectorArg *)user wipeData:(NSNumber *)wipeData transferDestId:(DBXTEAMUserSelectorArg *)transferDestId transferAdminId:(DBXTEAMUserSelectorArg *)transferAdminId keepAccount:(NSNumber *)keepAccount {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersRemove;
    DBXTEAMMembersRemoveArg *arg = [[DBXTEAMMembersRemoveArg alloc] initWithUser:user wipeData:wipeData transferDestId:transferDestId transferAdminId:transferAdminId keepAccount:keepAccount];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersRemoveJobStatusGet:(NSString *)asyncJobId {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersRemoveJobStatusGet;
    DBXASYNCPollArg *arg = [[DBXASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersSendWelcomeEmail:(DBXTEAMUserSelectorArg *)userSelectorArg {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersSendWelcomeEmail;
    DBXTEAMUserSelectorArg *arg = userSelectorArg;
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersSetAdminPermissions:(DBXTEAMUserSelectorArg *)user dNewRole:(DBXTEAMAdminTier *)dNewRole {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersSetAdminPermissions;
    DBXTEAMMembersSetPermissionsArg *arg = [[DBXTEAMMembersSetPermissionsArg alloc] initWithUser:user dNewRole:dNewRole];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersSetProfile:(DBXTEAMUserSelectorArg *)user {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersSetProfile;
    DBXTEAMMembersSetProfileArg *arg = [[DBXTEAMMembersSetProfileArg alloc] initWithUser:user];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersSetProfile:(DBXTEAMUserSelectorArg *)user dNewEmail:(NSString *)dNewEmail dNewExternalId:(NSString *)dNewExternalId dNewGivenName:(NSString *)dNewGivenName dNewSurname:(NSString *)dNewSurname {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersSetProfile;
    DBXTEAMMembersSetProfileArg *arg = [[DBXTEAMMembersSetProfileArg alloc] initWithUser:user dNewEmail:dNewEmail dNewExternalId:dNewExternalId dNewGivenName:dNewGivenName dNewSurname:dNewSurname];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersSuspend:(DBXTEAMUserSelectorArg *)user {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersSuspend;
    DBXTEAMMembersDeactivateArg *arg = [[DBXTEAMMembersDeactivateArg alloc] initWithUser:user];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersSuspend:(DBXTEAMUserSelectorArg *)user wipeData:(NSNumber *)wipeData {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersSuspend;
    DBXTEAMMembersDeactivateArg *arg = [[DBXTEAMMembersDeactivateArg alloc] initWithUser:user wipeData:wipeData];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)membersUnsuspend:(DBXTEAMUserSelectorArg *)user {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMMembersUnsuspend;
    DBXTEAMMembersUnsuspendArg *arg = [[DBXTEAMMembersUnsuspendArg alloc] initWithUser:user];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)propertiesTemplateAdd:(NSString *)name description_:(NSString *)description_ fields:(NSArray<DBXPROPERTIESPropertyFieldTemplate *> *)fields {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMPropertiesTemplateAdd;
    DBXTEAMAddPropertyTemplateArg *arg = [[DBXTEAMAddPropertyTemplateArg alloc] initWithName:name description_:description_ fields:fields];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)propertiesTemplateGet:(NSString *)templateId {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMPropertiesTemplateGet;
    DBXPROPERTIESGetPropertyTemplateArg *arg = [[DBXPROPERTIESGetPropertyTemplateArg alloc] initWithTemplateId:templateId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)propertiesTemplateList {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMPropertiesTemplateList;
    return [self.client requestRpc:route arg:nil];
}

- (DBXRpcTask *)propertiesTemplateUpdate:(NSString *)templateId {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMPropertiesTemplateUpdate;
    DBXTEAMUpdatePropertyTemplateArg *arg = [[DBXTEAMUpdatePropertyTemplateArg alloc] initWithTemplateId:templateId];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)propertiesTemplateUpdate:(NSString *)templateId name:(NSString *)name description_:(NSString *)description_ addFields:(NSArray<DBXPROPERTIESPropertyFieldTemplate *> *)addFields {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMPropertiesTemplateUpdate;
    DBXTEAMUpdatePropertyTemplateArg *arg = [[DBXTEAMUpdatePropertyTemplateArg alloc] initWithTemplateId:templateId name:name description_:description_ addFields:addFields];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)reportsGetActivity {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMReportsGetActivity;
    DBXTEAMDateRange *arg = [[DBXTEAMDateRange alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)reportsGetActivity:(NSDate *)startDate endDate:(NSDate *)endDate {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMReportsGetActivity;
    DBXTEAMDateRange *arg = [[DBXTEAMDateRange alloc] initWithStartDate:startDate endDate:endDate];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)reportsGetDevices {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMReportsGetDevices;
    DBXTEAMDateRange *arg = [[DBXTEAMDateRange alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)reportsGetDevices:(NSDate *)startDate endDate:(NSDate *)endDate {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMReportsGetDevices;
    DBXTEAMDateRange *arg = [[DBXTEAMDateRange alloc] initWithStartDate:startDate endDate:endDate];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)reportsGetMembership {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMReportsGetMembership;
    DBXTEAMDateRange *arg = [[DBXTEAMDateRange alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)reportsGetMembership:(NSDate *)startDate endDate:(NSDate *)endDate {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMReportsGetMembership;
    DBXTEAMDateRange *arg = [[DBXTEAMDateRange alloc] initWithStartDate:startDate endDate:endDate];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)reportsGetStorage {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMReportsGetStorage;
    DBXTEAMDateRange *arg = [[DBXTEAMDateRange alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DBXRpcTask *)reportsGetStorage:(NSDate *)startDate endDate:(NSDate *)endDate {
    DBXRoute *route = DBXTEAMRouteObjects.DBXTEAMReportsGetStorage;
    DBXTEAMDateRange *arg = [[DBXTEAMDateRange alloc] initWithStartDate:startDate endDate:endDate];
    return [self.client requestRpc:route arg:arg];
}

@end
