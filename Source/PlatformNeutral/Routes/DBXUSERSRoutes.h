///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBXErrors.h"
#import "DBXStoneBase.h"
#import "DBXTasks.h"
#import "DBXTransportClient.h"
#import "DBXUSERSAccount.h"
#import "DBXUSERSAccountType.h"
#import "DBXUSERSBasicAccount.h"
#import "DBXUSERSFullAccount.h"
#import "DBXUSERSFullTeam.h"
#import "DBXUSERSGetAccountArg.h"
#import "DBXUSERSGetAccountBatchArg.h"
#import "DBXUSERSGetAccountBatchError.h"
#import "DBXUSERSGetAccountError.h"
#import "DBXUSERSName.h"
#import "DBXUSERSRouteObjects.h"
#import "DBXUSERSRoutes.h"
#import "DBXUSERSSpaceAllocation.h"
#import "DBXUSERSSpaceUsage.h"

/// 
/// Routes for the Users namespace
/// 
@interface DBXUSERSRoutes : NSObject 

/// An instance of the networking client that each route will use to submit a
/// request.
@property (nonatomic) DBXTransportClient * _Nonnull client;

/// Initializes the `DBXUSERSRoutes` namespace container object with a
/// networking client.
- (nonnull instancetype)init:(DBXTransportClient * _Nonnull)client;

/// 
/// Get information about a user's account.
/// 
/// - parameter accountId: A user's account identifier.
/// 
/// - returns: Through the response callback, the caller will receive a `DBXUSERSBasicAccount * _Nonnull` object on
/// success or a `DBXUSERSGetAccountError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<DBXUSERSBasicAccount *, DBXUSERSGetAccountError *> * _Nonnull)getAccount:(NSString * _Nonnull)accountId;

/// 
/// Get information about multiple user accounts.  At most 300 accounts may be queried per request.
/// 
/// - parameter accountIds: List of user account identifiers.  Should not contain any duplicate account IDs.
/// 
/// - returns: Through the response callback, the caller will receive a `NSArray<DBXUSERSBasicAccount *> * _Nonnull`
/// object on success or a `DBXUSERSGetAccountBatchError * _Nonnull` object on failure.
/// 
- (DBXRpcTask<NSArray<DBXUSERSBasicAccount *> *, DBXUSERSGetAccountBatchError *> * _Nonnull)getAccountBatch:(NSArray<NSString *> * _Nonnull)accountIds;

/// 
/// Get information about the current user's account.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXUSERSFullAccount * _Nonnull` object on
/// success or a `void` object on failure.
/// 
- (DBXRpcTask<DBXUSERSFullAccount *, DBXNilObject *> * _Nonnull)getCurrentAccount;

/// 
/// Get the space usage information for the current user's account.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DBXUSERSSpaceUsage * _Nonnull` object on
/// success or a `void` object on failure.
/// 
- (DBXRpcTask<DBXUSERSSpaceUsage *, DBXNilObject *> * _Nonnull)getSpaceUsage;

@end
