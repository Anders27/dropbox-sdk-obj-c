///
/// Auto-generated by Stone, do not modify.
///

#import "DbxFilesRoutes.h"

@implementation DbxFilesRoutes 

- (instancetype)init:(DropboxTransportClient *)client {
    self = [super init];
    if (self != nil) {
        _client = client;
    }
    return self;
}
- (DbxRpcTask *)alphaGetMetadata:(NSString *)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesAlphaGetMetadata;
    DbxFilesAlphaGetMetadataArg *arg = [[DbxFilesAlphaGetMetadataArg alloc] initWithPath:(NSString *)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGetMetadata:(NSString * _Nonnull)path includeMediaInfo:(NSNumber * _Nullable)includeMediaInfo includeDeleted:(NSNumber * _Nullable)includeDeleted includeHasExplicitSharedMembers:(NSNumber * _Nullable)includeHasExplicitSharedMembers includePropertyTemplates:(NSArray<NSString *> * _Nullable)includePropertyTemplates {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesAlphaGetMetadata;
    DbxFilesAlphaGetMetadataArg *arg = [[DbxFilesAlphaGetMetadataArg alloc] initWithPath:(NSString * _Nonnull)path includeMediaInfo:(NSNumber * _Nullable)includeMediaInfo includeDeleted:(NSNumber * _Nullable)includeDeleted includeHasExplicitSharedMembers:(NSNumber * _Nullable)includeHasExplicitSharedMembers includePropertyTemplates:(NSArray<NSString *> * _Nullable)includePropertyTemplates];
    return [self.client requestRpc:route arg:arg];
}

- (DbxUploadTask *)alphaUploadURL:(NSString *)path inputURL:(NSURL * _Nonnull)inputURL {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesAlphaUpload;
    DbxFilesCommitInfoWithProperties *arg = [[DbxFilesCommitInfoWithProperties alloc] initWithPath:(NSString *)path];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DbxUploadTask *)alphaUploadURL:(NSString * _Nonnull)path mode:(DbxFilesWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute propertyGroups:(NSArray<DbxPropertiesPropertyGroup *> * _Nullable)propertyGroups inputURL:(NSURL * _Nonnull)inputURL {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesAlphaUpload;
    DbxFilesCommitInfoWithProperties *arg = [[DbxFilesCommitInfoWithProperties alloc] initWithPath:(NSString * _Nonnull)path mode:(DbxFilesWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute propertyGroups:(NSArray<DbxPropertiesPropertyGroup *> * _Nullable)propertyGroups];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DbxUploadTask *)alphaUploadData:(NSString *)path inputData:(NSData * _Nonnull)inputData {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesAlphaUpload;
    DbxFilesCommitInfoWithProperties *arg = [[DbxFilesCommitInfoWithProperties alloc] initWithPath:(NSString *)path];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DbxUploadTask *)alphaUploadData:(NSString * _Nonnull)path mode:(DbxFilesWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute propertyGroups:(NSArray<DbxPropertiesPropertyGroup *> * _Nullable)propertyGroups inputData:(NSData * _Nonnull)inputData {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesAlphaUpload;
    DbxFilesCommitInfoWithProperties *arg = [[DbxFilesCommitInfoWithProperties alloc] initWithPath:(NSString * _Nonnull)path mode:(DbxFilesWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute propertyGroups:(NSArray<DbxPropertiesPropertyGroup *> * _Nullable)propertyGroups];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DbxUploadTask *)alphaUploadStream:(NSString *)path inputStream:(NSInputStream * _Nonnull)inputStream {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesAlphaUpload;
    DbxFilesCommitInfoWithProperties *arg = [[DbxFilesCommitInfoWithProperties alloc] initWithPath:(NSString *)path];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DbxUploadTask *)alphaUploadStream:(NSString * _Nonnull)path mode:(DbxFilesWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute propertyGroups:(NSArray<DbxPropertiesPropertyGroup *> * _Nullable)propertyGroups inputStream:(NSInputStream * _Nonnull)inputStream {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesAlphaUpload;
    DbxFilesCommitInfoWithProperties *arg = [[DbxFilesCommitInfoWithProperties alloc] initWithPath:(NSString * _Nonnull)path mode:(DbxFilesWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute propertyGroups:(NSArray<DbxPropertiesPropertyGroup *> * _Nullable)propertyGroups];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DbxRpcTask *)dCopy:(NSString * _Nonnull)fromPath toPath:(NSString * _Nonnull)toPath {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesDCopy;
    DbxFilesRelocationArg *arg = [[DbxFilesRelocationArg alloc] initWithFromPath:(NSString * _Nonnull)fromPath toPath:(NSString * _Nonnull)toPath];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)dCopyReferenceGet:(NSString * _Nonnull)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesDCopyReferenceGet;
    DbxFilesGetCopyReferenceArg *arg = [[DbxFilesGetCopyReferenceArg alloc] initWithPath:(NSString * _Nonnull)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)dCopyReferenceSave:(NSString * _Nonnull)dCopyReference path:(NSString * _Nonnull)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesDCopyReferenceSave;
    DbxFilesSaveCopyReferenceArg *arg = [[DbxFilesSaveCopyReferenceArg alloc] initWithDCopyReference:(NSString * _Nonnull)dCopyReference path:(NSString * _Nonnull)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)createFolder:(NSString * _Nonnull)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesCreateFolder;
    DbxFilesCreateFolderArg *arg = [[DbxFilesCreateFolderArg alloc] initWithPath:(NSString * _Nonnull)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)delete_:(NSString * _Nonnull)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesDelete_;
    DbxFilesDeleteArg *arg = [[DbxFilesDeleteArg alloc] initWithPath:(NSString * _Nonnull)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxDownloadURLTask *)downloadURL:(NSString *)path overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesDownload;
    DbxFilesDownloadArg *arg = [[DbxFilesDownloadArg alloc] initWithPath:(NSString *)path];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DbxDownloadURLTask *)downloadURL:(NSString * _Nonnull)path rev:(NSString * _Nullable)rev overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesDownload;
    DbxFilesDownloadArg *arg = [[DbxFilesDownloadArg alloc] initWithPath:(NSString * _Nonnull)path rev:(NSString * _Nullable)rev];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DbxDownloadDataTask *)downloadData:(NSString *)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesDownload;
    DbxFilesDownloadArg *arg = [[DbxFilesDownloadArg alloc] initWithPath:(NSString *)path];
    return [self.client requestDownload:route arg:arg];
}

- (DbxDownloadDataTask *)downloadData:(NSString * _Nonnull)path rev:(NSString * _Nullable)rev {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesDownload;
    DbxFilesDownloadArg *arg = [[DbxFilesDownloadArg alloc] initWithPath:(NSString * _Nonnull)path rev:(NSString * _Nullable)rev];
    return [self.client requestDownload:route arg:arg];
}

- (DbxRpcTask *)getMetadata:(NSString *)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesGetMetadata;
    DbxFilesGetMetadataArg *arg = [[DbxFilesGetMetadataArg alloc] initWithPath:(NSString *)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getMetadata:(NSString * _Nonnull)path includeMediaInfo:(NSNumber * _Nullable)includeMediaInfo includeDeleted:(NSNumber * _Nullable)includeDeleted includeHasExplicitSharedMembers:(NSNumber * _Nullable)includeHasExplicitSharedMembers {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesGetMetadata;
    DbxFilesGetMetadataArg *arg = [[DbxFilesGetMetadataArg alloc] initWithPath:(NSString * _Nonnull)path includeMediaInfo:(NSNumber * _Nullable)includeMediaInfo includeDeleted:(NSNumber * _Nullable)includeDeleted includeHasExplicitSharedMembers:(NSNumber * _Nullable)includeHasExplicitSharedMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DbxDownloadURLTask *)getPreviewURL:(NSString *)path overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesGetPreview;
    DbxFilesPreviewArg *arg = [[DbxFilesPreviewArg alloc] initWithPath:(NSString *)path];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DbxDownloadURLTask *)getPreviewURL:(NSString * _Nonnull)path rev:(NSString * _Nullable)rev overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesGetPreview;
    DbxFilesPreviewArg *arg = [[DbxFilesPreviewArg alloc] initWithPath:(NSString * _Nonnull)path rev:(NSString * _Nullable)rev];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DbxDownloadDataTask *)getPreviewData:(NSString *)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesGetPreview;
    DbxFilesPreviewArg *arg = [[DbxFilesPreviewArg alloc] initWithPath:(NSString *)path];
    return [self.client requestDownload:route arg:arg];
}

- (DbxDownloadDataTask *)getPreviewData:(NSString * _Nonnull)path rev:(NSString * _Nullable)rev {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesGetPreview;
    DbxFilesPreviewArg *arg = [[DbxFilesPreviewArg alloc] initWithPath:(NSString * _Nonnull)path rev:(NSString * _Nullable)rev];
    return [self.client requestDownload:route arg:arg];
}

- (DbxRpcTask *)getTemporaryLink:(NSString * _Nonnull)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesGetTemporaryLink;
    DbxFilesGetTemporaryLinkArg *arg = [[DbxFilesGetTemporaryLinkArg alloc] initWithPath:(NSString * _Nonnull)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxDownloadURLTask *)getThumbnailURL:(NSString *)path overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesGetThumbnail;
    DbxFilesThumbnailArg *arg = [[DbxFilesThumbnailArg alloc] initWithPath:(NSString *)path];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DbxDownloadURLTask *)getThumbnailURL:(NSString * _Nonnull)path format:(DbxFilesThumbnailFormat * _Nullable)format size:(DbxFilesThumbnailSize * _Nullable)size overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesGetThumbnail;
    DbxFilesThumbnailArg *arg = [[DbxFilesThumbnailArg alloc] initWithPath:(NSString * _Nonnull)path format:(DbxFilesThumbnailFormat * _Nullable)format size:(DbxFilesThumbnailSize * _Nullable)size];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DbxDownloadDataTask *)getThumbnailData:(NSString *)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesGetThumbnail;
    DbxFilesThumbnailArg *arg = [[DbxFilesThumbnailArg alloc] initWithPath:(NSString *)path];
    return [self.client requestDownload:route arg:arg];
}

- (DbxDownloadDataTask *)getThumbnailData:(NSString * _Nonnull)path format:(DbxFilesThumbnailFormat * _Nullable)format size:(DbxFilesThumbnailSize * _Nullable)size {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesGetThumbnail;
    DbxFilesThumbnailArg *arg = [[DbxFilesThumbnailArg alloc] initWithPath:(NSString * _Nonnull)path format:(DbxFilesThumbnailFormat * _Nullable)format size:(DbxFilesThumbnailSize * _Nullable)size];
    return [self.client requestDownload:route arg:arg];
}

- (DbxRpcTask *)listFolder:(NSString *)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesListFolder;
    DbxFilesListFolderArg *arg = [[DbxFilesListFolderArg alloc] initWithPath:(NSString *)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolder:(NSString * _Nonnull)path recursive:(NSNumber * _Nullable)recursive includeMediaInfo:(NSNumber * _Nullable)includeMediaInfo includeDeleted:(NSNumber * _Nullable)includeDeleted includeHasExplicitSharedMembers:(NSNumber * _Nullable)includeHasExplicitSharedMembers {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesListFolder;
    DbxFilesListFolderArg *arg = [[DbxFilesListFolderArg alloc] initWithPath:(NSString * _Nonnull)path recursive:(NSNumber * _Nullable)recursive includeMediaInfo:(NSNumber * _Nullable)includeMediaInfo includeDeleted:(NSNumber * _Nullable)includeDeleted includeHasExplicitSharedMembers:(NSNumber * _Nullable)includeHasExplicitSharedMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolderContinue:(NSString * _Nonnull)cursor {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesListFolderContinue;
    DbxFilesListFolderContinueArg *arg = [[DbxFilesListFolderContinueArg alloc] initWithCursor:(NSString * _Nonnull)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolderGetLatestCursor:(NSString *)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesListFolderGetLatestCursor;
    DbxFilesListFolderArg *arg = [[DbxFilesListFolderArg alloc] initWithPath:(NSString *)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolderGetLatestCursor:(NSString * _Nonnull)path recursive:(NSNumber * _Nullable)recursive includeMediaInfo:(NSNumber * _Nullable)includeMediaInfo includeDeleted:(NSNumber * _Nullable)includeDeleted includeHasExplicitSharedMembers:(NSNumber * _Nullable)includeHasExplicitSharedMembers {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesListFolderGetLatestCursor;
    DbxFilesListFolderArg *arg = [[DbxFilesListFolderArg alloc] initWithPath:(NSString * _Nonnull)path recursive:(NSNumber * _Nullable)recursive includeMediaInfo:(NSNumber * _Nullable)includeMediaInfo includeDeleted:(NSNumber * _Nullable)includeDeleted includeHasExplicitSharedMembers:(NSNumber * _Nullable)includeHasExplicitSharedMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolderLongpoll:(NSString *)cursor {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesListFolderLongpoll;
    DbxFilesListFolderLongpollArg *arg = [[DbxFilesListFolderLongpollArg alloc] initWithCursor:(NSString *)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolderLongpoll:(NSString * _Nonnull)cursor timeout:(NSNumber * _Nullable)timeout {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesListFolderLongpoll;
    DbxFilesListFolderLongpollArg *arg = [[DbxFilesListFolderLongpollArg alloc] initWithCursor:(NSString * _Nonnull)cursor timeout:(NSNumber * _Nullable)timeout];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listRevisions:(NSString *)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesListRevisions;
    DbxFilesListRevisionsArg *arg = [[DbxFilesListRevisionsArg alloc] initWithPath:(NSString *)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listRevisions:(NSString * _Nonnull)path limit:(NSNumber * _Nullable)limit {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesListRevisions;
    DbxFilesListRevisionsArg *arg = [[DbxFilesListRevisionsArg alloc] initWithPath:(NSString * _Nonnull)path limit:(NSNumber * _Nullable)limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)move:(NSString * _Nonnull)fromPath toPath:(NSString * _Nonnull)toPath {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesMove;
    DbxFilesRelocationArg *arg = [[DbxFilesRelocationArg alloc] initWithFromPath:(NSString * _Nonnull)fromPath toPath:(NSString * _Nonnull)toPath];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)permanentlyDelete:(NSString * _Nonnull)path {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesPermanentlyDelete;
    DbxFilesDeleteArg *arg = [[DbxFilesDeleteArg alloc] initWithPath:(NSString * _Nonnull)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesAdd:(NSString * _Nonnull)path propertyGroups:(NSArray<DbxPropertiesPropertyGroup *> * _Nonnull)propertyGroups {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesPropertiesAdd;
    DbxFilesPropertyGroupWithPath *arg = [[DbxFilesPropertyGroupWithPath alloc] initWithPath:(NSString * _Nonnull)path propertyGroups:(NSArray<DbxPropertiesPropertyGroup *> * _Nonnull)propertyGroups];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesOverwrite:(NSString * _Nonnull)path propertyGroups:(NSArray<DbxPropertiesPropertyGroup *> * _Nonnull)propertyGroups {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesPropertiesOverwrite;
    DbxFilesPropertyGroupWithPath *arg = [[DbxFilesPropertyGroupWithPath alloc] initWithPath:(NSString * _Nonnull)path propertyGroups:(NSArray<DbxPropertiesPropertyGroup *> * _Nonnull)propertyGroups];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesRemove:(NSString * _Nonnull)path propertyTemplateIds:(NSArray<NSString *> * _Nonnull)propertyTemplateIds {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesPropertiesRemove;
    DbxFilesRemovePropertiesArg *arg = [[DbxFilesRemovePropertiesArg alloc] initWithPath:(NSString * _Nonnull)path propertyTemplateIds:(NSArray<NSString *> * _Nonnull)propertyTemplateIds];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesTemplateGet:(NSString * _Nonnull)templateId {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesPropertiesTemplateGet;
    DbxPropertiesGetPropertyTemplateArg *arg = [[DbxPropertiesGetPropertyTemplateArg alloc] initWithTemplateId:(NSString * _Nonnull)templateId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesTemplateList {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesPropertiesTemplateList;
    return [self.client requestRpc:route arg:nil];
}

- (DbxRpcTask *)propertiesUpdate:(NSString * _Nonnull)path updatePropertyGroups:(NSArray<DbxFilesPropertyGroupUpdate *> * _Nonnull)updatePropertyGroups {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesPropertiesUpdate;
    DbxFilesUpdatePropertyGroupArg *arg = [[DbxFilesUpdatePropertyGroupArg alloc] initWithPath:(NSString * _Nonnull)path updatePropertyGroups:(NSArray<DbxFilesPropertyGroupUpdate *> * _Nonnull)updatePropertyGroups];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)restore:(NSString * _Nonnull)path rev:(NSString * _Nonnull)rev {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesRestore;
    DbxFilesRestoreArg *arg = [[DbxFilesRestoreArg alloc] initWithPath:(NSString * _Nonnull)path rev:(NSString * _Nonnull)rev];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)saveUrl:(NSString * _Nonnull)path url:(NSString * _Nonnull)url {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesSaveUrl;
    DbxFilesSaveUrlArg *arg = [[DbxFilesSaveUrlArg alloc] initWithPath:(NSString * _Nonnull)path url:(NSString * _Nonnull)url];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)saveUrlCheckJobStatus:(NSString * _Nonnull)asyncJobId {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesSaveUrlCheckJobStatus;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:(NSString * _Nonnull)asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)search:(NSString *)path query:(NSString *)query {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesSearch;
    DbxFilesSearchArg *arg = [[DbxFilesSearchArg alloc] initWithPath:(NSString *)path query:(NSString *)query];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)search:(NSString * _Nonnull)path query:(NSString * _Nonnull)query start:(NSNumber * _Nullable)start maxResults:(NSNumber * _Nullable)maxResults mode:(DbxFilesSearchMode * _Nullable)mode {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesSearch;
    DbxFilesSearchArg *arg = [[DbxFilesSearchArg alloc] initWithPath:(NSString * _Nonnull)path query:(NSString * _Nonnull)query start:(NSNumber * _Nullable)start maxResults:(NSNumber * _Nullable)maxResults mode:(DbxFilesSearchMode * _Nullable)mode];
    return [self.client requestRpc:route arg:arg];
}

- (DbxUploadTask *)uploadURL:(NSString *)path inputURL:(NSURL * _Nonnull)inputURL {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUpload;
    DbxFilesCommitInfo *arg = [[DbxFilesCommitInfo alloc] initWithPath:(NSString *)path];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DbxUploadTask *)uploadURL:(NSString * _Nonnull)path mode:(DbxFilesWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute inputURL:(NSURL * _Nonnull)inputURL {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUpload;
    DbxFilesCommitInfo *arg = [[DbxFilesCommitInfo alloc] initWithPath:(NSString * _Nonnull)path mode:(DbxFilesWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DbxUploadTask *)uploadData:(NSString *)path inputData:(NSData * _Nonnull)inputData {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUpload;
    DbxFilesCommitInfo *arg = [[DbxFilesCommitInfo alloc] initWithPath:(NSString *)path];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DbxUploadTask *)uploadData:(NSString * _Nonnull)path mode:(DbxFilesWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute inputData:(NSData * _Nonnull)inputData {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUpload;
    DbxFilesCommitInfo *arg = [[DbxFilesCommitInfo alloc] initWithPath:(NSString * _Nonnull)path mode:(DbxFilesWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DbxUploadTask *)uploadStream:(NSString *)path inputStream:(NSInputStream * _Nonnull)inputStream {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUpload;
    DbxFilesCommitInfo *arg = [[DbxFilesCommitInfo alloc] initWithPath:(NSString *)path];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DbxUploadTask *)uploadStream:(NSString * _Nonnull)path mode:(DbxFilesWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute inputStream:(NSInputStream * _Nonnull)inputStream {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUpload;
    DbxFilesCommitInfo *arg = [[DbxFilesCommitInfo alloc] initWithPath:(NSString * _Nonnull)path mode:(DbxFilesWriteMode * _Nullable)mode autorename:(NSNumber * _Nullable)autorename clientModified:(NSDate * _Nullable)clientModified mute:(NSNumber * _Nullable)mute];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DbxUploadTask *)uploadSessionAppendURL:(NSString * _Nonnull)sessionId offset:(NSNumber * _Nonnull)offset inputURL:(NSURL * _Nonnull)inputURL {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionAppend;
    DbxFilesUploadSessionCursor *arg = [[DbxFilesUploadSessionCursor alloc] initWithSessionId:(NSString * _Nonnull)sessionId offset:(NSNumber * _Nonnull)offset];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DbxUploadTask *)uploadSessionAppendData:(NSString * _Nonnull)sessionId offset:(NSNumber * _Nonnull)offset inputData:(NSData * _Nonnull)inputData {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionAppend;
    DbxFilesUploadSessionCursor *arg = [[DbxFilesUploadSessionCursor alloc] initWithSessionId:(NSString * _Nonnull)sessionId offset:(NSNumber * _Nonnull)offset];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DbxUploadTask *)uploadSessionAppendStream:(NSString * _Nonnull)sessionId offset:(NSNumber * _Nonnull)offset inputStream:(NSInputStream * _Nonnull)inputStream {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionAppend;
    DbxFilesUploadSessionCursor *arg = [[DbxFilesUploadSessionCursor alloc] initWithSessionId:(NSString * _Nonnull)sessionId offset:(NSNumber * _Nonnull)offset];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DbxUploadTask *)uploadSessionAppendV2URL:(DbxFilesUploadSessionCursor *)cursor inputURL:(NSURL * _Nonnull)inputURL {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionAppendV2;
    DbxFilesUploadSessionAppendArg *arg = [[DbxFilesUploadSessionAppendArg alloc] initWithCursor:(DbxFilesUploadSessionCursor *)cursor];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DbxUploadTask *)uploadSessionAppendV2URL:(DbxFilesUploadSessionCursor * _Nonnull)cursor close:(NSNumber * _Nullable)close inputURL:(NSURL * _Nonnull)inputURL {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionAppendV2;
    DbxFilesUploadSessionAppendArg *arg = [[DbxFilesUploadSessionAppendArg alloc] initWithCursor:(DbxFilesUploadSessionCursor * _Nonnull)cursor close:(NSNumber * _Nullable)close];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DbxUploadTask *)uploadSessionAppendV2Data:(DbxFilesUploadSessionCursor *)cursor inputData:(NSData * _Nonnull)inputData {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionAppendV2;
    DbxFilesUploadSessionAppendArg *arg = [[DbxFilesUploadSessionAppendArg alloc] initWithCursor:(DbxFilesUploadSessionCursor *)cursor];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DbxUploadTask *)uploadSessionAppendV2Data:(DbxFilesUploadSessionCursor * _Nonnull)cursor close:(NSNumber * _Nullable)close inputData:(NSData * _Nonnull)inputData {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionAppendV2;
    DbxFilesUploadSessionAppendArg *arg = [[DbxFilesUploadSessionAppendArg alloc] initWithCursor:(DbxFilesUploadSessionCursor * _Nonnull)cursor close:(NSNumber * _Nullable)close];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DbxUploadTask *)uploadSessionAppendV2Stream:(DbxFilesUploadSessionCursor *)cursor inputStream:(NSInputStream * _Nonnull)inputStream {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionAppendV2;
    DbxFilesUploadSessionAppendArg *arg = [[DbxFilesUploadSessionAppendArg alloc] initWithCursor:(DbxFilesUploadSessionCursor *)cursor];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DbxUploadTask *)uploadSessionAppendV2Stream:(DbxFilesUploadSessionCursor * _Nonnull)cursor close:(NSNumber * _Nullable)close inputStream:(NSInputStream * _Nonnull)inputStream {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionAppendV2;
    DbxFilesUploadSessionAppendArg *arg = [[DbxFilesUploadSessionAppendArg alloc] initWithCursor:(DbxFilesUploadSessionCursor * _Nonnull)cursor close:(NSNumber * _Nullable)close];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DbxUploadTask *)uploadSessionFinishURL:(DbxFilesUploadSessionCursor * _Nonnull)cursor commit:(DbxFilesCommitInfo * _Nonnull)commit inputURL:(NSURL * _Nonnull)inputURL {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionFinish;
    DbxFilesUploadSessionFinishArg *arg = [[DbxFilesUploadSessionFinishArg alloc] initWithCursor:(DbxFilesUploadSessionCursor * _Nonnull)cursor commit:(DbxFilesCommitInfo * _Nonnull)commit];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DbxUploadTask *)uploadSessionFinishData:(DbxFilesUploadSessionCursor * _Nonnull)cursor commit:(DbxFilesCommitInfo * _Nonnull)commit inputData:(NSData * _Nonnull)inputData {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionFinish;
    DbxFilesUploadSessionFinishArg *arg = [[DbxFilesUploadSessionFinishArg alloc] initWithCursor:(DbxFilesUploadSessionCursor * _Nonnull)cursor commit:(DbxFilesCommitInfo * _Nonnull)commit];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DbxUploadTask *)uploadSessionFinishStream:(DbxFilesUploadSessionCursor * _Nonnull)cursor commit:(DbxFilesCommitInfo * _Nonnull)commit inputStream:(NSInputStream * _Nonnull)inputStream {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionFinish;
    DbxFilesUploadSessionFinishArg *arg = [[DbxFilesUploadSessionFinishArg alloc] initWithCursor:(DbxFilesUploadSessionCursor * _Nonnull)cursor commit:(DbxFilesCommitInfo * _Nonnull)commit];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DbxRpcTask *)uploadSessionFinishBatch:(NSArray<DbxFilesUploadSessionFinishArg *> * _Nonnull)entries {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionFinishBatch;
    DbxFilesUploadSessionFinishBatchArg *arg = [[DbxFilesUploadSessionFinishBatchArg alloc] initWithEntries:(NSArray<DbxFilesUploadSessionFinishArg *> * _Nonnull)entries];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)uploadSessionFinishBatchCheck:(NSString * _Nonnull)asyncJobId {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionFinishBatchCheck;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:(NSString * _Nonnull)asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxUploadTask *)uploadSessionStartURL:(NSURL * _Nonnull)inputURL {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionStart;
    DbxFilesUploadSessionStartArg *arg = [[DbxFilesUploadSessionStartArg alloc] init];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DbxUploadTask *)uploadSessionStartURL:(NSNumber * _Nullable)close inputURL:(NSURL * _Nonnull)inputURL {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionStart;
    DbxFilesUploadSessionStartArg *arg = [[DbxFilesUploadSessionStartArg alloc] initWithClose:(NSNumber * _Nullable)close];
    return [self.client requestUpload:route arg:arg inputURL:inputURL];
}

- (DbxUploadTask *)uploadSessionStartData:(NSData * _Nonnull)inputData {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionStart;
    DbxFilesUploadSessionStartArg *arg = [[DbxFilesUploadSessionStartArg alloc] init];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DbxUploadTask *)uploadSessionStartData:(NSNumber * _Nullable)close inputData:(NSData * _Nonnull)inputData {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionStart;
    DbxFilesUploadSessionStartArg *arg = [[DbxFilesUploadSessionStartArg alloc] initWithClose:(NSNumber * _Nullable)close];
    return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DbxUploadTask *)uploadSessionStartStream:(NSInputStream * _Nonnull)inputStream {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionStart;
    DbxFilesUploadSessionStartArg *arg = [[DbxFilesUploadSessionStartArg alloc] init];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DbxUploadTask *)uploadSessionStartStream:(NSNumber * _Nullable)close inputStream:(NSInputStream * _Nonnull)inputStream {
    DbxRoute *route = DbxFilesRouteObjects.dbxFilesUploadSessionStart;
    DbxFilesUploadSessionStartArg *arg = [[DbxFilesUploadSessionStartArg alloc] initWithClose:(NSNumber * _Nullable)close];
    return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

@end
