///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DbxAsyncLaunchEmptyResult.h"
#import "DbxAsyncLaunchResultBase.h"
#import "DbxAsyncPollArg.h"
#import "DbxAsyncPollError.h"
#import "DbxAsyncPollResultBase.h"
#import "DbxErrors.h"
#import "DbxFilesLookupError.h"
#import "DbxSharingAccessLevel.h"
#import "DbxSharingAclUpdatePolicy.h"
#import "DbxSharingAddFileMemberArgs.h"
#import "DbxSharingAddFileMemberError.h"
#import "DbxSharingAddFolderMemberArg.h"
#import "DbxSharingAddFolderMemberError.h"
#import "DbxSharingAddMember.h"
#import "DbxSharingAddMemberSelectorError.h"
#import "DbxSharingChangeFileMemberAccessArgs.h"
#import "DbxSharingCreateSharedLinkArg.h"
#import "DbxSharingCreateSharedLinkError.h"
#import "DbxSharingCreateSharedLinkWithSettingsArg.h"
#import "DbxSharingCreateSharedLinkWithSettingsError.h"
#import "DbxSharingFileAction.h"
#import "DbxSharingFileLinkMetadata.h"
#import "DbxSharingFileMemberActionError.h"
#import "DbxSharingFileMemberActionIndividualResult.h"
#import "DbxSharingFileMemberActionResult.h"
#import "DbxSharingFileMemberRemoveActionResult.h"
#import "DbxSharingFilePermission.h"
#import "DbxSharingFolderAction.h"
#import "DbxSharingFolderLinkMetadata.h"
#import "DbxSharingFolderPermission.h"
#import "DbxSharingFolderPolicy.h"
#import "DbxSharingGetFileMetadataArg.h"
#import "DbxSharingGetFileMetadataBatchArg.h"
#import "DbxSharingGetFileMetadataBatchResult.h"
#import "DbxSharingGetFileMetadataError.h"
#import "DbxSharingGetFileMetadataIndividualResult.h"
#import "DbxSharingGetMetadataArgs.h"
#import "DbxSharingGetSharedLinkFileError.h"
#import "DbxSharingGetSharedLinkMetadataArg.h"
#import "DbxSharingGetSharedLinksArg.h"
#import "DbxSharingGetSharedLinksError.h"
#import "DbxSharingGetSharedLinksResult.h"
#import "DbxSharingGroupMembershipInfo.h"
#import "DbxSharingInsufficientQuotaAmounts.h"
#import "DbxSharingInviteeMembershipInfo.h"
#import "DbxSharingJobError.h"
#import "DbxSharingJobStatus.h"
#import "DbxSharingLinkMetadata.h"
#import "DbxSharingLinkPermissions.h"
#import "DbxSharingListFileMembersArg.h"
#import "DbxSharingListFileMembersBatchArg.h"
#import "DbxSharingListFileMembersBatchResult.h"
#import "DbxSharingListFileMembersContinueArg.h"
#import "DbxSharingListFileMembersContinueError.h"
#import "DbxSharingListFileMembersError.h"
#import "DbxSharingListFileMembersIndividualResult.h"
#import "DbxSharingListFilesArg.h"
#import "DbxSharingListFilesContinueArg.h"
#import "DbxSharingListFilesContinueError.h"
#import "DbxSharingListFilesResult.h"
#import "DbxSharingListFolderMembersArgs.h"
#import "DbxSharingListFolderMembersContinueArg.h"
#import "DbxSharingListFolderMembersContinueError.h"
#import "DbxSharingListFolderMembersCursorArg.h"
#import "DbxSharingListFoldersArgs.h"
#import "DbxSharingListFoldersContinueArg.h"
#import "DbxSharingListFoldersContinueError.h"
#import "DbxSharingListFoldersResult.h"
#import "DbxSharingListSharedLinksArg.h"
#import "DbxSharingListSharedLinksError.h"
#import "DbxSharingListSharedLinksResult.h"
#import "DbxSharingMemberAccessLevelResult.h"
#import "DbxSharingMemberAction.h"
#import "DbxSharingMemberPolicy.h"
#import "DbxSharingMemberSelector.h"
#import "DbxSharingModifySharedLinkSettingsArgs.h"
#import "DbxSharingModifySharedLinkSettingsError.h"
#import "DbxSharingMountFolderArg.h"
#import "DbxSharingMountFolderError.h"
#import "DbxSharingParentFolderAccessInfo.h"
#import "DbxSharingPathLinkMetadata.h"
#import "DbxSharingPendingUploadMode.h"
#import "DbxSharingRelinquishFileMembershipArg.h"
#import "DbxSharingRelinquishFileMembershipError.h"
#import "DbxSharingRelinquishFolderMembershipArg.h"
#import "DbxSharingRelinquishFolderMembershipError.h"
#import "DbxSharingRemoveFileMemberArg.h"
#import "DbxSharingRemoveFileMemberError.h"
#import "DbxSharingRemoveFolderMemberArg.h"
#import "DbxSharingRemoveFolderMemberError.h"
#import "DbxSharingRemoveMemberJobStatus.h"
#import "DbxSharingRevokeSharedLinkArg.h"
#import "DbxSharingRevokeSharedLinkError.h"
#import "DbxSharingRouteObjects.h"
#import "DbxSharingRoutes.h"
#import "DbxSharingShareFolderArg.h"
#import "DbxSharingShareFolderError.h"
#import "DbxSharingShareFolderErrorBase.h"
#import "DbxSharingShareFolderJobStatus.h"
#import "DbxSharingShareFolderLaunch.h"
#import "DbxSharingSharePathError.h"
#import "DbxSharingSharedFileMembers.h"
#import "DbxSharingSharedFileMetadata.h"
#import "DbxSharingSharedFolderAccessError.h"
#import "DbxSharingSharedFolderMemberError.h"
#import "DbxSharingSharedFolderMembers.h"
#import "DbxSharingSharedFolderMetadata.h"
#import "DbxSharingSharedFolderMetadataBase.h"
#import "DbxSharingSharedLinkError.h"
#import "DbxSharingSharedLinkMetadata.h"
#import "DbxSharingSharedLinkPolicy.h"
#import "DbxSharingSharedLinkSettings.h"
#import "DbxSharingSharedLinkSettingsError.h"
#import "DbxSharingSharingFileAccessError.h"
#import "DbxSharingSharingUserError.h"
#import "DbxSharingTeamMemberInfo.h"
#import "DbxSharingTransferFolderArg.h"
#import "DbxSharingTransferFolderError.h"
#import "DbxSharingUnmountFolderArg.h"
#import "DbxSharingUnmountFolderError.h"
#import "DbxSharingUnshareFileArg.h"
#import "DbxSharingUnshareFileError.h"
#import "DbxSharingUnshareFolderArg.h"
#import "DbxSharingUnshareFolderError.h"
#import "DbxSharingUpdateFolderMemberArg.h"
#import "DbxSharingUpdateFolderMemberError.h"
#import "DbxSharingUpdateFolderPolicyArg.h"
#import "DbxSharingUpdateFolderPolicyError.h"
#import "DbxSharingUserMembershipInfo.h"
#import "DbxSharingVisibility.h"
#import "DbxStoneBase.h"
#import "DbxTasks.h"
#import "DbxUsersTeam.h"
#import "DropboxTransportClient.h"


///
/// Auto-generated by Stone, do not modify.
///

/// Routes for the Sharing namespace
@interface DbxSharingRoutes : NSObject 

- (nonnull instancetype)init:(DropboxTransportClient * _Nonnull)client;

/// 
/// Adds specified members to a file.
/// 
/// - parameter file: File to which to add members.
/// - parameter members: Members to add. Note that even an email address is given, this may result in a user being
/// directy added to the membership if that email is the user's main account email.
/// 
/// - returns: Through the response callback, the caller will receive a `NSArray<DbxSharingFileMemberActionResult *> *
/// _Nonnull` object on success or a `DbxSharingAddFileMemberError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<NSArray<DbxSharingFileMemberActionResult *> *, DbxSharingAddFileMemberError *> * _Nonnull)addFileMember:(NSString * _Nonnull)file members:(NSArray<DbxSharingMemberSelector *> * _Nonnull)members;

/// 
/// Adds specified members to a file.
/// 
/// - parameter file: File to which to add members.
/// - parameter members: Members to add. Note that even an email address is given, this may result in a user being
/// directy added to the membership if that email is the user's main account email.
/// - parameter customMessage: Message to send to added members in their invitation.
/// - parameter quiet: Whether added members should be notified via device notifications of their invitation.
/// - parameter accessLevel: AccessLevel union object, describing what access level we want to give new members.
/// - parameter addMessageAsComment: If the custom message should be added as a comment on the file.
/// 
/// - returns: Through the response callback, the caller will receive a `NSArray<DbxSharingFileMemberActionResult *> *
/// _Nonnull` object on success or a `DbxSharingAddFileMemberError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<NSArray<DbxSharingFileMemberActionResult *> *, DbxSharingAddFileMemberError *> * _Nonnull)addFileMember:(NSString * _Nonnull)file members:(NSArray<DbxSharingMemberSelector *> * _Nonnull)members customMessage:(NSString * _Nullable)customMessage quiet:(NSNumber * _Nullable)quiet accessLevel:(DbxSharingAccessLevel * _Nullable)accessLevel addMessageAsComment:(NSNumber * _Nullable)addMessageAsComment;

/// 
/// Allows an owner or editor (if the ACL update policy allows) of a shared folder to add another member. For the new
/// member to get access to all the functionality for this folder, you will need to call mountFolder on their behalf.
/// Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// - parameter members: The intended list of members to add.  Added members will receive invites to join the shared
/// folder.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DbxSharingAddFolderMemberError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxNilObject *, DbxSharingAddFolderMemberError *> * _Nonnull)addFolderMember:(NSString * _Nonnull)sharedFolderId members:(NSArray<DbxSharingAddMember *> * _Nonnull)members;

/// 
/// Allows an owner or editor (if the ACL update policy allows) of a shared folder to add another member. For the new
/// member to get access to all the functionality for this folder, you will need to call mountFolder on their behalf.
/// Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// - parameter members: The intended list of members to add.  Added members will receive invites to join the shared
/// folder.
/// - parameter quiet: Whether added members should be notified via email and device notifications of their invite.
/// - parameter customMessage: Optional message to display to added members in their invitation.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DbxSharingAddFolderMemberError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxNilObject *, DbxSharingAddFolderMemberError *> * _Nonnull)addFolderMember:(NSString * _Nonnull)sharedFolderId members:(NSArray<DbxSharingAddMember *> * _Nonnull)members quiet:(NSNumber * _Nullable)quiet customMessage:(NSString * _Nullable)customMessage;

/// 
/// Changes a member's access on a shared file.
/// 
/// - parameter file: File for which we are changing a member's access.
/// - parameter member: The member whose access we are changing.
/// - parameter accessLevel: The new access level for the member.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingFileMemberActionResult * _Nonnull`
/// object on success or a `DbxSharingFileMemberActionError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingFileMemberActionResult *, DbxSharingFileMemberActionError *> * _Nonnull)changeFileMemberAccess:(NSString * _Nonnull)file member:(DbxSharingMemberSelector * _Nonnull)member accessLevel:(DbxSharingAccessLevel * _Nonnull)accessLevel;

/// 
/// Returns the status of an asynchronous job. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter asyncJobId: Id of the asynchronous job. This is the value of a response returned from the method that
/// launched the job.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingJobStatus * _Nonnull` object on
/// success or a `DbxAsyncPollError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingJobStatus *, DbxAsyncPollError *> * _Nonnull)checkJobStatus:(NSString * _Nonnull)asyncJobId;

/// 
/// Returns the status of an asynchronous job for sharing a folder. Apps must have full Dropbox access to use this
/// endpoint.
/// 
/// - parameter asyncJobId: Id of the asynchronous job. This is the value of a response returned from the method that
/// launched the job.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingRemoveMemberJobStatus * _Nonnull`
/// object on success or a `DbxAsyncPollError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingRemoveMemberJobStatus *, DbxAsyncPollError *> * _Nonnull)checkRemoveMemberJobStatus:(NSString * _Nonnull)asyncJobId;

/// 
/// Returns the status of an asynchronous job for sharing a folder. Apps must have full Dropbox access to use this
/// endpoint.
/// 
/// - parameter asyncJobId: Id of the asynchronous job. This is the value of a response returned from the method that
/// launched the job.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingShareFolderJobStatus * _Nonnull`
/// object on success or a `DbxAsyncPollError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingShareFolderJobStatus *, DbxAsyncPollError *> * _Nonnull)checkShareJobStatus:(NSString * _Nonnull)asyncJobId;

/// 
/// DEPRECATED: Create a shared link. If a shared link already exists for the given path, that link is returned. Note
/// that in the returned PathLinkMetadata, the url in PathLinkMetadata field is the shortened URL if shortUrl in
/// CreateSharedLinkArg argument is set to true. Previously, it was technically possible to break a shared link by
/// moving or renaming the corresponding file or folder. In the future, this will no longer be the case, so your app
/// shouldn't rely on this behavior. Instead, if your app needs to revoke a shared link, use revokeSharedLink.
/// 
/// - parameter path: The path to share.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingPathLinkMetadata * _Nonnull` object
/// on success or a `DbxSharingCreateSharedLinkError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingPathLinkMetadata *, DbxSharingCreateSharedLinkError *> * _Nonnull)createSharedLink:(NSString * _Nonnull)path __deprecated_msg("create_shared_link is deprecated. Use create_shared_link_with_settings.");

/// 
/// DEPRECATED: Create a shared link. If a shared link already exists for the given path, that link is returned. Note
/// that in the returned PathLinkMetadata, the url in PathLinkMetadata field is the shortened URL if shortUrl in
/// CreateSharedLinkArg argument is set to true. Previously, it was technically possible to break a shared link by
/// moving or renaming the corresponding file or folder. In the future, this will no longer be the case, so your app
/// shouldn't rely on this behavior. Instead, if your app needs to revoke a shared link, use revokeSharedLink.
/// 
/// - parameter path: The path to share.
/// - parameter shortUrl: Whether to return a shortened URL.
/// - parameter pendingUpload: If it's okay to share a path that does not yet exist, set this to either file in
/// PendingUploadMode or folder in PendingUploadMode to indicate whether to assume it's a file or folder.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingPathLinkMetadata * _Nonnull` object
/// on success or a `DbxSharingCreateSharedLinkError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingPathLinkMetadata *, DbxSharingCreateSharedLinkError *> * _Nonnull)createSharedLink:(NSString * _Nonnull)path shortUrl:(NSNumber * _Nullable)shortUrl pendingUpload:(DbxSharingPendingUploadMode * _Nullable)pendingUpload __deprecated_msg("create_shared_link is deprecated. Use create_shared_link_with_settings.");

/// 
/// Create a shared link with custom settings. If no settings are given then the default visibility is public in
/// RequestedVisibility (The resolved visibility, though, may depend on other aspects such as team and shared folder
/// settings).
/// 
/// - parameter path: The path to be shared by the shared link
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedLinkMetadata * _Nonnull` object
/// on success or a `DbxSharingCreateSharedLinkWithSettingsError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedLinkMetadata *, DbxSharingCreateSharedLinkWithSettingsError *> * _Nonnull)createSharedLinkWithSettings:(NSString * _Nonnull)path;

/// 
/// Create a shared link with custom settings. If no settings are given then the default visibility is public in
/// RequestedVisibility (The resolved visibility, though, may depend on other aspects such as team and shared folder
/// settings).
/// 
/// - parameter path: The path to be shared by the shared link
/// - parameter settings: The requested settings for the newly created shared link
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedLinkMetadata * _Nonnull` object
/// on success or a `DbxSharingCreateSharedLinkWithSettingsError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedLinkMetadata *, DbxSharingCreateSharedLinkWithSettingsError *> * _Nonnull)createSharedLinkWithSettings:(NSString * _Nonnull)path settings:(DbxSharingSharedLinkSettings * _Nullable)settings;

/// 
/// Returns shared file metadata.
/// 
/// - parameter file: The file to query.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFileMetadata * _Nonnull` object
/// on success or a `DbxSharingGetFileMetadataError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFileMetadata *, DbxSharingGetFileMetadataError *> * _Nonnull)getFileMetadata:(NSString * _Nonnull)file;

/// 
/// Returns shared file metadata.
/// 
/// - parameter file: The file to query.
/// - parameter actions: File actions to query.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFileMetadata * _Nonnull` object
/// on success or a `DbxSharingGetFileMetadataError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFileMetadata *, DbxSharingGetFileMetadataError *> * _Nonnull)getFileMetadata:(NSString * _Nonnull)file actions:(NSArray<DbxSharingFileAction *> * _Nullable)actions;

/// 
/// Returns shared file metadata.
/// 
/// - parameter files: The files to query.
/// 
/// - returns: Through the response callback, the caller will receive a `NSArray<DbxSharingGetFileMetadataBatchResult *>
/// * _Nonnull` object on success or a `DbxSharingSharingUserError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<NSArray<DbxSharingGetFileMetadataBatchResult *> *, DbxSharingSharingUserError *> * _Nonnull)getFileMetadataBatch:(NSArray<NSString *> * _Nonnull)files;

/// 
/// Returns shared file metadata.
/// 
/// - parameter files: The files to query.
/// - parameter actions: File actions to query.
/// 
/// - returns: Through the response callback, the caller will receive a `NSArray<DbxSharingGetFileMetadataBatchResult *>
/// * _Nonnull` object on success or a `DbxSharingSharingUserError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<NSArray<DbxSharingGetFileMetadataBatchResult *> *, DbxSharingSharingUserError *> * _Nonnull)getFileMetadataBatch:(NSArray<NSString *> * _Nonnull)files actions:(NSArray<DbxSharingFileAction *> * _Nullable)actions;

/// 
/// Returns shared folder metadata by its folder ID. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFolderMetadata * _Nonnull`
/// object on success or a `DbxSharingSharedFolderAccessError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFolderMetadata *, DbxSharingSharedFolderAccessError *> * _Nonnull)getFolderMetadata:(NSString * _Nonnull)sharedFolderId;

/// 
/// Returns shared folder metadata by its folder ID. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// - parameter actions: This is a list indicating whether the returned folder data will include a boolean value  allow
/// in FolderPermission that describes whether the current user can perform the  FolderAction on the folder.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFolderMetadata * _Nonnull`
/// object on success or a `DbxSharingSharedFolderAccessError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFolderMetadata *, DbxSharingSharedFolderAccessError *> * _Nonnull)getFolderMetadata:(NSString * _Nonnull)sharedFolderId actions:(NSArray<DbxSharingFolderAction *> * _Nullable)actions;

/// 
/// Download the shared link's file from a user's Dropbox.
/// 
/// - parameter url: URL of the shared link.
/// - parameter overwrite: A boolean to set behavior in the event of a naming conflict. `True` will overwrite
/// conflicting file at destination. `False` will take no action (but if left unhandled in destination closure, an
/// NSError will be thrown).
/// - parameter destination: A closure used to compute the destination, given the temporary file location and the
/// response.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedLinkMetadata * _Nonnull` object
/// on success or a `DbxSharingGetSharedLinkFileError * _Nonnull` object on failure.
/// 
- (DbxDownloadURLTask<DbxSharingSharedLinkMetadata *, DbxSharingGetSharedLinkFileError *> * _Nonnull)getSharedLinkFileURL:(NSString * _Nonnull)url overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination;

/// 
/// Download the shared link's file from a user's Dropbox.
/// 
/// - parameter url: URL of the shared link.
/// - parameter path: If the shared link is to a folder, this parameter can be used to retrieve the metadata for a
/// specific file or sub-folder in this folder. A relative path should be used.
/// - parameter linkPassword: If the shared link has a password, this parameter can be used.
/// - parameter overwrite: A boolean to set behavior in the event of a naming conflict. `True` will overwrite
/// conflicting file at destination. `False` will take no action (but if left unhandled in destination closure, an
/// NSError will be thrown).
/// - parameter destination: A closure used to compute the destination, given the temporary file location and the
/// response.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedLinkMetadata * _Nonnull` object
/// on success or a `DbxSharingGetSharedLinkFileError * _Nonnull` object on failure.
/// 
- (DbxDownloadURLTask<DbxSharingSharedLinkMetadata *, DbxSharingGetSharedLinkFileError *> * _Nonnull)getSharedLinkFileURL:(NSString * _Nonnull)url path:(NSString * _Nullable)path linkPassword:(NSString * _Nullable)linkPassword overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination;

/// 
/// Download the shared link's file from a user's Dropbox.
/// 
/// - parameter url: URL of the shared link.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedLinkMetadata * _Nonnull` object
/// on success or a `DbxSharingGetSharedLinkFileError * _Nonnull` object on failure.
/// 
- (DbxDownloadDataTask<DbxSharingSharedLinkMetadata *, DbxSharingGetSharedLinkFileError *> * _Nonnull)getSharedLinkFileData:(NSString * _Nonnull)url;

/// 
/// Download the shared link's file from a user's Dropbox.
/// 
/// - parameter url: URL of the shared link.
/// - parameter path: If the shared link is to a folder, this parameter can be used to retrieve the metadata for a
/// specific file or sub-folder in this folder. A relative path should be used.
/// - parameter linkPassword: If the shared link has a password, this parameter can be used.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedLinkMetadata * _Nonnull` object
/// on success or a `DbxSharingGetSharedLinkFileError * _Nonnull` object on failure.
/// 
- (DbxDownloadDataTask<DbxSharingSharedLinkMetadata *, DbxSharingGetSharedLinkFileError *> * _Nonnull)getSharedLinkFileData:(NSString * _Nonnull)url path:(NSString * _Nullable)path linkPassword:(NSString * _Nullable)linkPassword;

/// 
/// Get the shared link's metadata.
/// 
/// - parameter url: URL of the shared link.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedLinkMetadata * _Nonnull` object
/// on success or a `DbxSharingSharedLinkError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedLinkMetadata *, DbxSharingSharedLinkError *> * _Nonnull)getSharedLinkMetadata:(NSString * _Nonnull)url;

/// 
/// Get the shared link's metadata.
/// 
/// - parameter url: URL of the shared link.
/// - parameter path: If the shared link is to a folder, this parameter can be used to retrieve the metadata for a
/// specific file or sub-folder in this folder. A relative path should be used.
/// - parameter linkPassword: If the shared link has a password, this parameter can be used.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedLinkMetadata * _Nonnull` object
/// on success or a `DbxSharingSharedLinkError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedLinkMetadata *, DbxSharingSharedLinkError *> * _Nonnull)getSharedLinkMetadata:(NSString * _Nonnull)url path:(NSString * _Nullable)path linkPassword:(NSString * _Nullable)linkPassword;

/// 
/// DEPRECATED: Returns a list of LinkMetadata objects for this user, including collection links. If no path is given or
/// the path is empty, returns a list of all shared links for the current user, including collection links. If a
/// non-empty path is given, returns a list of all shared links that allow access to the given path.  Collection links
/// are never returned in this case. Note that the url field in the response is never the shortened URL.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingGetSharedLinksResult * _Nonnull`
/// object on success or a `DbxSharingGetSharedLinksError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingGetSharedLinksResult *, DbxSharingGetSharedLinksError *> * _Nonnull)getSharedLinks __deprecated_msg("get_shared_links is deprecated. Use list_shared_links.");

/// 
/// DEPRECATED: Returns a list of LinkMetadata objects for this user, including collection links. If no path is given or
/// the path is empty, returns a list of all shared links for the current user, including collection links. If a
/// non-empty path is given, returns a list of all shared links that allow access to the given path.  Collection links
/// are never returned in this case. Note that the url field in the response is never the shortened URL.
/// 
/// - parameter path: See getSharedLinks description.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingGetSharedLinksResult * _Nonnull`
/// object on success or a `DbxSharingGetSharedLinksError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingGetSharedLinksResult *, DbxSharingGetSharedLinksError *> * _Nonnull)getSharedLinks:(NSString * _Nullable)path __deprecated_msg("get_shared_links is deprecated. Use list_shared_links.");

/// 
/// Use to obtain the members who have been invited to a file, both inherited and uninherited members.
/// 
/// - parameter file: The file for which you want to see members.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFileMembers * _Nonnull` object
/// on success or a `DbxSharingListFileMembersError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFileMembers *, DbxSharingListFileMembersError *> * _Nonnull)listFileMembers:(NSString * _Nonnull)file;

/// 
/// Use to obtain the members who have been invited to a file, both inherited and uninherited members.
/// 
/// - parameter file: The file for which you want to see members.
/// - parameter actions: The actions for which to return permissions on a member
/// - parameter includeInherited: Whether to include members who only have access from a parent shared folder.
/// - parameter limit: Number of members to return max per query. Defaults to 100 if no limit is specified.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFileMembers * _Nonnull` object
/// on success or a `DbxSharingListFileMembersError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFileMembers *, DbxSharingListFileMembersError *> * _Nonnull)listFileMembers:(NSString * _Nonnull)file actions:(NSArray<DbxSharingMemberAction *> * _Nullable)actions includeInherited:(NSNumber * _Nullable)includeInherited limit:(NSNumber * _Nullable)limit;

/// 
/// Get members of multiple files at once. The arguments to this route are more limited, and the limit on query result
/// size per file is more strict. To customize the results more, use the individual file endpoint. Inherited users are
/// not included in the result, and permissions are not returned for this endpoint.
/// 
/// - parameter files: Files for which to return members.
/// 
/// - returns: Through the response callback, the caller will receive a `NSArray<DbxSharingListFileMembersBatchResult *>
/// * _Nonnull` object on success or a `DbxSharingSharingUserError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<NSArray<DbxSharingListFileMembersBatchResult *> *, DbxSharingSharingUserError *> * _Nonnull)listFileMembersBatch:(NSArray<NSString *> * _Nonnull)files;

/// 
/// Get members of multiple files at once. The arguments to this route are more limited, and the limit on query result
/// size per file is more strict. To customize the results more, use the individual file endpoint. Inherited users are
/// not included in the result, and permissions are not returned for this endpoint.
/// 
/// - parameter files: Files for which to return members.
/// - parameter limit: Number of members to return max per query. Defaults to 10 if no limit is specified.
/// 
/// - returns: Through the response callback, the caller will receive a `NSArray<DbxSharingListFileMembersBatchResult *>
/// * _Nonnull` object on success or a `DbxSharingSharingUserError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<NSArray<DbxSharingListFileMembersBatchResult *> *, DbxSharingSharingUserError *> * _Nonnull)listFileMembersBatch:(NSArray<NSString *> * _Nonnull)files limit:(NSNumber * _Nullable)limit;

/// 
/// Once a cursor has been retrieved from listFileMembers or listFileMembersBatch, use this to paginate through all
/// shared file members.
/// 
/// - parameter cursor: The cursor returned by your last call to listFileMembers, listFileMembersContinue, or
/// listFileMembersBatch.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFileMembers * _Nonnull` object
/// on success or a `DbxSharingListFileMembersContinueError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFileMembers *, DbxSharingListFileMembersContinueError *> * _Nonnull)listFileMembersContinue:(NSString * _Nonnull)cursor;

/// 
/// Returns shared folder membership by its folder ID. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFolderMembers * _Nonnull`
/// object on success or a `DbxSharingSharedFolderAccessError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFolderMembers *, DbxSharingSharedFolderAccessError *> * _Nonnull)listFolderMembers:(NSString * _Nonnull)sharedFolderId;

/// 
/// Returns shared folder membership by its folder ID. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFolderMembers * _Nonnull`
/// object on success or a `DbxSharingSharedFolderAccessError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFolderMembers *, DbxSharingSharedFolderAccessError *> * _Nonnull)listFolderMembers:(NSString * _Nonnull)sharedFolderId actions:(NSArray<DbxSharingMemberAction *> * _Nullable)actions limit:(NSNumber * _Nullable)limit;

/// 
/// Once a cursor has been retrieved from listFolderMembers, use this to paginate through all shared folder members.
/// Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter cursor: The cursor returned by your last call to listFolderMembers or listFolderMembersContinue.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFolderMembers * _Nonnull`
/// object on success or a `DbxSharingListFolderMembersContinueError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFolderMembers *, DbxSharingListFolderMembersContinueError *> * _Nonnull)listFolderMembersContinue:(NSString * _Nonnull)cursor;

/// 
/// Return the list of all shared folders the current user has access to. Apps must have full Dropbox access to use this
/// endpoint.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingListFoldersResult * _Nonnull` object
/// on success or a `void` object on failure.
/// 
- (DbxRpcTask<DbxSharingListFoldersResult *, DbxNilObject *> * _Nonnull)listFolders;

/// 
/// Return the list of all shared folders the current user has access to. Apps must have full Dropbox access to use this
/// endpoint.
/// 
/// - parameter limit: The maximum number of results to return per request.
/// - parameter actions: This is a list indicating whether each returned folder data entry will include a boolean field
/// allow in FolderPermission that describes whether the current user can perform the `FolderAction` on the folder.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingListFoldersResult * _Nonnull` object
/// on success or a `void` object on failure.
/// 
- (DbxRpcTask<DbxSharingListFoldersResult *, DbxNilObject *> * _Nonnull)listFolders:(NSNumber * _Nullable)limit actions:(NSArray<DbxSharingFolderAction *> * _Nullable)actions;

/// 
/// Once a cursor has been retrieved from listFolders, use this to paginate through all shared folders. The cursor must
/// come from a previous call to listFolders or listFoldersContinue. Apps must have full Dropbox access to use this
/// endpoint.
/// 
/// - parameter cursor: The cursor returned by the previous API call specified in the endpoint description.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingListFoldersResult * _Nonnull` object
/// on success or a `DbxSharingListFoldersContinueError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingListFoldersResult *, DbxSharingListFoldersContinueError *> * _Nonnull)listFoldersContinue:(NSString * _Nonnull)cursor;

/// 
/// Return the list of all shared folders the current user can mount or unmount. Apps must have full Dropbox access to
/// use this endpoint.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingListFoldersResult * _Nonnull` object
/// on success or a `void` object on failure.
/// 
- (DbxRpcTask<DbxSharingListFoldersResult *, DbxNilObject *> * _Nonnull)listMountableFolders;

/// 
/// Return the list of all shared folders the current user can mount or unmount. Apps must have full Dropbox access to
/// use this endpoint.
/// 
/// - parameter limit: The maximum number of results to return per request.
/// - parameter actions: This is a list indicating whether each returned folder data entry will include a boolean field
/// allow in FolderPermission that describes whether the current user can perform the `FolderAction` on the folder.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingListFoldersResult * _Nonnull` object
/// on success or a `void` object on failure.
/// 
- (DbxRpcTask<DbxSharingListFoldersResult *, DbxNilObject *> * _Nonnull)listMountableFolders:(NSNumber * _Nullable)limit actions:(NSArray<DbxSharingFolderAction *> * _Nullable)actions;

/// 
/// Once a cursor has been retrieved from listMountableFolders, use this to paginate through all mountable shared
/// folders. The cursor must come from a previous call to listMountableFolders or listMountableFoldersContinue. Apps
/// must have full Dropbox access to use this endpoint.
/// 
/// - parameter cursor: The cursor returned by the previous API call specified in the endpoint description.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingListFoldersResult * _Nonnull` object
/// on success or a `DbxSharingListFoldersContinueError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingListFoldersResult *, DbxSharingListFoldersContinueError *> * _Nonnull)listMountableFoldersContinue:(NSString * _Nonnull)cursor;

/// 
/// Returns a list of all files shared with current user.  Does not include files the user has received via shared
/// folders, and does  not include unclaimed invitations.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingListFilesResult * _Nonnull` object on
/// success or a `DbxSharingSharingUserError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingListFilesResult *, DbxSharingSharingUserError *> * _Nonnull)listReceivedFiles;

/// 
/// Returns a list of all files shared with current user.  Does not include files the user has received via shared
/// folders, and does  not include unclaimed invitations.
/// 
/// - parameter limit: Number of files to return max per query. Defaults to 100 if no limit is specified.
/// - parameter actions: File actions to query.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingListFilesResult * _Nonnull` object on
/// success or a `DbxSharingSharingUserError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingListFilesResult *, DbxSharingSharingUserError *> * _Nonnull)listReceivedFiles:(NSNumber * _Nullable)limit actions:(NSArray<DbxSharingFileAction *> * _Nullable)actions;

/// 
/// Get more results with a cursor from listReceivedFiles.
/// 
/// - parameter cursor: Cursor in cursor in ListFilesResult
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingListFilesResult * _Nonnull` object on
/// success or a `DbxSharingListFilesContinueError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingListFilesResult *, DbxSharingListFilesContinueError *> * _Nonnull)listReceivedFilesContinue:(NSString * _Nonnull)cursor;

/// 
/// List shared links of this user. If no path is given or the path is empty, returns a list of all shared links for the
/// current user. If a non-empty path is given, returns a list of all shared links that allow access to the given path -
/// direct links to the given path and links to parent folders of the given path. Links to parent folders can be
/// suppressed by setting direct_only to true.
/// 
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingListSharedLinksResult * _Nonnull`
/// object on success or a `DbxSharingListSharedLinksError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingListSharedLinksResult *, DbxSharingListSharedLinksError *> * _Nonnull)listSharedLinks;

/// 
/// List shared links of this user. If no path is given or the path is empty, returns a list of all shared links for the
/// current user. If a non-empty path is given, returns a list of all shared links that allow access to the given path -
/// direct links to the given path and links to parent folders of the given path. Links to parent folders can be
/// suppressed by setting direct_only to true.
/// 
/// - parameter path: See listSharedLinks description.
/// - parameter cursor: The cursor returned by your last call to listSharedLinks.
/// - parameter directOnly: See listSharedLinks description.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingListSharedLinksResult * _Nonnull`
/// object on success or a `DbxSharingListSharedLinksError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingListSharedLinksResult *, DbxSharingListSharedLinksError *> * _Nonnull)listSharedLinks:(NSString * _Nullable)path cursor:(NSString * _Nullable)cursor directOnly:(NSNumber * _Nullable)directOnly;

/// 
/// Modify the shared link's settings. If the requested visibility conflict with the shared links policy of the team or
/// the shared folder (in case the linked file is part of a shared folder) then the resolvedVisibility in
/// LinkPermissions of the returned SharedLinkMetadata will reflect the actual visibility of the shared link and the
/// requestedVisibility in LinkPermissions will reflect the requested visibility.
/// 
/// - parameter url: URL of the shared link to change its settings
/// - parameter settings: Set of settings for the shared link.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedLinkMetadata * _Nonnull` object
/// on success or a `DbxSharingModifySharedLinkSettingsError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedLinkMetadata *, DbxSharingModifySharedLinkSettingsError *> * _Nonnull)modifySharedLinkSettings:(NSString * _Nonnull)url settings:(DbxSharingSharedLinkSettings * _Nonnull)settings;

/// 
/// Modify the shared link's settings. If the requested visibility conflict with the shared links policy of the team or
/// the shared folder (in case the linked file is part of a shared folder) then the resolvedVisibility in
/// LinkPermissions of the returned SharedLinkMetadata will reflect the actual visibility of the shared link and the
/// requestedVisibility in LinkPermissions will reflect the requested visibility.
/// 
/// - parameter url: URL of the shared link to change its settings
/// - parameter settings: Set of settings for the shared link.
/// - parameter removeExpiration: If set to true, removes the expiration of the shared link.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedLinkMetadata * _Nonnull` object
/// on success or a `DbxSharingModifySharedLinkSettingsError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedLinkMetadata *, DbxSharingModifySharedLinkSettingsError *> * _Nonnull)modifySharedLinkSettings:(NSString * _Nonnull)url settings:(DbxSharingSharedLinkSettings * _Nonnull)settings removeExpiration:(NSNumber * _Nullable)removeExpiration;

/// 
/// The current user mounts the designated folder. Mount a shared folder for a user after they have been added as a
/// member. Once mounted, the shared folder will appear in their Dropbox. Apps must have full Dropbox access to use this
/// endpoint.
/// 
/// - parameter sharedFolderId: The ID of the shared folder to mount.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFolderMetadata * _Nonnull`
/// object on success or a `DbxSharingMountFolderError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFolderMetadata *, DbxSharingMountFolderError *> * _Nonnull)mountFolder:(NSString * _Nonnull)sharedFolderId;

/// 
/// The current user relinquishes their membership in the designated file. Note that the current user may still have
/// inherited access to this file through the parent folder. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter file: The path or id for the file.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DbxSharingRelinquishFileMembershipError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxNilObject *, DbxSharingRelinquishFileMembershipError *> * _Nonnull)relinquishFileMembership:(NSString * _Nonnull)file;

/// 
/// The current user relinquishes their membership in the designated shared folder and will no longer have access to the
/// folder.  A folder owner cannot relinquish membership in their own folder. This will run synchronously if
/// leave_a_copy is false, and asynchronously if leave_a_copy is true. Apps must have full Dropbox access to use this
/// endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxAsyncLaunchEmptyResult * _Nonnull` object on
/// success or a `DbxSharingRelinquishFolderMembershipError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxAsyncLaunchEmptyResult *, DbxSharingRelinquishFolderMembershipError *> * _Nonnull)relinquishFolderMembership:(NSString * _Nonnull)sharedFolderId;

/// 
/// The current user relinquishes their membership in the designated shared folder and will no longer have access to the
/// folder.  A folder owner cannot relinquish membership in their own folder. This will run synchronously if
/// leave_a_copy is false, and asynchronously if leave_a_copy is true. Apps must have full Dropbox access to use this
/// endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// - parameter leaveACopy: Keep a copy of the folder's contents upon relinquishing membership.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxAsyncLaunchEmptyResult * _Nonnull` object on
/// success or a `DbxSharingRelinquishFolderMembershipError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxAsyncLaunchEmptyResult *, DbxSharingRelinquishFolderMembershipError *> * _Nonnull)relinquishFolderMembership:(NSString * _Nonnull)sharedFolderId leaveACopy:(NSNumber * _Nullable)leaveACopy;

/// 
/// DEPRECATED: Identical to remove_file_member_2 but with less information returned.
/// 
/// - parameter file: File from which to remove members.
/// - parameter member: Member to remove from this file. Note that even if an email is specified, it may result in the
/// removal of a user (not an invitee) if the user's main account corresponds to that email address.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingFileMemberActionIndividualResult *
/// _Nonnull` object on success or a `DbxSharingRemoveFileMemberError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingFileMemberActionIndividualResult *, DbxSharingRemoveFileMemberError *> * _Nonnull)removeFileMember:(NSString * _Nonnull)file member:(DbxSharingMemberSelector * _Nonnull)member __deprecated_msg("remove_file_member is deprecated. Use remove_file_member_2.");

/// 
/// Removes a specified member from the file.
/// 
/// - parameter file: File from which to remove members.
/// - parameter member: Member to remove from this file. Note that even if an email is specified, it may result in the
/// removal of a user (not an invitee) if the user's main account corresponds to that email address.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingFileMemberRemoveActionResult *
/// _Nonnull` object on success or a `DbxSharingRemoveFileMemberError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingFileMemberRemoveActionResult *, DbxSharingRemoveFileMemberError *> * _Nonnull)removeFileMember2:(NSString * _Nonnull)file member:(DbxSharingMemberSelector * _Nonnull)member;

/// 
/// Allows an owner or editor (if the ACL update policy allows) of a shared folder to remove another member. Apps must
/// have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// - parameter member: The member to remove from the folder.
/// - parameter leaveACopy: If true, the removed user will keep their copy of the folder after it's unshared, assuming
/// it was mounted. Otherwise, it will be removed from their Dropbox. Also, this must be set to false when kicking a
/// group.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxAsyncLaunchResultBase * _Nonnull` object on
/// success or a `DbxSharingRemoveFolderMemberError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxAsyncLaunchResultBase *, DbxSharingRemoveFolderMemberError *> * _Nonnull)removeFolderMember:(NSString * _Nonnull)sharedFolderId member:(DbxSharingMemberSelector * _Nonnull)member leaveACopy:(NSNumber * _Nonnull)leaveACopy;

/// 
/// Revoke a shared link. Note that even after revoking a shared link to a file, the file may be accessible if there are
/// shared links leading to any of the file parent folders. To list all shared links that enable access to a specific
/// file, you can use the listSharedLinks with the file as the path in ListSharedLinksArg argument.
/// 
/// - parameter url: URL of the shared link.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DbxSharingRevokeSharedLinkError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxNilObject *, DbxSharingRevokeSharedLinkError *> * _Nonnull)revokeSharedLink:(NSString * _Nonnull)url;

/// 
/// Share a folder with collaborators. Most sharing will be completed synchronously. Large folders will be completed
/// asynchronously. To make testing the async case repeatable, set `ShareFolderArg.force_async`. If a asyncJobId in
/// ShareFolderLaunch is returned, you'll need to call checkShareJobStatus until the action completes to get the
/// metadata for the folder. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter path: The path to the folder to share. If it does not exist, then a new one is created.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingShareFolderLaunch * _Nonnull` object
/// on success or a `DbxSharingShareFolderError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingShareFolderLaunch *, DbxSharingShareFolderError *> * _Nonnull)shareFolder:(NSString * _Nonnull)path;

/// 
/// Share a folder with collaborators. Most sharing will be completed synchronously. Large folders will be completed
/// asynchronously. To make testing the async case repeatable, set `ShareFolderArg.force_async`. If a asyncJobId in
/// ShareFolderLaunch is returned, you'll need to call checkShareJobStatus until the action completes to get the
/// metadata for the folder. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter path: The path to the folder to share. If it does not exist, then a new one is created.
/// - parameter memberPolicy: Who can be a member of this shared folder. Only applicable if the current user is on a
/// team.
/// - parameter aclUpdatePolicy: Who can add and remove members of this shared folder.
/// - parameter sharedLinkPolicy: The policy to apply to shared links created for content inside this shared folder.
/// The current user must be on a team to set this policy to members in SharedLinkPolicy.
/// - parameter forceAsync: Whether to force the share to happen asynchronously.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingShareFolderLaunch * _Nonnull` object
/// on success or a `DbxSharingShareFolderError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingShareFolderLaunch *, DbxSharingShareFolderError *> * _Nonnull)shareFolder:(NSString * _Nonnull)path memberPolicy:(DbxSharingMemberPolicy * _Nullable)memberPolicy aclUpdatePolicy:(DbxSharingAclUpdatePolicy * _Nullable)aclUpdatePolicy sharedLinkPolicy:(DbxSharingSharedLinkPolicy * _Nullable)sharedLinkPolicy forceAsync:(NSNumber * _Nullable)forceAsync;

/// 
/// Transfer ownership of a shared folder to a member of the shared folder. User must have owner in AccessLevel access
/// to the shared folder to perform a transfer. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// - parameter toDropboxId: A account or team member ID to transfer ownership to.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DbxSharingTransferFolderError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxNilObject *, DbxSharingTransferFolderError *> * _Nonnull)transferFolder:(NSString * _Nonnull)sharedFolderId toDropboxId:(NSString * _Nonnull)toDropboxId;

/// 
/// The current user unmounts the designated folder. They can re-mount the folder at a later time using mountFolder.
/// Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DbxSharingUnmountFolderError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxNilObject *, DbxSharingUnmountFolderError *> * _Nonnull)unmountFolder:(NSString * _Nonnull)sharedFolderId;

/// 
/// Remove all members from this file. Does not remove inherited members.
/// 
/// - parameter file: The file to unshare.
/// 
/// - returns: Through the response callback, the caller will receive a `void` object on success or a
/// `DbxSharingUnshareFileError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxNilObject *, DbxSharingUnshareFileError *> * _Nonnull)unshareFile:(NSString * _Nonnull)file;

/// 
/// Allows a shared folder owner to unshare the folder. You'll need to call checkJobStatus to determine if the action
/// has completed successfully. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxAsyncLaunchEmptyResult * _Nonnull` object on
/// success or a `DbxSharingUnshareFolderError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxAsyncLaunchEmptyResult *, DbxSharingUnshareFolderError *> * _Nonnull)unshareFolder:(NSString * _Nonnull)sharedFolderId;

/// 
/// Allows a shared folder owner to unshare the folder. You'll need to call checkJobStatus to determine if the action
/// has completed successfully. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// - parameter leaveACopy: If true, members of this shared folder will get a copy of this folder after it's unshared.
/// Otherwise, it will be removed from their Dropbox. The current user, who is an owner, will always retain their copy.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxAsyncLaunchEmptyResult * _Nonnull` object on
/// success or a `DbxSharingUnshareFolderError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxAsyncLaunchEmptyResult *, DbxSharingUnshareFolderError *> * _Nonnull)unshareFolder:(NSString * _Nonnull)sharedFolderId leaveACopy:(NSNumber * _Nullable)leaveACopy;

/// 
/// Allows an owner or editor of a shared folder to update another member's permissions. Apps must have full Dropbox
/// access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// - parameter member: The member of the shared folder to update.  Only the dropboxId in MemberSelector may be set at
/// this time.
/// - parameter accessLevel: The new access level for member. owner in AccessLevel is disallowed.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingMemberAccessLevelResult * _Nonnull`
/// object on success or a `DbxSharingUpdateFolderMemberError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingMemberAccessLevelResult *, DbxSharingUpdateFolderMemberError *> * _Nonnull)updateFolderMember:(NSString * _Nonnull)sharedFolderId member:(DbxSharingMemberSelector * _Nonnull)member accessLevel:(DbxSharingAccessLevel * _Nonnull)accessLevel;

/// 
/// Update the sharing policies for a shared folder. User must have owner in AccessLevel access to the shared folder to
/// update its policies. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFolderMetadata * _Nonnull`
/// object on success or a `DbxSharingUpdateFolderPolicyError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFolderMetadata *, DbxSharingUpdateFolderPolicyError *> * _Nonnull)updateFolderPolicy:(NSString * _Nonnull)sharedFolderId;

/// 
/// Update the sharing policies for a shared folder. User must have owner in AccessLevel access to the shared folder to
/// update its policies. Apps must have full Dropbox access to use this endpoint.
/// 
/// - parameter sharedFolderId: The ID for the shared folder.
/// - parameter memberPolicy: Who can be a member of this shared folder. Only applicable if the current user is on a
/// team.
/// - parameter aclUpdatePolicy: Who can add and remove members of this shared folder.
/// - parameter sharedLinkPolicy: The policy to apply to shared links created for content inside this shared folder. The
/// current user must be on a team to set this policy to members in SharedLinkPolicy.
/// 
/// - returns: Through the response callback, the caller will receive a `DbxSharingSharedFolderMetadata * _Nonnull`
/// object on success or a `DbxSharingUpdateFolderPolicyError * _Nonnull` object on failure.
/// 
- (DbxRpcTask<DbxSharingSharedFolderMetadata *, DbxSharingUpdateFolderPolicyError *> * _Nonnull)updateFolderPolicy:(NSString * _Nonnull)sharedFolderId memberPolicy:(DbxSharingMemberPolicy * _Nullable)memberPolicy aclUpdatePolicy:(DbxSharingAclUpdatePolicy * _Nullable)aclUpdatePolicy sharedLinkPolicy:(DbxSharingSharedLinkPolicy * _Nullable)sharedLinkPolicy;

@property (nonatomic) DropboxTransportClient * _Nonnull client;

@end
