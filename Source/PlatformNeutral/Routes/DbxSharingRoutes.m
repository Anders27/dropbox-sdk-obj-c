///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingRoutes.h"

@implementation DbxSharingRoutes 

- (instancetype)init:(DropboxTransportClient *)client {
    self = [super init];
    if (self != nil) {
        _client = client;
    }
    return self;
}
- (DbxRpcTask *)addFileMember:(NSString *)file members:(NSArray<DbxSharingMemberSelector *> *)members {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingAddFileMember;
    DbxSharingAddFileMemberArgs *arg = [[DbxSharingAddFileMemberArgs alloc] initWithFile:(NSString *)file members:(NSArray<DbxSharingMemberSelector *> *)members];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)addFileMember:(NSString * _Nonnull)file members:(NSArray<DbxSharingMemberSelector *> * _Nonnull)members customMessage:(NSString * _Nullable)customMessage quiet:(NSNumber * _Nullable)quiet accessLevel:(DbxSharingAccessLevel * _Nullable)accessLevel addMessageAsComment:(NSNumber * _Nullable)addMessageAsComment {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingAddFileMember;
    DbxSharingAddFileMemberArgs *arg = [[DbxSharingAddFileMemberArgs alloc] initWithFile:(NSString * _Nonnull)file members:(NSArray<DbxSharingMemberSelector *> * _Nonnull)members customMessage:(NSString * _Nullable)customMessage quiet:(NSNumber * _Nullable)quiet accessLevel:(DbxSharingAccessLevel * _Nullable)accessLevel addMessageAsComment:(NSNumber * _Nullable)addMessageAsComment];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)addFolderMember:(NSString *)sharedFolderId members:(NSArray<DbxSharingAddMember *> *)members {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingAddFolderMember;
    DbxSharingAddFolderMemberArg *arg = [[DbxSharingAddFolderMemberArg alloc] initWithSharedFolderId:(NSString *)sharedFolderId members:(NSArray<DbxSharingAddMember *> *)members];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)addFolderMember:(NSString * _Nonnull)sharedFolderId members:(NSArray<DbxSharingAddMember *> * _Nonnull)members quiet:(NSNumber * _Nullable)quiet customMessage:(NSString * _Nullable)customMessage {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingAddFolderMember;
    DbxSharingAddFolderMemberArg *arg = [[DbxSharingAddFolderMemberArg alloc] initWithSharedFolderId:(NSString * _Nonnull)sharedFolderId members:(NSArray<DbxSharingAddMember *> * _Nonnull)members quiet:(NSNumber * _Nullable)quiet customMessage:(NSString * _Nullable)customMessage];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)changeFileMemberAccess:(NSString * _Nonnull)file member:(DbxSharingMemberSelector * _Nonnull)member accessLevel:(DbxSharingAccessLevel * _Nonnull)accessLevel {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingChangeFileMemberAccess;
    DbxSharingChangeFileMemberAccessArgs *arg = [[DbxSharingChangeFileMemberAccessArgs alloc] initWithFile:(NSString * _Nonnull)file member:(DbxSharingMemberSelector * _Nonnull)member accessLevel:(DbxSharingAccessLevel * _Nonnull)accessLevel];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)checkJobStatus:(NSString * _Nonnull)asyncJobId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCheckJobStatus;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:(NSString * _Nonnull)asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)checkRemoveMemberJobStatus:(NSString * _Nonnull)asyncJobId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCheckRemoveMemberJobStatus;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:(NSString * _Nonnull)asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)checkShareJobStatus:(NSString * _Nonnull)asyncJobId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCheckShareJobStatus;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:(NSString * _Nonnull)asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)createSharedLink:(NSString *)path {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCreateSharedLink;
    DbxSharingCreateSharedLinkArg *arg = [[DbxSharingCreateSharedLinkArg alloc] initWithPath:(NSString *)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)createSharedLink:(NSString * _Nonnull)path shortUrl:(NSNumber * _Nullable)shortUrl pendingUpload:(DbxSharingPendingUploadMode * _Nullable)pendingUpload {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCreateSharedLink;
    DbxSharingCreateSharedLinkArg *arg = [[DbxSharingCreateSharedLinkArg alloc] initWithPath:(NSString * _Nonnull)path shortUrl:(NSNumber * _Nullable)shortUrl pendingUpload:(DbxSharingPendingUploadMode * _Nullable)pendingUpload];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)createSharedLinkWithSettings:(NSString *)path {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCreateSharedLinkWithSettings;
    DbxSharingCreateSharedLinkWithSettingsArg *arg = [[DbxSharingCreateSharedLinkWithSettingsArg alloc] initWithPath:(NSString *)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)createSharedLinkWithSettings:(NSString * _Nonnull)path settings:(DbxSharingSharedLinkSettings * _Nullable)settings {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCreateSharedLinkWithSettings;
    DbxSharingCreateSharedLinkWithSettingsArg *arg = [[DbxSharingCreateSharedLinkWithSettingsArg alloc] initWithPath:(NSString * _Nonnull)path settings:(DbxSharingSharedLinkSettings * _Nullable)settings];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getFileMetadata:(NSString *)file {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetFileMetadata;
    DbxSharingGetFileMetadataArg *arg = [[DbxSharingGetFileMetadataArg alloc] initWithFile:(NSString *)file];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getFileMetadata:(NSString * _Nonnull)file actions:(NSArray<DbxSharingFileAction *> * _Nullable)actions {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetFileMetadata;
    DbxSharingGetFileMetadataArg *arg = [[DbxSharingGetFileMetadataArg alloc] initWithFile:(NSString * _Nonnull)file actions:(NSArray<DbxSharingFileAction *> * _Nullable)actions];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getFileMetadataBatch:(NSArray<NSString *> *)files {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetFileMetadataBatch;
    DbxSharingGetFileMetadataBatchArg *arg = [[DbxSharingGetFileMetadataBatchArg alloc] initWithFiles:(NSArray<NSString *> *)files];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getFileMetadataBatch:(NSArray<NSString *> * _Nonnull)files actions:(NSArray<DbxSharingFileAction *> * _Nullable)actions {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetFileMetadataBatch;
    DbxSharingGetFileMetadataBatchArg *arg = [[DbxSharingGetFileMetadataBatchArg alloc] initWithFiles:(NSArray<NSString *> * _Nonnull)files actions:(NSArray<DbxSharingFileAction *> * _Nullable)actions];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getFolderMetadata:(NSString *)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetFolderMetadata;
    DbxSharingGetMetadataArgs *arg = [[DbxSharingGetMetadataArgs alloc] initWithSharedFolderId:(NSString *)sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getFolderMetadata:(NSString * _Nonnull)sharedFolderId actions:(NSArray<DbxSharingFolderAction *> * _Nullable)actions {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetFolderMetadata;
    DbxSharingGetMetadataArgs *arg = [[DbxSharingGetMetadataArgs alloc] initWithSharedFolderId:(NSString * _Nonnull)sharedFolderId actions:(NSArray<DbxSharingFolderAction *> * _Nullable)actions];
    return [self.client requestRpc:route arg:arg];
}

- (DbxDownloadURLTask *)getSharedLinkFileURL:(NSString *)url overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinkFile;
    DbxSharingGetSharedLinkMetadataArg *arg = [[DbxSharingGetSharedLinkMetadataArg alloc] initWithUrl:(NSString *)url];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DbxDownloadURLTask *)getSharedLinkFileURL:(NSString * _Nonnull)url path:(NSString * _Nullable)path linkPassword:(NSString * _Nullable)linkPassword overwrite:(BOOL)overwrite destination:(NSURL * _Nonnull)destination {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinkFile;
    DbxSharingGetSharedLinkMetadataArg *arg = [[DbxSharingGetSharedLinkMetadataArg alloc] initWithUrl:(NSString * _Nonnull)url path:(NSString * _Nullable)path linkPassword:(NSString * _Nullable)linkPassword];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DbxDownloadDataTask *)getSharedLinkFileData:(NSString *)url {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinkFile;
    DbxSharingGetSharedLinkMetadataArg *arg = [[DbxSharingGetSharedLinkMetadataArg alloc] initWithUrl:(NSString *)url];
    return [self.client requestDownload:route arg:arg];
}

- (DbxDownloadDataTask *)getSharedLinkFileData:(NSString * _Nonnull)url path:(NSString * _Nullable)path linkPassword:(NSString * _Nullable)linkPassword {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinkFile;
    DbxSharingGetSharedLinkMetadataArg *arg = [[DbxSharingGetSharedLinkMetadataArg alloc] initWithUrl:(NSString * _Nonnull)url path:(NSString * _Nullable)path linkPassword:(NSString * _Nullable)linkPassword];
    return [self.client requestDownload:route arg:arg];
}

- (DbxRpcTask *)getSharedLinkMetadata:(NSString *)url {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinkMetadata;
    DbxSharingGetSharedLinkMetadataArg *arg = [[DbxSharingGetSharedLinkMetadataArg alloc] initWithUrl:(NSString *)url];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getSharedLinkMetadata:(NSString * _Nonnull)url path:(NSString * _Nullable)path linkPassword:(NSString * _Nullable)linkPassword {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinkMetadata;
    DbxSharingGetSharedLinkMetadataArg *arg = [[DbxSharingGetSharedLinkMetadataArg alloc] initWithUrl:(NSString * _Nonnull)url path:(NSString * _Nullable)path linkPassword:(NSString * _Nullable)linkPassword];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getSharedLinks {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinks;
    DbxSharingGetSharedLinksArg *arg = [[DbxSharingGetSharedLinksArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getSharedLinks:(NSString * _Nullable)path {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinks;
    DbxSharingGetSharedLinksArg *arg = [[DbxSharingGetSharedLinksArg alloc] initWithPath:(NSString * _Nullable)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFileMembers:(NSString *)file {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFileMembers;
    DbxSharingListFileMembersArg *arg = [[DbxSharingListFileMembersArg alloc] initWithFile:(NSString *)file];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFileMembers:(NSString * _Nonnull)file actions:(NSArray<DbxSharingMemberAction *> * _Nullable)actions includeInherited:(NSNumber * _Nullable)includeInherited limit:(NSNumber * _Nullable)limit {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFileMembers;
    DbxSharingListFileMembersArg *arg = [[DbxSharingListFileMembersArg alloc] initWithFile:(NSString * _Nonnull)file actions:(NSArray<DbxSharingMemberAction *> * _Nullable)actions includeInherited:(NSNumber * _Nullable)includeInherited limit:(NSNumber * _Nullable)limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFileMembersBatch:(NSArray<NSString *> *)files {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFileMembersBatch;
    DbxSharingListFileMembersBatchArg *arg = [[DbxSharingListFileMembersBatchArg alloc] initWithFiles:(NSArray<NSString *> *)files];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFileMembersBatch:(NSArray<NSString *> * _Nonnull)files limit:(NSNumber * _Nullable)limit {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFileMembersBatch;
    DbxSharingListFileMembersBatchArg *arg = [[DbxSharingListFileMembersBatchArg alloc] initWithFiles:(NSArray<NSString *> * _Nonnull)files limit:(NSNumber * _Nullable)limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFileMembersContinue:(NSString * _Nonnull)cursor {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFileMembersContinue;
    DbxSharingListFileMembersContinueArg *arg = [[DbxSharingListFileMembersContinueArg alloc] initWithCursor:(NSString * _Nonnull)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolderMembers:(NSString *)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFolderMembers;
    DbxSharingListFolderMembersArgs *arg = [[DbxSharingListFolderMembersArgs alloc] initWithSharedFolderId:(NSString *)sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolderMembers:(NSString * _Nonnull)sharedFolderId actions:(NSArray<DbxSharingMemberAction *> * _Nullable)actions limit:(NSNumber * _Nullable)limit {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFolderMembers;
    DbxSharingListFolderMembersArgs *arg = [[DbxSharingListFolderMembersArgs alloc] initWithSharedFolderId:(NSString * _Nonnull)sharedFolderId actions:(NSArray<DbxSharingMemberAction *> * _Nullable)actions limit:(NSNumber * _Nullable)limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolderMembersContinue:(NSString * _Nonnull)cursor {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFolderMembersContinue;
    DbxSharingListFolderMembersContinueArg *arg = [[DbxSharingListFolderMembersContinueArg alloc] initWithCursor:(NSString * _Nonnull)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolders {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFolders;
    DbxSharingListFoldersArgs *arg = [[DbxSharingListFoldersArgs alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolders:(NSNumber * _Nullable)limit actions:(NSArray<DbxSharingFolderAction *> * _Nullable)actions {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFolders;
    DbxSharingListFoldersArgs *arg = [[DbxSharingListFoldersArgs alloc] initWithLimit:(NSNumber * _Nullable)limit actions:(NSArray<DbxSharingFolderAction *> * _Nullable)actions];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFoldersContinue:(NSString * _Nonnull)cursor {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFoldersContinue;
    DbxSharingListFoldersContinueArg *arg = [[DbxSharingListFoldersContinueArg alloc] initWithCursor:(NSString * _Nonnull)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listMountableFolders {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListMountableFolders;
    DbxSharingListFoldersArgs *arg = [[DbxSharingListFoldersArgs alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listMountableFolders:(NSNumber * _Nullable)limit actions:(NSArray<DbxSharingFolderAction *> * _Nullable)actions {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListMountableFolders;
    DbxSharingListFoldersArgs *arg = [[DbxSharingListFoldersArgs alloc] initWithLimit:(NSNumber * _Nullable)limit actions:(NSArray<DbxSharingFolderAction *> * _Nullable)actions];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listMountableFoldersContinue:(NSString * _Nonnull)cursor {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListMountableFoldersContinue;
    DbxSharingListFoldersContinueArg *arg = [[DbxSharingListFoldersContinueArg alloc] initWithCursor:(NSString * _Nonnull)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listReceivedFiles {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListReceivedFiles;
    DbxSharingListFilesArg *arg = [[DbxSharingListFilesArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listReceivedFiles:(NSNumber * _Nullable)limit actions:(NSArray<DbxSharingFileAction *> * _Nullable)actions {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListReceivedFiles;
    DbxSharingListFilesArg *arg = [[DbxSharingListFilesArg alloc] initWithLimit:(NSNumber * _Nullable)limit actions:(NSArray<DbxSharingFileAction *> * _Nullable)actions];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listReceivedFilesContinue:(NSString * _Nonnull)cursor {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListReceivedFilesContinue;
    DbxSharingListFilesContinueArg *arg = [[DbxSharingListFilesContinueArg alloc] initWithCursor:(NSString * _Nonnull)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listSharedLinks {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListSharedLinks;
    DbxSharingListSharedLinksArg *arg = [[DbxSharingListSharedLinksArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listSharedLinks:(NSString * _Nullable)path cursor:(NSString * _Nullable)cursor directOnly:(NSNumber * _Nullable)directOnly {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListSharedLinks;
    DbxSharingListSharedLinksArg *arg = [[DbxSharingListSharedLinksArg alloc] initWithPath:(NSString * _Nullable)path cursor:(NSString * _Nullable)cursor directOnly:(NSNumber * _Nullable)directOnly];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)modifySharedLinkSettings:(NSString *)url settings:(DbxSharingSharedLinkSettings *)settings {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingModifySharedLinkSettings;
    DbxSharingModifySharedLinkSettingsArgs *arg = [[DbxSharingModifySharedLinkSettingsArgs alloc] initWithUrl:(NSString *)url settings:(DbxSharingSharedLinkSettings *)settings];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)modifySharedLinkSettings:(NSString * _Nonnull)url settings:(DbxSharingSharedLinkSettings * _Nonnull)settings removeExpiration:(NSNumber * _Nullable)removeExpiration {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingModifySharedLinkSettings;
    DbxSharingModifySharedLinkSettingsArgs *arg = [[DbxSharingModifySharedLinkSettingsArgs alloc] initWithUrl:(NSString * _Nonnull)url settings:(DbxSharingSharedLinkSettings * _Nonnull)settings removeExpiration:(NSNumber * _Nullable)removeExpiration];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)mountFolder:(NSString * _Nonnull)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingMountFolder;
    DbxSharingMountFolderArg *arg = [[DbxSharingMountFolderArg alloc] initWithSharedFolderId:(NSString * _Nonnull)sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)relinquishFileMembership:(NSString * _Nonnull)file {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRelinquishFileMembership;
    DbxSharingRelinquishFileMembershipArg *arg = [[DbxSharingRelinquishFileMembershipArg alloc] initWithFile:(NSString * _Nonnull)file];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)relinquishFolderMembership:(NSString *)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRelinquishFolderMembership;
    DbxSharingRelinquishFolderMembershipArg *arg = [[DbxSharingRelinquishFolderMembershipArg alloc] initWithSharedFolderId:(NSString *)sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)relinquishFolderMembership:(NSString * _Nonnull)sharedFolderId leaveACopy:(NSNumber * _Nullable)leaveACopy {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRelinquishFolderMembership;
    DbxSharingRelinquishFolderMembershipArg *arg = [[DbxSharingRelinquishFolderMembershipArg alloc] initWithSharedFolderId:(NSString * _Nonnull)sharedFolderId leaveACopy:(NSNumber * _Nullable)leaveACopy];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)removeFileMember:(NSString * _Nonnull)file member:(DbxSharingMemberSelector * _Nonnull)member {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRemoveFileMember;
    DbxSharingRemoveFileMemberArg *arg = [[DbxSharingRemoveFileMemberArg alloc] initWithFile:(NSString * _Nonnull)file member:(DbxSharingMemberSelector * _Nonnull)member];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)removeFileMember2:(NSString * _Nonnull)file member:(DbxSharingMemberSelector * _Nonnull)member {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRemoveFileMember2;
    DbxSharingRemoveFileMemberArg *arg = [[DbxSharingRemoveFileMemberArg alloc] initWithFile:(NSString * _Nonnull)file member:(DbxSharingMemberSelector * _Nonnull)member];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)removeFolderMember:(NSString * _Nonnull)sharedFolderId member:(DbxSharingMemberSelector * _Nonnull)member leaveACopy:(NSNumber * _Nonnull)leaveACopy {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRemoveFolderMember;
    DbxSharingRemoveFolderMemberArg *arg = [[DbxSharingRemoveFolderMemberArg alloc] initWithSharedFolderId:(NSString * _Nonnull)sharedFolderId member:(DbxSharingMemberSelector * _Nonnull)member leaveACopy:(NSNumber * _Nonnull)leaveACopy];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)revokeSharedLink:(NSString * _Nonnull)url {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRevokeSharedLink;
    DbxSharingRevokeSharedLinkArg *arg = [[DbxSharingRevokeSharedLinkArg alloc] initWithUrl:(NSString * _Nonnull)url];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)shareFolder:(NSString *)path {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingShareFolder;
    DbxSharingShareFolderArg *arg = [[DbxSharingShareFolderArg alloc] initWithPath:(NSString *)path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)shareFolder:(NSString * _Nonnull)path memberPolicy:(DbxSharingMemberPolicy * _Nullable)memberPolicy aclUpdatePolicy:(DbxSharingAclUpdatePolicy * _Nullable)aclUpdatePolicy sharedLinkPolicy:(DbxSharingSharedLinkPolicy * _Nullable)sharedLinkPolicy forceAsync:(NSNumber * _Nullable)forceAsync {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingShareFolder;
    DbxSharingShareFolderArg *arg = [[DbxSharingShareFolderArg alloc] initWithPath:(NSString * _Nonnull)path memberPolicy:(DbxSharingMemberPolicy * _Nullable)memberPolicy aclUpdatePolicy:(DbxSharingAclUpdatePolicy * _Nullable)aclUpdatePolicy sharedLinkPolicy:(DbxSharingSharedLinkPolicy * _Nullable)sharedLinkPolicy forceAsync:(NSNumber * _Nullable)forceAsync];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)transferFolder:(NSString * _Nonnull)sharedFolderId toDropboxId:(NSString * _Nonnull)toDropboxId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingTransferFolder;
    DbxSharingTransferFolderArg *arg = [[DbxSharingTransferFolderArg alloc] initWithSharedFolderId:(NSString * _Nonnull)sharedFolderId toDropboxId:(NSString * _Nonnull)toDropboxId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)unmountFolder:(NSString * _Nonnull)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUnmountFolder;
    DbxSharingUnmountFolderArg *arg = [[DbxSharingUnmountFolderArg alloc] initWithSharedFolderId:(NSString * _Nonnull)sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)unshareFile:(NSString * _Nonnull)file {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUnshareFile;
    DbxSharingUnshareFileArg *arg = [[DbxSharingUnshareFileArg alloc] initWithFile:(NSString * _Nonnull)file];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)unshareFolder:(NSString *)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUnshareFolder;
    DbxSharingUnshareFolderArg *arg = [[DbxSharingUnshareFolderArg alloc] initWithSharedFolderId:(NSString *)sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)unshareFolder:(NSString * _Nonnull)sharedFolderId leaveACopy:(NSNumber * _Nullable)leaveACopy {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUnshareFolder;
    DbxSharingUnshareFolderArg *arg = [[DbxSharingUnshareFolderArg alloc] initWithSharedFolderId:(NSString * _Nonnull)sharedFolderId leaveACopy:(NSNumber * _Nullable)leaveACopy];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)updateFolderMember:(NSString * _Nonnull)sharedFolderId member:(DbxSharingMemberSelector * _Nonnull)member accessLevel:(DbxSharingAccessLevel * _Nonnull)accessLevel {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUpdateFolderMember;
    DbxSharingUpdateFolderMemberArg *arg = [[DbxSharingUpdateFolderMemberArg alloc] initWithSharedFolderId:(NSString * _Nonnull)sharedFolderId member:(DbxSharingMemberSelector * _Nonnull)member accessLevel:(DbxSharingAccessLevel * _Nonnull)accessLevel];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)updateFolderPolicy:(NSString *)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUpdateFolderPolicy;
    DbxSharingUpdateFolderPolicyArg *arg = [[DbxSharingUpdateFolderPolicyArg alloc] initWithSharedFolderId:(NSString *)sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)updateFolderPolicy:(NSString * _Nonnull)sharedFolderId memberPolicy:(DbxSharingMemberPolicy * _Nullable)memberPolicy aclUpdatePolicy:(DbxSharingAclUpdatePolicy * _Nullable)aclUpdatePolicy sharedLinkPolicy:(DbxSharingSharedLinkPolicy * _Nullable)sharedLinkPolicy {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUpdateFolderPolicy;
    DbxSharingUpdateFolderPolicyArg *arg = [[DbxSharingUpdateFolderPolicyArg alloc] initWithSharedFolderId:(NSString * _Nonnull)sharedFolderId memberPolicy:(DbxSharingMemberPolicy * _Nullable)memberPolicy aclUpdatePolicy:(DbxSharingAclUpdatePolicy * _Nullable)aclUpdatePolicy sharedLinkPolicy:(DbxSharingSharedLinkPolicy * _Nullable)sharedLinkPolicy];
    return [self.client requestRpc:route arg:arg];
}

@end
