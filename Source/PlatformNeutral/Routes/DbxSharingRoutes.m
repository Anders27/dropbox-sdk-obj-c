///
/// Auto-generated by Stone, do not modify.
///

#import "DbxSharingRoutes.h"

@implementation DbxSharingRoutes 

- (instancetype)init:(DropboxTransportClient *)client {
    self = [super init];
    if (self != nil) {
        _client = client;
    }
    return self;
}
- (DbxRpcTask *)addFileMember:(NSString *)file members:(NSArray<DbxSharingMemberSelector *> *)members {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingAddFileMember;
    DbxSharingAddFileMemberArgs *arg = [[DbxSharingAddFileMemberArgs alloc] initWithFile:file members:members];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)addFileMember:(NSString *)file members:(NSArray<DbxSharingMemberSelector *> *)members customMessage:(NSString *)customMessage quiet:(NSNumber *)quiet accessLevel:(DbxSharingAccessLevel *)accessLevel addMessageAsComment:(NSNumber *)addMessageAsComment {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingAddFileMember;
    DbxSharingAddFileMemberArgs *arg = [[DbxSharingAddFileMemberArgs alloc] initWithFile:file members:members customMessage:customMessage quiet:quiet accessLevel:accessLevel addMessageAsComment:addMessageAsComment];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)addFolderMember:(NSString *)sharedFolderId members:(NSArray<DbxSharingAddMember *> *)members {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingAddFolderMember;
    DbxSharingAddFolderMemberArg *arg = [[DbxSharingAddFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId members:members];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)addFolderMember:(NSString *)sharedFolderId members:(NSArray<DbxSharingAddMember *> *)members quiet:(NSNumber *)quiet customMessage:(NSString *)customMessage {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingAddFolderMember;
    DbxSharingAddFolderMemberArg *arg = [[DbxSharingAddFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId members:members quiet:quiet customMessage:customMessage];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)changeFileMemberAccess:(NSString *)file member:(DbxSharingMemberSelector *)member accessLevel:(DbxSharingAccessLevel *)accessLevel {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingChangeFileMemberAccess;
    DbxSharingChangeFileMemberAccessArgs *arg = [[DbxSharingChangeFileMemberAccessArgs alloc] initWithFile:file member:member accessLevel:accessLevel];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)checkJobStatus:(NSString *)asyncJobId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCheckJobStatus;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)checkRemoveMemberJobStatus:(NSString *)asyncJobId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCheckRemoveMemberJobStatus;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)checkShareJobStatus:(NSString *)asyncJobId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCheckShareJobStatus;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)createSharedLink:(NSString *)path {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCreateSharedLink;
    DbxSharingCreateSharedLinkArg *arg = [[DbxSharingCreateSharedLinkArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)createSharedLink:(NSString *)path shortUrl:(NSNumber *)shortUrl pendingUpload:(DbxSharingPendingUploadMode *)pendingUpload {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCreateSharedLink;
    DbxSharingCreateSharedLinkArg *arg = [[DbxSharingCreateSharedLinkArg alloc] initWithPath:path shortUrl:shortUrl pendingUpload:pendingUpload];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)createSharedLinkWithSettings:(NSString *)path {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCreateSharedLinkWithSettings;
    DbxSharingCreateSharedLinkWithSettingsArg *arg = [[DbxSharingCreateSharedLinkWithSettingsArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)createSharedLinkWithSettings:(NSString *)path settings:(DbxSharingSharedLinkSettings *)settings {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingCreateSharedLinkWithSettings;
    DbxSharingCreateSharedLinkWithSettingsArg *arg = [[DbxSharingCreateSharedLinkWithSettingsArg alloc] initWithPath:path settings:settings];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getFileMetadata:(NSString *)file {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetFileMetadata;
    DbxSharingGetFileMetadataArg *arg = [[DbxSharingGetFileMetadataArg alloc] initWithFile:file];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getFileMetadata:(NSString *)file actions:(NSArray<DbxSharingFileAction *> *)actions {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetFileMetadata;
    DbxSharingGetFileMetadataArg *arg = [[DbxSharingGetFileMetadataArg alloc] initWithFile:file actions:actions];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getFileMetadataBatch:(NSArray<NSString *> *)files {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetFileMetadataBatch;
    DbxSharingGetFileMetadataBatchArg *arg = [[DbxSharingGetFileMetadataBatchArg alloc] initWithFiles:files];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getFileMetadataBatch:(NSArray<NSString *> *)files actions:(NSArray<DbxSharingFileAction *> *)actions {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetFileMetadataBatch;
    DbxSharingGetFileMetadataBatchArg *arg = [[DbxSharingGetFileMetadataBatchArg alloc] initWithFiles:files actions:actions];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getFolderMetadata:(NSString *)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetFolderMetadata;
    DbxSharingGetMetadataArgs *arg = [[DbxSharingGetMetadataArgs alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getFolderMetadata:(NSString *)sharedFolderId actions:(NSArray<DbxSharingFolderAction *> *)actions {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetFolderMetadata;
    DbxSharingGetMetadataArgs *arg = [[DbxSharingGetMetadataArgs alloc] initWithSharedFolderId:sharedFolderId actions:actions];
    return [self.client requestRpc:route arg:arg];
}

- (DbxDownloadURLTask *)getSharedLinkFileURL:(NSString *)url overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinkFile;
    DbxSharingGetSharedLinkMetadataArg *arg = [[DbxSharingGetSharedLinkMetadataArg alloc] initWithUrl:url];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DbxDownloadURLTask *)getSharedLinkFileURL:(NSString *)url path:(NSString *)path linkPassword:(NSString *)linkPassword overwrite:(BOOL)overwrite destination:(NSURL *)destination {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinkFile;
    DbxSharingGetSharedLinkMetadataArg *arg = [[DbxSharingGetSharedLinkMetadataArg alloc] initWithUrl:url path:path linkPassword:linkPassword];
    return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DbxDownloadDataTask *)getSharedLinkFileData:(NSString *)url {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinkFile;
    DbxSharingGetSharedLinkMetadataArg *arg = [[DbxSharingGetSharedLinkMetadataArg alloc] initWithUrl:url];
    return [self.client requestDownload:route arg:arg];
}

- (DbxDownloadDataTask *)getSharedLinkFileData:(NSString *)url path:(NSString *)path linkPassword:(NSString *)linkPassword {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinkFile;
    DbxSharingGetSharedLinkMetadataArg *arg = [[DbxSharingGetSharedLinkMetadataArg alloc] initWithUrl:url path:path linkPassword:linkPassword];
    return [self.client requestDownload:route arg:arg];
}

- (DbxRpcTask *)getSharedLinkMetadata:(NSString *)url {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinkMetadata;
    DbxSharingGetSharedLinkMetadataArg *arg = [[DbxSharingGetSharedLinkMetadataArg alloc] initWithUrl:url];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getSharedLinkMetadata:(NSString *)url path:(NSString *)path linkPassword:(NSString *)linkPassword {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinkMetadata;
    DbxSharingGetSharedLinkMetadataArg *arg = [[DbxSharingGetSharedLinkMetadataArg alloc] initWithUrl:url path:path linkPassword:linkPassword];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getSharedLinks {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinks;
    DbxSharingGetSharedLinksArg *arg = [[DbxSharingGetSharedLinksArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getSharedLinks:(NSString *)path {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingGetSharedLinks;
    DbxSharingGetSharedLinksArg *arg = [[DbxSharingGetSharedLinksArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFileMembers:(NSString *)file {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFileMembers;
    DbxSharingListFileMembersArg *arg = [[DbxSharingListFileMembersArg alloc] initWithFile:file];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFileMembers:(NSString *)file actions:(NSArray<DbxSharingMemberAction *> *)actions includeInherited:(NSNumber *)includeInherited limit:(NSNumber *)limit {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFileMembers;
    DbxSharingListFileMembersArg *arg = [[DbxSharingListFileMembersArg alloc] initWithFile:file actions:actions includeInherited:includeInherited limit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFileMembersBatch:(NSArray<NSString *> *)files {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFileMembersBatch;
    DbxSharingListFileMembersBatchArg *arg = [[DbxSharingListFileMembersBatchArg alloc] initWithFiles:files];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFileMembersBatch:(NSArray<NSString *> *)files limit:(NSNumber *)limit {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFileMembersBatch;
    DbxSharingListFileMembersBatchArg *arg = [[DbxSharingListFileMembersBatchArg alloc] initWithFiles:files limit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFileMembersContinue:(NSString *)cursor {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFileMembersContinue;
    DbxSharingListFileMembersContinueArg *arg = [[DbxSharingListFileMembersContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolderMembers:(NSString *)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFolderMembers;
    DbxSharingListFolderMembersArgs *arg = [[DbxSharingListFolderMembersArgs alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolderMembers:(NSString *)sharedFolderId actions:(NSArray<DbxSharingMemberAction *> *)actions limit:(NSNumber *)limit {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFolderMembers;
    DbxSharingListFolderMembersArgs *arg = [[DbxSharingListFolderMembersArgs alloc] initWithSharedFolderId:sharedFolderId actions:actions limit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolderMembersContinue:(NSString *)cursor {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFolderMembersContinue;
    DbxSharingListFolderMembersContinueArg *arg = [[DbxSharingListFolderMembersContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolders {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFolders;
    DbxSharingListFoldersArgs *arg = [[DbxSharingListFoldersArgs alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFolders:(NSNumber *)limit actions:(NSArray<DbxSharingFolderAction *> *)actions {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFolders;
    DbxSharingListFoldersArgs *arg = [[DbxSharingListFoldersArgs alloc] initWithLimit:limit actions:actions];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listFoldersContinue:(NSString *)cursor {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListFoldersContinue;
    DbxSharingListFoldersContinueArg *arg = [[DbxSharingListFoldersContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listMountableFolders {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListMountableFolders;
    DbxSharingListFoldersArgs *arg = [[DbxSharingListFoldersArgs alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listMountableFolders:(NSNumber *)limit actions:(NSArray<DbxSharingFolderAction *> *)actions {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListMountableFolders;
    DbxSharingListFoldersArgs *arg = [[DbxSharingListFoldersArgs alloc] initWithLimit:limit actions:actions];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listMountableFoldersContinue:(NSString *)cursor {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListMountableFoldersContinue;
    DbxSharingListFoldersContinueArg *arg = [[DbxSharingListFoldersContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listReceivedFiles {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListReceivedFiles;
    DbxSharingListFilesArg *arg = [[DbxSharingListFilesArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listReceivedFiles:(NSNumber *)limit actions:(NSArray<DbxSharingFileAction *> *)actions {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListReceivedFiles;
    DbxSharingListFilesArg *arg = [[DbxSharingListFilesArg alloc] initWithLimit:limit actions:actions];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listReceivedFilesContinue:(NSString *)cursor {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListReceivedFilesContinue;
    DbxSharingListFilesContinueArg *arg = [[DbxSharingListFilesContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listSharedLinks {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListSharedLinks;
    DbxSharingListSharedLinksArg *arg = [[DbxSharingListSharedLinksArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)listSharedLinks:(NSString *)path cursor:(NSString *)cursor directOnly:(NSNumber *)directOnly {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingListSharedLinks;
    DbxSharingListSharedLinksArg *arg = [[DbxSharingListSharedLinksArg alloc] initWithPath:path cursor:cursor directOnly:directOnly];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)modifySharedLinkSettings:(NSString *)url settings:(DbxSharingSharedLinkSettings *)settings {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingModifySharedLinkSettings;
    DbxSharingModifySharedLinkSettingsArgs *arg = [[DbxSharingModifySharedLinkSettingsArgs alloc] initWithUrl:url settings:settings];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)modifySharedLinkSettings:(NSString *)url settings:(DbxSharingSharedLinkSettings *)settings removeExpiration:(NSNumber *)removeExpiration {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingModifySharedLinkSettings;
    DbxSharingModifySharedLinkSettingsArgs *arg = [[DbxSharingModifySharedLinkSettingsArgs alloc] initWithUrl:url settings:settings removeExpiration:removeExpiration];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)mountFolder:(NSString *)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingMountFolder;
    DbxSharingMountFolderArg *arg = [[DbxSharingMountFolderArg alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)relinquishFileMembership:(NSString *)file {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRelinquishFileMembership;
    DbxSharingRelinquishFileMembershipArg *arg = [[DbxSharingRelinquishFileMembershipArg alloc] initWithFile:file];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)relinquishFolderMembership:(NSString *)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRelinquishFolderMembership;
    DbxSharingRelinquishFolderMembershipArg *arg = [[DbxSharingRelinquishFolderMembershipArg alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)relinquishFolderMembership:(NSString *)sharedFolderId leaveACopy:(NSNumber *)leaveACopy {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRelinquishFolderMembership;
    DbxSharingRelinquishFolderMembershipArg *arg = [[DbxSharingRelinquishFolderMembershipArg alloc] initWithSharedFolderId:sharedFolderId leaveACopy:leaveACopy];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)removeFileMember:(NSString *)file member:(DbxSharingMemberSelector *)member {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRemoveFileMember;
    DbxSharingRemoveFileMemberArg *arg = [[DbxSharingRemoveFileMemberArg alloc] initWithFile:file member:member];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)removeFileMember2:(NSString *)file member:(DbxSharingMemberSelector *)member {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRemoveFileMember2;
    DbxSharingRemoveFileMemberArg *arg = [[DbxSharingRemoveFileMemberArg alloc] initWithFile:file member:member];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)removeFolderMember:(NSString *)sharedFolderId member:(DbxSharingMemberSelector *)member leaveACopy:(NSNumber *)leaveACopy {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRemoveFolderMember;
    DbxSharingRemoveFolderMemberArg *arg = [[DbxSharingRemoveFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId member:member leaveACopy:leaveACopy];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)revokeSharedLink:(NSString *)url {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingRevokeSharedLink;
    DbxSharingRevokeSharedLinkArg *arg = [[DbxSharingRevokeSharedLinkArg alloc] initWithUrl:url];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)shareFolder:(NSString *)path {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingShareFolder;
    DbxSharingShareFolderArg *arg = [[DbxSharingShareFolderArg alloc] initWithPath:path];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)shareFolder:(NSString *)path memberPolicy:(DbxSharingMemberPolicy *)memberPolicy aclUpdatePolicy:(DbxSharingAclUpdatePolicy *)aclUpdatePolicy sharedLinkPolicy:(DbxSharingSharedLinkPolicy *)sharedLinkPolicy forceAsync:(NSNumber *)forceAsync {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingShareFolder;
    DbxSharingShareFolderArg *arg = [[DbxSharingShareFolderArg alloc] initWithPath:path memberPolicy:memberPolicy aclUpdatePolicy:aclUpdatePolicy sharedLinkPolicy:sharedLinkPolicy forceAsync:forceAsync];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)transferFolder:(NSString *)sharedFolderId toDropboxId:(NSString *)toDropboxId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingTransferFolder;
    DbxSharingTransferFolderArg *arg = [[DbxSharingTransferFolderArg alloc] initWithSharedFolderId:sharedFolderId toDropboxId:toDropboxId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)unmountFolder:(NSString *)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUnmountFolder;
    DbxSharingUnmountFolderArg *arg = [[DbxSharingUnmountFolderArg alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)unshareFile:(NSString *)file {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUnshareFile;
    DbxSharingUnshareFileArg *arg = [[DbxSharingUnshareFileArg alloc] initWithFile:file];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)unshareFolder:(NSString *)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUnshareFolder;
    DbxSharingUnshareFolderArg *arg = [[DbxSharingUnshareFolderArg alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)unshareFolder:(NSString *)sharedFolderId leaveACopy:(NSNumber *)leaveACopy {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUnshareFolder;
    DbxSharingUnshareFolderArg *arg = [[DbxSharingUnshareFolderArg alloc] initWithSharedFolderId:sharedFolderId leaveACopy:leaveACopy];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)updateFolderMember:(NSString *)sharedFolderId member:(DbxSharingMemberSelector *)member accessLevel:(DbxSharingAccessLevel *)accessLevel {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUpdateFolderMember;
    DbxSharingUpdateFolderMemberArg *arg = [[DbxSharingUpdateFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId member:member accessLevel:accessLevel];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)updateFolderPolicy:(NSString *)sharedFolderId {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUpdateFolderPolicy;
    DbxSharingUpdateFolderPolicyArg *arg = [[DbxSharingUpdateFolderPolicyArg alloc] initWithSharedFolderId:sharedFolderId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)updateFolderPolicy:(NSString *)sharedFolderId memberPolicy:(DbxSharingMemberPolicy *)memberPolicy aclUpdatePolicy:(DbxSharingAclUpdatePolicy *)aclUpdatePolicy sharedLinkPolicy:(DbxSharingSharedLinkPolicy *)sharedLinkPolicy {
    DbxRoute *route = DbxSharingRouteObjects.dbxSharingUpdateFolderPolicy;
    DbxSharingUpdateFolderPolicyArg *arg = [[DbxSharingUpdateFolderPolicyArg alloc] initWithSharedFolderId:sharedFolderId memberPolicy:memberPolicy aclUpdatePolicy:aclUpdatePolicy sharedLinkPolicy:sharedLinkPolicy];
    return [self.client requestRpc:route arg:arg];
}

@end
