///
/// Auto-generated by Stone, do not modify.
///

#import "DbxAsyncLaunchEmptyResult.h"
#import "DbxAsyncLaunchResultBase.h"
#import "DbxAsyncPollArg.h"
#import "DbxAsyncPollEmptyResult.h"
#import "DbxAsyncPollError.h"
#import "DbxAsyncPollResultBase.h"
#import "DbxErrors.h"
#import "DbxPropertiesGetPropertyTemplateArg.h"
#import "DbxPropertiesGetPropertyTemplateResult.h"
#import "DbxPropertiesListPropertyTemplateIds.h"
#import "DbxPropertiesModifyPropertyTemplateError.h"
#import "DbxPropertiesPropertyFieldTemplate.h"
#import "DbxPropertiesPropertyGroupTemplate.h"
#import "DbxPropertiesPropertyTemplateError.h"
#import "DbxStoneBase.h"
#import "DbxTasks.h"
#import "DbxTeamActiveWebSession.h"
#import "DbxTeamAddPropertyTemplateArg.h"
#import "DbxTeamAddPropertyTemplateResult.h"
#import "DbxTeamAdminTier.h"
#import "DbxTeamApiApp.h"
#import "DbxTeamBaseDfbReport.h"
#import "DbxTeamCommonGroupManagementType.h"
#import "DbxTeamCommonGroupSummary.h"
#import "DbxTeamDateRange.h"
#import "DbxTeamDateRangeError.h"
#import "DbxTeamDesktopClientSession.h"
#import "DbxTeamDeviceSessionArg.h"
#import "DbxTeamDevicesActive.h"
#import "DbxTeamGetActivityReport.h"
#import "DbxTeamGetDevicesReport.h"
#import "DbxTeamGetMembershipReport.h"
#import "DbxTeamGetStorageReport.h"
#import "DbxTeamGroupAccessType.h"
#import "DbxTeamGroupCreateArg.h"
#import "DbxTeamGroupCreateError.h"
#import "DbxTeamGroupDeleteError.h"
#import "DbxTeamGroupFullInfo.h"
#import "DbxTeamGroupMemberInfo.h"
#import "DbxTeamGroupMemberSelector.h"
#import "DbxTeamGroupMemberSelectorError.h"
#import "DbxTeamGroupMemberSetAccessTypeError.h"
#import "DbxTeamGroupMembersAddArg.h"
#import "DbxTeamGroupMembersAddError.h"
#import "DbxTeamGroupMembersChangeResult.h"
#import "DbxTeamGroupMembersRemoveArg.h"
#import "DbxTeamGroupMembersRemoveError.h"
#import "DbxTeamGroupMembersSelectorError.h"
#import "DbxTeamGroupMembersSetAccessTypeArg.h"
#import "DbxTeamGroupSelector.h"
#import "DbxTeamGroupSelectorError.h"
#import "DbxTeamGroupUpdateArgs.h"
#import "DbxTeamGroupUpdateError.h"
#import "DbxTeamGroupsGetInfoError.h"
#import "DbxTeamGroupsGetInfoItem.h"
#import "DbxTeamGroupsListArg.h"
#import "DbxTeamGroupsListContinueArg.h"
#import "DbxTeamGroupsListContinueError.h"
#import "DbxTeamGroupsListResult.h"
#import "DbxTeamGroupsMembersListArg.h"
#import "DbxTeamGroupsMembersListContinueArg.h"
#import "DbxTeamGroupsMembersListContinueError.h"
#import "DbxTeamGroupsMembersListResult.h"
#import "DbxTeamGroupsPollError.h"
#import "DbxTeamGroupsSelector.h"
#import "DbxTeamIncludeMembersArg.h"
#import "DbxTeamListMemberAppsArg.h"
#import "DbxTeamListMemberAppsError.h"
#import "DbxTeamListMemberAppsResult.h"
#import "DbxTeamListMemberDevicesArg.h"
#import "DbxTeamListMemberDevicesError.h"
#import "DbxTeamListMemberDevicesResult.h"
#import "DbxTeamListMembersAppsArg.h"
#import "DbxTeamListMembersAppsError.h"
#import "DbxTeamListMembersAppsResult.h"
#import "DbxTeamListMembersDevicesArg.h"
#import "DbxTeamListMembersDevicesError.h"
#import "DbxTeamListMembersDevicesResult.h"
#import "DbxTeamListTeamAppsArg.h"
#import "DbxTeamListTeamAppsError.h"
#import "DbxTeamListTeamAppsResult.h"
#import "DbxTeamListTeamDevicesArg.h"
#import "DbxTeamListTeamDevicesError.h"
#import "DbxTeamListTeamDevicesResult.h"
#import "DbxTeamMemberAccess.h"
#import "DbxTeamMemberAddArg.h"
#import "DbxTeamMemberAddResult.h"
#import "DbxTeamMemberDevices.h"
#import "DbxTeamMemberLinkedApps.h"
#import "DbxTeamMemberSelectorError.h"
#import "DbxTeamMembersAddArg.h"
#import "DbxTeamMembersAddJobStatus.h"
#import "DbxTeamMembersAddLaunch.h"
#import "DbxTeamMembersDeactivateArg.h"
#import "DbxTeamMembersDeactivateError.h"
#import "DbxTeamMembersGetInfoArgs.h"
#import "DbxTeamMembersGetInfoError.h"
#import "DbxTeamMembersGetInfoItem.h"
#import "DbxTeamMembersListArg.h"
#import "DbxTeamMembersListContinueArg.h"
#import "DbxTeamMembersListContinueError.h"
#import "DbxTeamMembersListError.h"
#import "DbxTeamMembersListResult.h"
#import "DbxTeamMembersRecoverArg.h"
#import "DbxTeamMembersRecoverError.h"
#import "DbxTeamMembersRemoveArg.h"
#import "DbxTeamMembersRemoveError.h"
#import "DbxTeamMembersSendWelcomeError.h"
#import "DbxTeamMembersSetPermissionsArg.h"
#import "DbxTeamMembersSetPermissionsError.h"
#import "DbxTeamMembersSetPermissionsResult.h"
#import "DbxTeamMembersSetProfileArg.h"
#import "DbxTeamMembersSetProfileError.h"
#import "DbxTeamMembersSuspendError.h"
#import "DbxTeamMembersUnsuspendArg.h"
#import "DbxTeamMembersUnsuspendError.h"
#import "DbxTeamMobileClientSession.h"
#import "DbxTeamPoliciesTeamMemberPolicies.h"
#import "DbxTeamRevokeDesktopClientArg.h"
#import "DbxTeamRevokeDeviceSessionArg.h"
#import "DbxTeamRevokeDeviceSessionBatchArg.h"
#import "DbxTeamRevokeDeviceSessionBatchError.h"
#import "DbxTeamRevokeDeviceSessionBatchResult.h"
#import "DbxTeamRevokeDeviceSessionError.h"
#import "DbxTeamRevokeDeviceSessionStatus.h"
#import "DbxTeamRevokeLinkedApiAppArg.h"
#import "DbxTeamRevokeLinkedApiAppBatchArg.h"
#import "DbxTeamRevokeLinkedAppBatchError.h"
#import "DbxTeamRevokeLinkedAppBatchResult.h"
#import "DbxTeamRevokeLinkedAppError.h"
#import "DbxTeamRevokeLinkedAppStatus.h"
#import "DbxTeamRouteObjects.h"
#import "DbxTeamRoutes.h"
#import "DbxTeamStorageBucket.h"
#import "DbxTeamTeamGetInfoResult.h"
#import "DbxTeamTeamMemberInfo.h"
#import "DbxTeamTeamMemberProfile.h"
#import "DbxTeamUpdatePropertyTemplateArg.h"
#import "DbxTeamUpdatePropertyTemplateResult.h"
#import "DbxTeamUserSelectorArg.h"
#import "DbxTeamUserSelectorError.h"
#import "DropboxTransportClient.h"

@implementation DbxTeamRoutes 

- (instancetype)init:(DropboxTransportClient *)client {
    self = [super init];
    if (self != nil) {
        _client = client;
    }
    return self;
}
- (DbxRpcTask *)alphaGroupsCreate:(NSString *)groupName {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsCreate;
    DbxTeamGroupCreateArg *arg = [[DbxTeamGroupCreateArg alloc] initWithGroupName:(NSString *)groupName];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsCreate:(NSString * _Nonnull)groupName groupExternalId:(NSString * _Nullable)groupExternalId groupManagementType:(DbxTeamCommonGroupManagementType * _Nullable)groupManagementType {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsCreate;
    DbxTeamGroupCreateArg *arg = [[DbxTeamGroupCreateArg alloc] initWithGroupName:(NSString * _Nonnull)groupName groupExternalId:(NSString * _Nullable)groupExternalId groupManagementType:(DbxTeamCommonGroupManagementType * _Nullable)groupManagementType];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsGetInfo:(DbxTeamGroupsSelector *)groupsSelector {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsGetInfo;
    DbxTeamGroupsSelector *arg = groupsSelector;
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsList {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsList;
    DbxTeamGroupsListArg *arg = [[DbxTeamGroupsListArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsList:(NSNumber * _Nullable)limit {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsList;
    DbxTeamGroupsListArg *arg = [[DbxTeamGroupsListArg alloc] initWithLimit:(NSNumber * _Nullable)limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsListContinue:(NSString * _Nonnull)cursor {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsListContinue;
    DbxTeamGroupsListContinueArg *arg = [[DbxTeamGroupsListContinueArg alloc] initWithCursor:(NSString * _Nonnull)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsUpdate:(DbxTeamGroupSelector *)group {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsUpdate;
    DbxTeamGroupUpdateArgs *arg = [[DbxTeamGroupUpdateArgs alloc] initWithGroup:(DbxTeamGroupSelector *)group];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsUpdate:(DbxTeamGroupSelector * _Nonnull)group returnMembers:(NSNumber * _Nullable)returnMembers dNewGroupName:(NSString * _Nullable)dNewGroupName dNewGroupExternalId:(NSString * _Nullable)dNewGroupExternalId dNewGroupManagementType:(DbxTeamCommonGroupManagementType * _Nullable)dNewGroupManagementType {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsUpdate;
    DbxTeamGroupUpdateArgs *arg = [[DbxTeamGroupUpdateArgs alloc] initWithGroup:(DbxTeamGroupSelector * _Nonnull)group returnMembers:(NSNumber * _Nullable)returnMembers dNewGroupName:(NSString * _Nullable)dNewGroupName dNewGroupExternalId:(NSString * _Nullable)dNewGroupExternalId dNewGroupManagementType:(DbxTeamCommonGroupManagementType * _Nullable)dNewGroupManagementType];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesListMemberDevices:(NSString *)teamMemberId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesListMemberDevices;
    DbxTeamListMemberDevicesArg *arg = [[DbxTeamListMemberDevicesArg alloc] initWithTeamMemberId:(NSString *)teamMemberId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesListMemberDevices:(NSString * _Nonnull)teamMemberId includeWebSessions:(NSNumber * _Nullable)includeWebSessions includeDesktopClients:(NSNumber * _Nullable)includeDesktopClients includeMobileClients:(NSNumber * _Nullable)includeMobileClients {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesListMemberDevices;
    DbxTeamListMemberDevicesArg *arg = [[DbxTeamListMemberDevicesArg alloc] initWithTeamMemberId:(NSString * _Nonnull)teamMemberId includeWebSessions:(NSNumber * _Nullable)includeWebSessions includeDesktopClients:(NSNumber * _Nullable)includeDesktopClients includeMobileClients:(NSNumber * _Nullable)includeMobileClients];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesListMembersDevices {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesListMembersDevices;
    DbxTeamListMembersDevicesArg *arg = [[DbxTeamListMembersDevicesArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesListMembersDevices:(NSString * _Nullable)cursor includeWebSessions:(NSNumber * _Nullable)includeWebSessions includeDesktopClients:(NSNumber * _Nullable)includeDesktopClients includeMobileClients:(NSNumber * _Nullable)includeMobileClients {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesListMembersDevices;
    DbxTeamListMembersDevicesArg *arg = [[DbxTeamListMembersDevicesArg alloc] initWithCursor:(NSString * _Nullable)cursor includeWebSessions:(NSNumber * _Nullable)includeWebSessions includeDesktopClients:(NSNumber * _Nullable)includeDesktopClients includeMobileClients:(NSNumber * _Nullable)includeMobileClients];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesListTeamDevices {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesListTeamDevices;
    DbxTeamListTeamDevicesArg *arg = [[DbxTeamListTeamDevicesArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesListTeamDevices:(NSString * _Nullable)cursor includeWebSessions:(NSNumber * _Nullable)includeWebSessions includeDesktopClients:(NSNumber * _Nullable)includeDesktopClients includeMobileClients:(NSNumber * _Nullable)includeMobileClients {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesListTeamDevices;
    DbxTeamListTeamDevicesArg *arg = [[DbxTeamListTeamDevicesArg alloc] initWithCursor:(NSString * _Nullable)cursor includeWebSessions:(NSNumber * _Nullable)includeWebSessions includeDesktopClients:(NSNumber * _Nullable)includeDesktopClients includeMobileClients:(NSNumber * _Nullable)includeMobileClients];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesRevokeDeviceSession:(DbxTeamRevokeDeviceSessionArg *)revokeDeviceSessionArg {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesRevokeDeviceSession;
    DbxTeamRevokeDeviceSessionArg *arg = revokeDeviceSessionArg;
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesRevokeDeviceSessionBatch:(NSArray<DbxTeamRevokeDeviceSessionArg *> * _Nonnull)revokeDevices {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesRevokeDeviceSessionBatch;
    DbxTeamRevokeDeviceSessionBatchArg *arg = [[DbxTeamRevokeDeviceSessionBatchArg alloc] initWithRevokeDevices:(NSArray<DbxTeamRevokeDeviceSessionArg *> * _Nonnull)revokeDevices];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getInfo {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGetInfo;
    return [self.client requestRpc:route arg:nil];
}

- (DbxRpcTask *)groupsCreate:(NSString *)groupName {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsCreate;
    DbxTeamGroupCreateArg *arg = [[DbxTeamGroupCreateArg alloc] initWithGroupName:(NSString *)groupName];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsCreate:(NSString * _Nonnull)groupName groupExternalId:(NSString * _Nullable)groupExternalId groupManagementType:(DbxTeamCommonGroupManagementType * _Nullable)groupManagementType {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsCreate;
    DbxTeamGroupCreateArg *arg = [[DbxTeamGroupCreateArg alloc] initWithGroupName:(NSString * _Nonnull)groupName groupExternalId:(NSString * _Nullable)groupExternalId groupManagementType:(DbxTeamCommonGroupManagementType * _Nullable)groupManagementType];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsDelete:(DbxTeamGroupSelector *)groupSelector {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsDelete;
    DbxTeamGroupSelector *arg = groupSelector;
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsGetInfo:(DbxTeamGroupsSelector *)groupsSelector {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsGetInfo;
    DbxTeamGroupsSelector *arg = groupsSelector;
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsJobStatusGet:(NSString * _Nonnull)asyncJobId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsJobStatusGet;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:(NSString * _Nonnull)asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsList {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsList;
    DbxTeamGroupsListArg *arg = [[DbxTeamGroupsListArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsList:(NSNumber * _Nullable)limit {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsList;
    DbxTeamGroupsListArg *arg = [[DbxTeamGroupsListArg alloc] initWithLimit:(NSNumber * _Nullable)limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsListContinue:(NSString * _Nonnull)cursor {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsListContinue;
    DbxTeamGroupsListContinueArg *arg = [[DbxTeamGroupsListContinueArg alloc] initWithCursor:(NSString * _Nonnull)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersAdd:(DbxTeamGroupSelector *)group members:(NSArray<DbxTeamMemberAccess *> *)members {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersAdd;
    DbxTeamGroupMembersAddArg *arg = [[DbxTeamGroupMembersAddArg alloc] initWithGroup:(DbxTeamGroupSelector *)group members:(NSArray<DbxTeamMemberAccess *> *)members];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersAdd:(DbxTeamGroupSelector * _Nonnull)group members:(NSArray<DbxTeamMemberAccess *> * _Nonnull)members returnMembers:(NSNumber * _Nullable)returnMembers {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersAdd;
    DbxTeamGroupMembersAddArg *arg = [[DbxTeamGroupMembersAddArg alloc] initWithGroup:(DbxTeamGroupSelector * _Nonnull)group members:(NSArray<DbxTeamMemberAccess *> * _Nonnull)members returnMembers:(NSNumber * _Nullable)returnMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersList:(DbxTeamGroupSelector *)group {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersList;
    DbxTeamGroupsMembersListArg *arg = [[DbxTeamGroupsMembersListArg alloc] initWithGroup:(DbxTeamGroupSelector *)group];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersList:(DbxTeamGroupSelector * _Nonnull)group limit:(NSNumber * _Nullable)limit {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersList;
    DbxTeamGroupsMembersListArg *arg = [[DbxTeamGroupsMembersListArg alloc] initWithGroup:(DbxTeamGroupSelector * _Nonnull)group limit:(NSNumber * _Nullable)limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersListContinue:(NSString * _Nonnull)cursor {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersListContinue;
    DbxTeamGroupsMembersListContinueArg *arg = [[DbxTeamGroupsMembersListContinueArg alloc] initWithCursor:(NSString * _Nonnull)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersRemove:(DbxTeamGroupSelector *)group users:(NSArray<DbxTeamUserSelectorArg *> *)users {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersRemove;
    DbxTeamGroupMembersRemoveArg *arg = [[DbxTeamGroupMembersRemoveArg alloc] initWithGroup:(DbxTeamGroupSelector *)group users:(NSArray<DbxTeamUserSelectorArg *> *)users];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersRemove:(DbxTeamGroupSelector * _Nonnull)group users:(NSArray<DbxTeamUserSelectorArg *> * _Nonnull)users returnMembers:(NSNumber * _Nullable)returnMembers {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersRemove;
    DbxTeamGroupMembersRemoveArg *arg = [[DbxTeamGroupMembersRemoveArg alloc] initWithGroup:(DbxTeamGroupSelector * _Nonnull)group users:(NSArray<DbxTeamUserSelectorArg *> * _Nonnull)users returnMembers:(NSNumber * _Nullable)returnMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersSetAccessType:(DbxTeamGroupSelector *)group user:(DbxTeamUserSelectorArg *)user accessType:(DbxTeamGroupAccessType *)accessType {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersSetAccessType;
    DbxTeamGroupMembersSetAccessTypeArg *arg = [[DbxTeamGroupMembersSetAccessTypeArg alloc] initWithGroup:(DbxTeamGroupSelector *)group user:(DbxTeamUserSelectorArg *)user accessType:(DbxTeamGroupAccessType *)accessType];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersSetAccessType:(DbxTeamGroupSelector * _Nonnull)group user:(DbxTeamUserSelectorArg * _Nonnull)user accessType:(DbxTeamGroupAccessType * _Nonnull)accessType returnMembers:(NSNumber * _Nullable)returnMembers {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersSetAccessType;
    DbxTeamGroupMembersSetAccessTypeArg *arg = [[DbxTeamGroupMembersSetAccessTypeArg alloc] initWithGroup:(DbxTeamGroupSelector * _Nonnull)group user:(DbxTeamUserSelectorArg * _Nonnull)user accessType:(DbxTeamGroupAccessType * _Nonnull)accessType returnMembers:(NSNumber * _Nullable)returnMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsUpdate:(DbxTeamGroupSelector *)group {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsUpdate;
    DbxTeamGroupUpdateArgs *arg = [[DbxTeamGroupUpdateArgs alloc] initWithGroup:(DbxTeamGroupSelector *)group];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsUpdate:(DbxTeamGroupSelector * _Nonnull)group returnMembers:(NSNumber * _Nullable)returnMembers dNewGroupName:(NSString * _Nullable)dNewGroupName dNewGroupExternalId:(NSString * _Nullable)dNewGroupExternalId dNewGroupManagementType:(DbxTeamCommonGroupManagementType * _Nullable)dNewGroupManagementType {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsUpdate;
    DbxTeamGroupUpdateArgs *arg = [[DbxTeamGroupUpdateArgs alloc] initWithGroup:(DbxTeamGroupSelector * _Nonnull)group returnMembers:(NSNumber * _Nullable)returnMembers dNewGroupName:(NSString * _Nullable)dNewGroupName dNewGroupExternalId:(NSString * _Nullable)dNewGroupExternalId dNewGroupManagementType:(DbxTeamCommonGroupManagementType * _Nullable)dNewGroupManagementType];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsListMemberLinkedApps:(NSString * _Nonnull)teamMemberId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsListMemberLinkedApps;
    DbxTeamListMemberAppsArg *arg = [[DbxTeamListMemberAppsArg alloc] initWithTeamMemberId:(NSString * _Nonnull)teamMemberId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsListMembersLinkedApps {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsListMembersLinkedApps;
    DbxTeamListMembersAppsArg *arg = [[DbxTeamListMembersAppsArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsListMembersLinkedApps:(NSString * _Nullable)cursor {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsListMembersLinkedApps;
    DbxTeamListMembersAppsArg *arg = [[DbxTeamListMembersAppsArg alloc] initWithCursor:(NSString * _Nullable)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsListTeamLinkedApps {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsListTeamLinkedApps;
    DbxTeamListTeamAppsArg *arg = [[DbxTeamListTeamAppsArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsListTeamLinkedApps:(NSString * _Nullable)cursor {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsListTeamLinkedApps;
    DbxTeamListTeamAppsArg *arg = [[DbxTeamListTeamAppsArg alloc] initWithCursor:(NSString * _Nullable)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsRevokeLinkedApp:(NSString *)appId teamMemberId:(NSString *)teamMemberId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsRevokeLinkedApp;
    DbxTeamRevokeLinkedApiAppArg *arg = [[DbxTeamRevokeLinkedApiAppArg alloc] initWithAppId:(NSString *)appId teamMemberId:(NSString *)teamMemberId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsRevokeLinkedApp:(NSString * _Nonnull)appId teamMemberId:(NSString * _Nonnull)teamMemberId keepAppFolder:(NSNumber * _Nullable)keepAppFolder {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsRevokeLinkedApp;
    DbxTeamRevokeLinkedApiAppArg *arg = [[DbxTeamRevokeLinkedApiAppArg alloc] initWithAppId:(NSString * _Nonnull)appId teamMemberId:(NSString * _Nonnull)teamMemberId keepAppFolder:(NSNumber * _Nullable)keepAppFolder];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsRevokeLinkedAppBatch:(NSArray<DbxTeamRevokeLinkedApiAppArg *> * _Nonnull)revokeLinkedApp {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsRevokeLinkedAppBatch;
    DbxTeamRevokeLinkedApiAppBatchArg *arg = [[DbxTeamRevokeLinkedApiAppBatchArg alloc] initWithRevokeLinkedApp:(NSArray<DbxTeamRevokeLinkedApiAppArg *> * _Nonnull)revokeLinkedApp];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersAdd:(NSArray<DbxTeamMemberAddArg *> *)dNewMembers {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersAdd;
    DbxTeamMembersAddArg *arg = [[DbxTeamMembersAddArg alloc] initWithDNewMembers:(NSArray<DbxTeamMemberAddArg *> *)dNewMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersAdd:(NSArray<DbxTeamMemberAddArg *> * _Nonnull)dNewMembers forceAsync:(NSNumber * _Nullable)forceAsync {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersAdd;
    DbxTeamMembersAddArg *arg = [[DbxTeamMembersAddArg alloc] initWithDNewMembers:(NSArray<DbxTeamMemberAddArg *> * _Nonnull)dNewMembers forceAsync:(NSNumber * _Nullable)forceAsync];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersAddJobStatusGet:(NSString * _Nonnull)asyncJobId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersAddJobStatusGet;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:(NSString * _Nonnull)asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersGetInfo:(NSArray<DbxTeamUserSelectorArg *> * _Nonnull)members {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersGetInfo;
    DbxTeamMembersGetInfoArgs *arg = [[DbxTeamMembersGetInfoArgs alloc] initWithMembers:(NSArray<DbxTeamUserSelectorArg *> * _Nonnull)members];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersList {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersList;
    DbxTeamMembersListArg *arg = [[DbxTeamMembersListArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersList:(NSNumber * _Nullable)limit includeRemoved:(NSNumber * _Nullable)includeRemoved {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersList;
    DbxTeamMembersListArg *arg = [[DbxTeamMembersListArg alloc] initWithLimit:(NSNumber * _Nullable)limit includeRemoved:(NSNumber * _Nullable)includeRemoved];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersListContinue:(NSString * _Nonnull)cursor {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersListContinue;
    DbxTeamMembersListContinueArg *arg = [[DbxTeamMembersListContinueArg alloc] initWithCursor:(NSString * _Nonnull)cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersRecover:(DbxTeamUserSelectorArg * _Nonnull)user {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersRecover;
    DbxTeamMembersRecoverArg *arg = [[DbxTeamMembersRecoverArg alloc] initWithUser:(DbxTeamUserSelectorArg * _Nonnull)user];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersRemove:(DbxTeamUserSelectorArg *)user {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersRemove;
    DbxTeamMembersRemoveArg *arg = [[DbxTeamMembersRemoveArg alloc] initWithUser:(DbxTeamUserSelectorArg *)user];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersRemove:(DbxTeamUserSelectorArg * _Nonnull)user wipeData:(NSNumber * _Nullable)wipeData transferDestId:(DbxTeamUserSelectorArg * _Nullable)transferDestId transferAdminId:(DbxTeamUserSelectorArg * _Nullable)transferAdminId keepAccount:(NSNumber * _Nullable)keepAccount {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersRemove;
    DbxTeamMembersRemoveArg *arg = [[DbxTeamMembersRemoveArg alloc] initWithUser:(DbxTeamUserSelectorArg * _Nonnull)user wipeData:(NSNumber * _Nullable)wipeData transferDestId:(DbxTeamUserSelectorArg * _Nullable)transferDestId transferAdminId:(DbxTeamUserSelectorArg * _Nullable)transferAdminId keepAccount:(NSNumber * _Nullable)keepAccount];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersRemoveJobStatusGet:(NSString * _Nonnull)asyncJobId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersRemoveJobStatusGet;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:(NSString * _Nonnull)asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersSendWelcomeEmail:(DbxTeamUserSelectorArg *)userSelectorArg {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersSendWelcomeEmail;
    DbxTeamUserSelectorArg *arg = userSelectorArg;
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersSetAdminPermissions:(DbxTeamUserSelectorArg * _Nonnull)user dNewRole:(DbxTeamAdminTier * _Nonnull)dNewRole {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersSetAdminPermissions;
    DbxTeamMembersSetPermissionsArg *arg = [[DbxTeamMembersSetPermissionsArg alloc] initWithUser:(DbxTeamUserSelectorArg * _Nonnull)user dNewRole:(DbxTeamAdminTier * _Nonnull)dNewRole];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersSetProfile:(DbxTeamUserSelectorArg *)user {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersSetProfile;
    DbxTeamMembersSetProfileArg *arg = [[DbxTeamMembersSetProfileArg alloc] initWithUser:(DbxTeamUserSelectorArg *)user];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersSetProfile:(DbxTeamUserSelectorArg * _Nonnull)user dNewEmail:(NSString * _Nullable)dNewEmail dNewExternalId:(NSString * _Nullable)dNewExternalId dNewGivenName:(NSString * _Nullable)dNewGivenName dNewSurname:(NSString * _Nullable)dNewSurname {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersSetProfile;
    DbxTeamMembersSetProfileArg *arg = [[DbxTeamMembersSetProfileArg alloc] initWithUser:(DbxTeamUserSelectorArg * _Nonnull)user dNewEmail:(NSString * _Nullable)dNewEmail dNewExternalId:(NSString * _Nullable)dNewExternalId dNewGivenName:(NSString * _Nullable)dNewGivenName dNewSurname:(NSString * _Nullable)dNewSurname];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersSuspend:(DbxTeamUserSelectorArg *)user {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersSuspend;
    DbxTeamMembersDeactivateArg *arg = [[DbxTeamMembersDeactivateArg alloc] initWithUser:(DbxTeamUserSelectorArg *)user];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersSuspend:(DbxTeamUserSelectorArg * _Nonnull)user wipeData:(NSNumber * _Nullable)wipeData {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersSuspend;
    DbxTeamMembersDeactivateArg *arg = [[DbxTeamMembersDeactivateArg alloc] initWithUser:(DbxTeamUserSelectorArg * _Nonnull)user wipeData:(NSNumber * _Nullable)wipeData];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersUnsuspend:(DbxTeamUserSelectorArg * _Nonnull)user {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersUnsuspend;
    DbxTeamMembersUnsuspendArg *arg = [[DbxTeamMembersUnsuspendArg alloc] initWithUser:(DbxTeamUserSelectorArg * _Nonnull)user];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesTemplateAdd:(NSString * _Nonnull)name description_:(NSString * _Nonnull)description_ fields:(NSArray<DbxPropertiesPropertyFieldTemplate *> * _Nonnull)fields {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamPropertiesTemplateAdd;
    DbxTeamAddPropertyTemplateArg *arg = [[DbxTeamAddPropertyTemplateArg alloc] initWithName:(NSString * _Nonnull)name description_:(NSString * _Nonnull)description_ fields:(NSArray<DbxPropertiesPropertyFieldTemplate *> * _Nonnull)fields];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesTemplateGet:(NSString * _Nonnull)templateId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamPropertiesTemplateGet;
    DbxPropertiesGetPropertyTemplateArg *arg = [[DbxPropertiesGetPropertyTemplateArg alloc] initWithTemplateId:(NSString * _Nonnull)templateId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesTemplateList {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamPropertiesTemplateList;
    return [self.client requestRpc:route arg:nil];
}

- (DbxRpcTask *)propertiesTemplateUpdate:(NSString *)templateId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamPropertiesTemplateUpdate;
    DbxTeamUpdatePropertyTemplateArg *arg = [[DbxTeamUpdatePropertyTemplateArg alloc] initWithTemplateId:(NSString *)templateId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesTemplateUpdate:(NSString * _Nonnull)templateId name:(NSString * _Nullable)name description_:(NSString * _Nullable)description_ addFields:(NSArray<DbxPropertiesPropertyFieldTemplate *> * _Nullable)addFields {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamPropertiesTemplateUpdate;
    DbxTeamUpdatePropertyTemplateArg *arg = [[DbxTeamUpdatePropertyTemplateArg alloc] initWithTemplateId:(NSString * _Nonnull)templateId name:(NSString * _Nullable)name description_:(NSString * _Nullable)description_ addFields:(NSArray<DbxPropertiesPropertyFieldTemplate *> * _Nullable)addFields];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetActivity {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetActivity;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetActivity:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetActivity;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] initWithStartDate:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetDevices {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetDevices;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetDevices:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetDevices;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] initWithStartDate:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetMembership {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetMembership;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetMembership:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetMembership;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] initWithStartDate:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetStorage {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetStorage;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetStorage:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetStorage;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] initWithStartDate:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate];
    return [self.client requestRpc:route arg:arg];
}

@end
