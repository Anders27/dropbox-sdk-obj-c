///
/// Auto-generated by Stone, do not modify.
///

#import "DbxTeamRoutes.h"

@implementation DbxTeamRoutes 

- (instancetype)init:(DropboxTransportClient *)client {
    self = [super init];
    if (self != nil) {
        _client = client;
    }
    return self;
}
- (DbxRpcTask *)alphaGroupsCreate:(NSString *)groupName {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsCreate;
    DbxTeamGroupCreateArg *arg = [[DbxTeamGroupCreateArg alloc] initWithGroupName:groupName];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsCreate:(NSString *)groupName groupExternalId:(NSString *)groupExternalId groupManagementType:(DbxTeamCommonGroupManagementType *)groupManagementType {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsCreate;
    DbxTeamGroupCreateArg *arg = [[DbxTeamGroupCreateArg alloc] initWithGroupName:groupName groupExternalId:groupExternalId groupManagementType:groupManagementType];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsGetInfo:(DbxTeamGroupsSelector *)groupsSelector {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsGetInfo;
    DbxTeamGroupsSelector *arg = groupsSelector;
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsList {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsList;
    DbxTeamGroupsListArg *arg = [[DbxTeamGroupsListArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsList:(NSNumber *)limit {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsList;
    DbxTeamGroupsListArg *arg = [[DbxTeamGroupsListArg alloc] initWithLimit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsListContinue:(NSString *)cursor {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsListContinue;
    DbxTeamGroupsListContinueArg *arg = [[DbxTeamGroupsListContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsUpdate:(DbxTeamGroupSelector *)group {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsUpdate;
    DbxTeamGroupUpdateArgs *arg = [[DbxTeamGroupUpdateArgs alloc] initWithGroup:group];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)alphaGroupsUpdate:(DbxTeamGroupSelector *)group returnMembers:(NSNumber *)returnMembers dNewGroupName:(NSString *)dNewGroupName dNewGroupExternalId:(NSString *)dNewGroupExternalId dNewGroupManagementType:(DbxTeamCommonGroupManagementType *)dNewGroupManagementType {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamAlphaGroupsUpdate;
    DbxTeamGroupUpdateArgs *arg = [[DbxTeamGroupUpdateArgs alloc] initWithGroup:group returnMembers:returnMembers dNewGroupName:dNewGroupName dNewGroupExternalId:dNewGroupExternalId dNewGroupManagementType:dNewGroupManagementType];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesListMemberDevices:(NSString *)teamMemberId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesListMemberDevices;
    DbxTeamListMemberDevicesArg *arg = [[DbxTeamListMemberDevicesArg alloc] initWithTeamMemberId:teamMemberId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesListMemberDevices:(NSString *)teamMemberId includeWebSessions:(NSNumber *)includeWebSessions includeDesktopClients:(NSNumber *)includeDesktopClients includeMobileClients:(NSNumber *)includeMobileClients {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesListMemberDevices;
    DbxTeamListMemberDevicesArg *arg = [[DbxTeamListMemberDevicesArg alloc] initWithTeamMemberId:teamMemberId includeWebSessions:includeWebSessions includeDesktopClients:includeDesktopClients includeMobileClients:includeMobileClients];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesListMembersDevices {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesListMembersDevices;
    DbxTeamListMembersDevicesArg *arg = [[DbxTeamListMembersDevicesArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesListMembersDevices:(NSString *)cursor includeWebSessions:(NSNumber *)includeWebSessions includeDesktopClients:(NSNumber *)includeDesktopClients includeMobileClients:(NSNumber *)includeMobileClients {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesListMembersDevices;
    DbxTeamListMembersDevicesArg *arg = [[DbxTeamListMembersDevicesArg alloc] initWithCursor:cursor includeWebSessions:includeWebSessions includeDesktopClients:includeDesktopClients includeMobileClients:includeMobileClients];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesListTeamDevices {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesListTeamDevices;
    DbxTeamListTeamDevicesArg *arg = [[DbxTeamListTeamDevicesArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesListTeamDevices:(NSString *)cursor includeWebSessions:(NSNumber *)includeWebSessions includeDesktopClients:(NSNumber *)includeDesktopClients includeMobileClients:(NSNumber *)includeMobileClients {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesListTeamDevices;
    DbxTeamListTeamDevicesArg *arg = [[DbxTeamListTeamDevicesArg alloc] initWithCursor:cursor includeWebSessions:includeWebSessions includeDesktopClients:includeDesktopClients includeMobileClients:includeMobileClients];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesRevokeDeviceSession:(DbxTeamRevokeDeviceSessionArg *)revokeDeviceSessionArg {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesRevokeDeviceSession;
    DbxTeamRevokeDeviceSessionArg *arg = revokeDeviceSessionArg;
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)devicesRevokeDeviceSessionBatch:(NSArray<DbxTeamRevokeDeviceSessionArg *> *)revokeDevices {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamDevicesRevokeDeviceSessionBatch;
    DbxTeamRevokeDeviceSessionBatchArg *arg = [[DbxTeamRevokeDeviceSessionBatchArg alloc] initWithRevokeDevices:revokeDevices];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)getInfo {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGetInfo;
    return [self.client requestRpc:route arg:nil];
}

- (DbxRpcTask *)groupsCreate:(NSString *)groupName {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsCreate;
    DbxTeamGroupCreateArg *arg = [[DbxTeamGroupCreateArg alloc] initWithGroupName:groupName];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsCreate:(NSString *)groupName groupExternalId:(NSString *)groupExternalId groupManagementType:(DbxTeamCommonGroupManagementType *)groupManagementType {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsCreate;
    DbxTeamGroupCreateArg *arg = [[DbxTeamGroupCreateArg alloc] initWithGroupName:groupName groupExternalId:groupExternalId groupManagementType:groupManagementType];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsDelete:(DbxTeamGroupSelector *)groupSelector {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsDelete;
    DbxTeamGroupSelector *arg = groupSelector;
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsGetInfo:(DbxTeamGroupsSelector *)groupsSelector {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsGetInfo;
    DbxTeamGroupsSelector *arg = groupsSelector;
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsJobStatusGet:(NSString *)asyncJobId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsJobStatusGet;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsList {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsList;
    DbxTeamGroupsListArg *arg = [[DbxTeamGroupsListArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsList:(NSNumber *)limit {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsList;
    DbxTeamGroupsListArg *arg = [[DbxTeamGroupsListArg alloc] initWithLimit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsListContinue:(NSString *)cursor {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsListContinue;
    DbxTeamGroupsListContinueArg *arg = [[DbxTeamGroupsListContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersAdd:(DbxTeamGroupSelector *)group members:(NSArray<DbxTeamMemberAccess *> *)members {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersAdd;
    DbxTeamGroupMembersAddArg *arg = [[DbxTeamGroupMembersAddArg alloc] initWithGroup:group members:members];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersAdd:(DbxTeamGroupSelector *)group members:(NSArray<DbxTeamMemberAccess *> *)members returnMembers:(NSNumber *)returnMembers {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersAdd;
    DbxTeamGroupMembersAddArg *arg = [[DbxTeamGroupMembersAddArg alloc] initWithGroup:group members:members returnMembers:returnMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersList:(DbxTeamGroupSelector *)group {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersList;
    DbxTeamGroupsMembersListArg *arg = [[DbxTeamGroupsMembersListArg alloc] initWithGroup:group];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersList:(DbxTeamGroupSelector *)group limit:(NSNumber *)limit {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersList;
    DbxTeamGroupsMembersListArg *arg = [[DbxTeamGroupsMembersListArg alloc] initWithGroup:group limit:limit];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersListContinue:(NSString *)cursor {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersListContinue;
    DbxTeamGroupsMembersListContinueArg *arg = [[DbxTeamGroupsMembersListContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersRemove:(DbxTeamGroupSelector *)group users:(NSArray<DbxTeamUserSelectorArg *> *)users {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersRemove;
    DbxTeamGroupMembersRemoveArg *arg = [[DbxTeamGroupMembersRemoveArg alloc] initWithGroup:group users:users];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersRemove:(DbxTeamGroupSelector *)group users:(NSArray<DbxTeamUserSelectorArg *> *)users returnMembers:(NSNumber *)returnMembers {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersRemove;
    DbxTeamGroupMembersRemoveArg *arg = [[DbxTeamGroupMembersRemoveArg alloc] initWithGroup:group users:users returnMembers:returnMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersSetAccessType:(DbxTeamGroupSelector *)group user:(DbxTeamUserSelectorArg *)user accessType:(DbxTeamGroupAccessType *)accessType {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersSetAccessType;
    DbxTeamGroupMembersSetAccessTypeArg *arg = [[DbxTeamGroupMembersSetAccessTypeArg alloc] initWithGroup:group user:user accessType:accessType];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsMembersSetAccessType:(DbxTeamGroupSelector *)group user:(DbxTeamUserSelectorArg *)user accessType:(DbxTeamGroupAccessType *)accessType returnMembers:(NSNumber *)returnMembers {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsMembersSetAccessType;
    DbxTeamGroupMembersSetAccessTypeArg *arg = [[DbxTeamGroupMembersSetAccessTypeArg alloc] initWithGroup:group user:user accessType:accessType returnMembers:returnMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsUpdate:(DbxTeamGroupSelector *)group {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsUpdate;
    DbxTeamGroupUpdateArgs *arg = [[DbxTeamGroupUpdateArgs alloc] initWithGroup:group];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)groupsUpdate:(DbxTeamGroupSelector *)group returnMembers:(NSNumber *)returnMembers dNewGroupName:(NSString *)dNewGroupName dNewGroupExternalId:(NSString *)dNewGroupExternalId dNewGroupManagementType:(DbxTeamCommonGroupManagementType *)dNewGroupManagementType {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamGroupsUpdate;
    DbxTeamGroupUpdateArgs *arg = [[DbxTeamGroupUpdateArgs alloc] initWithGroup:group returnMembers:returnMembers dNewGroupName:dNewGroupName dNewGroupExternalId:dNewGroupExternalId dNewGroupManagementType:dNewGroupManagementType];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsListMemberLinkedApps:(NSString *)teamMemberId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsListMemberLinkedApps;
    DbxTeamListMemberAppsArg *arg = [[DbxTeamListMemberAppsArg alloc] initWithTeamMemberId:teamMemberId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsListMembersLinkedApps {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsListMembersLinkedApps;
    DbxTeamListMembersAppsArg *arg = [[DbxTeamListMembersAppsArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsListMembersLinkedApps:(NSString *)cursor {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsListMembersLinkedApps;
    DbxTeamListMembersAppsArg *arg = [[DbxTeamListMembersAppsArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsListTeamLinkedApps {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsListTeamLinkedApps;
    DbxTeamListTeamAppsArg *arg = [[DbxTeamListTeamAppsArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsListTeamLinkedApps:(NSString *)cursor {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsListTeamLinkedApps;
    DbxTeamListTeamAppsArg *arg = [[DbxTeamListTeamAppsArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsRevokeLinkedApp:(NSString *)appId teamMemberId:(NSString *)teamMemberId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsRevokeLinkedApp;
    DbxTeamRevokeLinkedApiAppArg *arg = [[DbxTeamRevokeLinkedApiAppArg alloc] initWithAppId:appId teamMemberId:teamMemberId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsRevokeLinkedApp:(NSString *)appId teamMemberId:(NSString *)teamMemberId keepAppFolder:(NSNumber *)keepAppFolder {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsRevokeLinkedApp;
    DbxTeamRevokeLinkedApiAppArg *arg = [[DbxTeamRevokeLinkedApiAppArg alloc] initWithAppId:appId teamMemberId:teamMemberId keepAppFolder:keepAppFolder];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)linkedAppsRevokeLinkedAppBatch:(NSArray<DbxTeamRevokeLinkedApiAppArg *> *)revokeLinkedApp {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamLinkedAppsRevokeLinkedAppBatch;
    DbxTeamRevokeLinkedApiAppBatchArg *arg = [[DbxTeamRevokeLinkedApiAppBatchArg alloc] initWithRevokeLinkedApp:revokeLinkedApp];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersAdd:(NSArray<DbxTeamMemberAddArg *> *)dNewMembers {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersAdd;
    DbxTeamMembersAddArg *arg = [[DbxTeamMembersAddArg alloc] initWithDNewMembers:dNewMembers];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersAdd:(NSArray<DbxTeamMemberAddArg *> *)dNewMembers forceAsync:(NSNumber *)forceAsync {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersAdd;
    DbxTeamMembersAddArg *arg = [[DbxTeamMembersAddArg alloc] initWithDNewMembers:dNewMembers forceAsync:forceAsync];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersAddJobStatusGet:(NSString *)asyncJobId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersAddJobStatusGet;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersGetInfo:(NSArray<DbxTeamUserSelectorArg *> *)members {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersGetInfo;
    DbxTeamMembersGetInfoArgs *arg = [[DbxTeamMembersGetInfoArgs alloc] initWithMembers:members];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersList {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersList;
    DbxTeamMembersListArg *arg = [[DbxTeamMembersListArg alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersList:(NSNumber *)limit includeRemoved:(NSNumber *)includeRemoved {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersList;
    DbxTeamMembersListArg *arg = [[DbxTeamMembersListArg alloc] initWithLimit:limit includeRemoved:includeRemoved];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersListContinue:(NSString *)cursor {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersListContinue;
    DbxTeamMembersListContinueArg *arg = [[DbxTeamMembersListContinueArg alloc] initWithCursor:cursor];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersRecover:(DbxTeamUserSelectorArg *)user {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersRecover;
    DbxTeamMembersRecoverArg *arg = [[DbxTeamMembersRecoverArg alloc] initWithUser:user];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersRemove:(DbxTeamUserSelectorArg *)user {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersRemove;
    DbxTeamMembersRemoveArg *arg = [[DbxTeamMembersRemoveArg alloc] initWithUser:user];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersRemove:(DbxTeamUserSelectorArg *)user wipeData:(NSNumber *)wipeData transferDestId:(DbxTeamUserSelectorArg *)transferDestId transferAdminId:(DbxTeamUserSelectorArg *)transferAdminId keepAccount:(NSNumber *)keepAccount {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersRemove;
    DbxTeamMembersRemoveArg *arg = [[DbxTeamMembersRemoveArg alloc] initWithUser:user wipeData:wipeData transferDestId:transferDestId transferAdminId:transferAdminId keepAccount:keepAccount];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersRemoveJobStatusGet:(NSString *)asyncJobId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersRemoveJobStatusGet;
    DbxAsyncPollArg *arg = [[DbxAsyncPollArg alloc] initWithAsyncJobId:asyncJobId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersSendWelcomeEmail:(DbxTeamUserSelectorArg *)userSelectorArg {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersSendWelcomeEmail;
    DbxTeamUserSelectorArg *arg = userSelectorArg;
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersSetAdminPermissions:(DbxTeamUserSelectorArg *)user dNewRole:(DbxTeamAdminTier *)dNewRole {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersSetAdminPermissions;
    DbxTeamMembersSetPermissionsArg *arg = [[DbxTeamMembersSetPermissionsArg alloc] initWithUser:user dNewRole:dNewRole];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersSetProfile:(DbxTeamUserSelectorArg *)user {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersSetProfile;
    DbxTeamMembersSetProfileArg *arg = [[DbxTeamMembersSetProfileArg alloc] initWithUser:user];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersSetProfile:(DbxTeamUserSelectorArg *)user dNewEmail:(NSString *)dNewEmail dNewExternalId:(NSString *)dNewExternalId dNewGivenName:(NSString *)dNewGivenName dNewSurname:(NSString *)dNewSurname {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersSetProfile;
    DbxTeamMembersSetProfileArg *arg = [[DbxTeamMembersSetProfileArg alloc] initWithUser:user dNewEmail:dNewEmail dNewExternalId:dNewExternalId dNewGivenName:dNewGivenName dNewSurname:dNewSurname];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersSuspend:(DbxTeamUserSelectorArg *)user {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersSuspend;
    DbxTeamMembersDeactivateArg *arg = [[DbxTeamMembersDeactivateArg alloc] initWithUser:user];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersSuspend:(DbxTeamUserSelectorArg *)user wipeData:(NSNumber *)wipeData {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersSuspend;
    DbxTeamMembersDeactivateArg *arg = [[DbxTeamMembersDeactivateArg alloc] initWithUser:user wipeData:wipeData];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)membersUnsuspend:(DbxTeamUserSelectorArg *)user {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamMembersUnsuspend;
    DbxTeamMembersUnsuspendArg *arg = [[DbxTeamMembersUnsuspendArg alloc] initWithUser:user];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesTemplateAdd:(NSString *)name description_:(NSString *)description_ fields:(NSArray<DbxPropertiesPropertyFieldTemplate *> *)fields {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamPropertiesTemplateAdd;
    DbxTeamAddPropertyTemplateArg *arg = [[DbxTeamAddPropertyTemplateArg alloc] initWithName:name description_:description_ fields:fields];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesTemplateGet:(NSString *)templateId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamPropertiesTemplateGet;
    DbxPropertiesGetPropertyTemplateArg *arg = [[DbxPropertiesGetPropertyTemplateArg alloc] initWithTemplateId:templateId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesTemplateList {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamPropertiesTemplateList;
    return [self.client requestRpc:route arg:nil];
}

- (DbxRpcTask *)propertiesTemplateUpdate:(NSString *)templateId {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamPropertiesTemplateUpdate;
    DbxTeamUpdatePropertyTemplateArg *arg = [[DbxTeamUpdatePropertyTemplateArg alloc] initWithTemplateId:templateId];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)propertiesTemplateUpdate:(NSString *)templateId name:(NSString *)name description_:(NSString *)description_ addFields:(NSArray<DbxPropertiesPropertyFieldTemplate *> *)addFields {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamPropertiesTemplateUpdate;
    DbxTeamUpdatePropertyTemplateArg *arg = [[DbxTeamUpdatePropertyTemplateArg alloc] initWithTemplateId:templateId name:name description_:description_ addFields:addFields];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetActivity {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetActivity;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetActivity:(NSDate *)startDate endDate:(NSDate *)endDate {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetActivity;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] initWithStartDate:startDate endDate:endDate];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetDevices {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetDevices;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetDevices:(NSDate *)startDate endDate:(NSDate *)endDate {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetDevices;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] initWithStartDate:startDate endDate:endDate];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetMembership {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetMembership;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetMembership:(NSDate *)startDate endDate:(NSDate *)endDate {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetMembership;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] initWithStartDate:startDate endDate:endDate];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetStorage {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetStorage;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] init];
    return [self.client requestRpc:route arg:arg];
}

- (DbxRpcTask *)reportsGetStorage:(NSDate *)startDate endDate:(NSDate *)endDate {
    DbxRoute *route = DbxTeamRouteObjects.dbxTeamReportsGetStorage;
    DbxTeamDateRange *arg = [[DbxTeamDateRange alloc] initWithStartDate:startDate endDate:endDate];
    return [self.client requestRpc:route arg:arg];
}

@end
